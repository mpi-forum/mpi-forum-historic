Index: src/include/mpi.h.in
===================================================================
--- src/include/mpi.h.in	(.../trunk)	(revision 4035)
+++ src/include/mpi.h.in	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -528,18 +528,18 @@
 #ifndef MPICH_SUPPRESS_PROTOTYPES
 /* We require that the C compiler support prototypes */
 /* Begin Prototypes */
-int MPI_Send(void*, int, MPI_Datatype, int, int, MPI_Comm);
+int MPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm);
 int MPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
 int MPI_Get_count(MPI_Status *, MPI_Datatype, int *);
-int MPI_Bsend(void*, int, MPI_Datatype, int, int, MPI_Comm);
-int MPI_Ssend(void*, int, MPI_Datatype, int, int, MPI_Comm);
-int MPI_Rsend(void*, int, MPI_Datatype, int, int, MPI_Comm);
+int MPI_Bsend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+int MPI_Ssend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+int MPI_Rsend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
 int MPI_Buffer_attach( void*, int);
 int MPI_Buffer_detach( void*, int *);
-int MPI_Isend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int MPI_Ibsend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int MPI_Issend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int MPI_Irsend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int MPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int MPI_Ibsend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int MPI_Issend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int MPI_Irsend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int MPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int MPI_Wait(MPI_Request *, MPI_Status *);
 int MPI_Test(MPI_Request *, int *, MPI_Status *);
@@ -553,23 +553,23 @@
 int MPI_Iprobe(int, int, MPI_Comm, int *, MPI_Status *);
 int MPI_Probe(int, int, MPI_Comm, MPI_Status *);
 int MPI_Cancel(MPI_Request *);
-int MPI_Test_cancelled(MPI_Status *, int *);
-int MPI_Send_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int MPI_Bsend_init(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
-int MPI_Ssend_init(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
-int MPI_Rsend_init(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+int MPI_Test_cancelled(const MPI_Status *, int *);
+int MPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int MPI_Bsend_init(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+int MPI_Ssend_init(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+int MPI_Rsend_init(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
 int MPI_Recv_init(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
 int MPI_Start(MPI_Request *);
 int MPI_Startall(int, MPI_Request *);
-int MPI_Sendrecv(void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
+int MPI_Sendrecv(const void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
 int MPI_Sendrecv_replace(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *);
 int MPI_Type_contiguous(int, MPI_Datatype, MPI_Datatype *);
 int MPI_Type_vector(int, int, int, MPI_Datatype, MPI_Datatype *);
 int MPI_Type_hvector(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-int MPI_Type_indexed(int, int *, int *, MPI_Datatype, MPI_Datatype *);
-int MPI_Type_hindexed(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *);
-int MPI_Type_struct(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *);
-int MPI_Address(void*, MPI_Aint *);
+int MPI_Type_indexed(int, const int *, const int *, MPI_Datatype, MPI_Datatype *);
+int MPI_Type_hindexed(int, const int *, const MPI_Aint *, MPI_Datatype, MPI_Datatype *);
+int MPI_Type_struct(int, const int *, const MPI_Aint *, const MPI_Datatype *, MPI_Datatype *);
+int MPI_Address(const void*, MPI_Aint *);
 /* We could add __attribute__((deprecated)) to routines like MPI_Type_extent */
 int MPI_Type_extent(MPI_Datatype, MPI_Aint *);
 /* See the 1.1 version of the Standard.  The standard made an 
@@ -582,35 +582,35 @@
 int MPI_Type_commit(MPI_Datatype *);
 int MPI_Type_free(MPI_Datatype *);
 int MPI_Get_elements(MPI_Status *, MPI_Datatype, int *);
-int MPI_Pack(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
-int MPI_Unpack(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
+int MPI_Pack(const void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
+int MPI_Unpack(const void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
 int MPI_Pack_size(int, MPI_Datatype, MPI_Comm, int *);
 int MPI_Barrier(MPI_Comm );
 int MPI_Bcast(void*, int, MPI_Datatype, int, MPI_Comm );
-int MPI_Gather(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
-int MPI_Gatherv(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm); 
-int MPI_Scatter(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-int MPI_Scatterv(void* , int *, int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-int MPI_Allgather(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-int MPI_Allgatherv(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-int MPI_Alltoall(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-int MPI_Alltoallv(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-int MPI_Reduce(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
+int MPI_Gather(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
+int MPI_Gatherv(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, int, MPI_Comm); 
+int MPI_Scatter(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+int MPI_Scatterv(const void* , const int *, const int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+int MPI_Allgather(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+int MPI_Allgatherv(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+int MPI_Alltoall(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+int MPI_Alltoallv(const void* , const int *, const int *, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+int MPI_Reduce(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
 int MPI_Op_create(MPI_User_function *, int, MPI_Op *);
 int MPI_Op_free( MPI_Op *);
-int MPI_Allreduce(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
-int MPI_Reduce_scatter(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm);
-int MPI_Scan(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
+int MPI_Allreduce(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
+int MPI_Reduce_scatter(const void* , void*, const int *, MPI_Datatype, MPI_Op, MPI_Comm);
+int MPI_Scan(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
 int MPI_Group_size(MPI_Group, int *);
 int MPI_Group_rank(MPI_Group, int *);
-int MPI_Group_translate_ranks (MPI_Group, int, int *, MPI_Group, int *);
+int MPI_Group_translate_ranks (MPI_Group, int, const int *, MPI_Group, int *);
 int MPI_Group_compare(MPI_Group, MPI_Group, int *);
 int MPI_Comm_group(MPI_Comm, MPI_Group *);
 int MPI_Group_union(MPI_Group, MPI_Group, MPI_Group *);
 int MPI_Group_intersection(MPI_Group, MPI_Group, MPI_Group *);
 int MPI_Group_difference(MPI_Group, MPI_Group, MPI_Group *);
-int MPI_Group_incl(MPI_Group, int, int *, MPI_Group *);
-int MPI_Group_excl(MPI_Group, int, int *, MPI_Group *);
+int MPI_Group_incl(MPI_Group, int, const int *, MPI_Group *);
+int MPI_Group_excl(MPI_Group, int, const int *, MPI_Group *);
 int MPI_Group_range_incl(MPI_Group, int, int [][3], MPI_Group *);
 int MPI_Group_range_excl(MPI_Group, int, int [][3], MPI_Group *);
 int MPI_Group_free(MPI_Group *);
@@ -632,21 +632,21 @@
 int MPI_Attr_get(MPI_Comm, int, void *, int *);
 int MPI_Attr_delete(MPI_Comm, int);
 int MPI_Topo_test(MPI_Comm, int *);
-int MPI_Cart_create(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+int MPI_Cart_create(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
 int MPI_Dims_create(int, int, int *);
-int MPI_Graph_create(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+int MPI_Graph_create(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
 int MPI_Graphdims_get(MPI_Comm, int *, int *);
 int MPI_Graph_get(MPI_Comm, int, int, int *, int *);
 int MPI_Cartdim_get(MPI_Comm, int *);
 int MPI_Cart_get(MPI_Comm, int, int *, int *, int *);
-int MPI_Cart_rank(MPI_Comm, int *, int *);
+int MPI_Cart_rank(MPI_Comm, const int *, int *);
 int MPI_Cart_coords(MPI_Comm, int, int, int *);
 int MPI_Graph_neighbors_count(MPI_Comm, int, int *);
 int MPI_Graph_neighbors(MPI_Comm, int, int, int *);
 int MPI_Cart_shift(MPI_Comm, int, int, int *, int *);
-int MPI_Cart_sub(MPI_Comm, int *, MPI_Comm *);
-int MPI_Cart_map(MPI_Comm, int, int *, int *, int *);
-int MPI_Graph_map(MPI_Comm, int, int *, int *, int *);
+int MPI_Cart_sub(MPI_Comm, const int *, MPI_Comm *);
+int MPI_Cart_map(MPI_Comm, int, const int *, const int *, int *);
+int MPI_Graph_map(MPI_Comm, int, const int *, const int *, int *);
 int MPI_Get_processor_name(char *, int *);
 int MPI_Get_version(int *, int *);
 int MPI_Errhandler_create(MPI_Handler_function *, MPI_Errhandler *);
@@ -677,27 +677,26 @@
 /* MPI-2 functions */
 
 /* Process Creation and Management */
-int MPI_Close_port(char *);
-int MPI_Comm_accept(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
-int MPI_Comm_connect(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+int MPI_Close_port(const char *);
+int MPI_Comm_accept(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+int MPI_Comm_connect(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
 int MPI_Comm_disconnect(MPI_Comm *);
 int MPI_Comm_get_parent(MPI_Comm *);
 int MPI_Comm_join(int, MPI_Comm *);
-int MPI_Comm_spawn(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *,
+int MPI_Comm_spawn(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *,
                    int []);
-int MPI_Comm_spawn_multiple(int, char *[], char **[], int [], MPI_Info [], int,
-			    MPI_Comm, MPI_Comm *, int []); 
-int MPI_Lookup_name(char *, MPI_Info, char *);
+int MPI_Comm_spawn_multiple(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
+int MPI_Lookup_name(const char *, MPI_Info, char *);
 int MPI_Open_port(MPI_Info, char *);
-int MPI_Publish_name(char *, MPI_Info, char *);
-int MPI_Unpublish_name(char *, MPI_Info, char *);
+int MPI_Publish_name(const char *, MPI_Info, const char *);
+int MPI_Unpublish_name(const char *, MPI_Info, const char *);
 
 /* One-Sided Communications */
-int MPI_Accumulate(void *, int, MPI_Datatype, int, MPI_Aint, int, 
+int MPI_Accumulate(const void *, int, MPI_Datatype, int, MPI_Aint, int, 
 		   MPI_Datatype,  MPI_Op, MPI_Win);
 int MPI_Get(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
 	    MPI_Win);
-int MPI_Put(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
+int MPI_Put(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
 	    MPI_Win);
 int MPI_Win_complete(MPI_Win);
 int MPI_Win_create(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *);
@@ -712,14 +711,14 @@
 int MPI_Win_wait(MPI_Win);
  
 /* Extended Collective Operations */
-int MPI_Alltoallw(void *, int [], int [], MPI_Datatype [], void *, int [], 
-		  int [], MPI_Datatype [], MPI_Comm);
-int MPI_Exscan(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
+int MPI_Alltoallw(const void *, const int [], const int [], const MPI_Datatype [], void *, const int [], 
+		  const int [], const MPI_Datatype [], MPI_Comm);
+int MPI_Exscan(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
  
 /* External Interfaces */
 int MPI_Add_error_class(int *);
 int MPI_Add_error_code(int, int *);
-int MPI_Add_error_string(int, char *);
+int MPI_Add_error_string(int, const char *);
 int MPI_Comm_call_errhandler(MPI_Comm, int);
 int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *, 
                            MPI_Comm_delete_attr_function *, int *, void *);
@@ -728,7 +727,7 @@
 int MPI_Comm_get_attr(MPI_Comm, int, void *, int *);
 int MPI_Comm_get_name(MPI_Comm, char *, int *);
 int MPI_Comm_set_attr(MPI_Comm, int, void *);
-int MPI_Comm_set_name(MPI_Comm, char *);
+int MPI_Comm_set_name(MPI_Comm, const char *);
 int MPI_File_call_errhandler(MPI_File, int);
 int MPI_Grequest_complete(MPI_Request);
 int MPI_Grequest_start(MPI_Grequest_query_function *, 
@@ -750,7 +749,7 @@
 int MPI_Type_get_envelope(MPI_Datatype, int *, int *, int *, int *);
 int MPI_Type_get_name(MPI_Datatype, char *, int *);
 int MPI_Type_set_attr(MPI_Datatype, int, void *);
-int MPI_Type_set_name(MPI_Datatype, char *);
+int MPI_Type_set_name(MPI_Datatype, const char *);
 int MPI_Type_match_size( int, int, MPI_Datatype *);
 int MPI_Win_call_errhandler(MPI_Win, int);
 int MPI_Win_create_keyval(MPI_Win_copy_attr_function *, 
@@ -760,7 +759,7 @@
 int MPI_Win_get_attr(MPI_Win, int, void *, int *);
 int MPI_Win_get_name(MPI_Win, char *, int *);
 int MPI_Win_set_attr(MPI_Win, int, void *);
-int MPI_Win_set_name(MPI_Win, char *);
+int MPI_Win_set_name(MPI_Win, const char *);
 
 /* Miscellany */
 #ifdef FOO
@@ -791,37 +790,37 @@
 int MPI_File_set_errhandler(MPI_File, MPI_Errhandler);
 int MPI_Finalized(int *);
 int MPI_Free_mem(void *);
-int MPI_Get_address(void *, MPI_Aint *);
+int MPI_Get_address(const void *, MPI_Aint *);
 int MPI_Info_create(MPI_Info *);
-int MPI_Info_delete(MPI_Info, char *);
+int MPI_Info_delete(MPI_Info, const char *);
 int MPI_Info_dup(MPI_Info, MPI_Info *);
 int MPI_Info_free(MPI_Info *info);
-int MPI_Info_get(MPI_Info, char *, int, char *, int *);
+int MPI_Info_get(MPI_Info, const char *, int, char *, int *);
 int MPI_Info_get_nkeys(MPI_Info, int *);
 int MPI_Info_get_nthkey(MPI_Info, int, char *);
-int MPI_Info_get_valuelen(MPI_Info, char *, int *, int *);
-int MPI_Info_set(MPI_Info, char *, char *);
-int MPI_Pack_external(char *, void *, int, MPI_Datatype, void *, MPI_Aint, 
+int MPI_Info_get_valuelen(MPI_Info, const char *, int *, int *);
+int MPI_Info_set(MPI_Info, const char *, const char *);
+int MPI_Pack_external(const char *, const void *, int, MPI_Datatype, void *, MPI_Aint, 
                       MPI_Aint *); 
-int MPI_Pack_external_size(char *, int, MPI_Datatype, MPI_Aint *); 
+int MPI_Pack_external_size(const char *, int, MPI_Datatype, MPI_Aint *); 
 int MPI_Request_get_status(MPI_Request, int *, MPI_Status *);
-int MPI_Status_c2f(MPI_Status *, MPI_Fint *);
-int MPI_Status_f2c(MPI_Fint *, MPI_Status *);
-int MPI_Type_create_darray(int, int, int, int [], int [], int [], int [], int,
+int MPI_Status_c2f(const MPI_Status *, MPI_Fint *);
+int MPI_Status_f2c(const MPI_Fint *, MPI_Status *);
+int MPI_Type_create_darray(int, int, int, const int [], const int [], const int [], const int [], int,
                            MPI_Datatype, MPI_Datatype *);
-int MPI_Type_create_hindexed(int, int [], MPI_Aint [], MPI_Datatype, 
+int MPI_Type_create_hindexed(int, const int [], const MPI_Aint [], MPI_Datatype, 
                              MPI_Datatype *);
 int MPI_Type_create_hvector(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-int MPI_Type_create_indexed_block(int, int, int [], MPI_Datatype, 
+int MPI_Type_create_indexed_block(int, int, const int [], MPI_Datatype, 
                                   MPI_Datatype *);
 int MPI_Type_create_resized(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *);
-int MPI_Type_create_struct(int, int [], MPI_Aint [], MPI_Datatype [], 
+int MPI_Type_create_struct(int, const int [], const MPI_Aint [], const MPI_Datatype [], 
                            MPI_Datatype *);
-int MPI_Type_create_subarray(int, int [], int [], int [], int, MPI_Datatype, 
+int MPI_Type_create_subarray(int, const int [], const int [], const int [], int, MPI_Datatype, 
                              MPI_Datatype *);
 int MPI_Type_get_extent(MPI_Datatype, MPI_Aint *, MPI_Aint *);
 int MPI_Type_get_true_extent(MPI_Datatype, MPI_Aint *, MPI_Aint *);
-int MPI_Unpack_external(char *, void *, MPI_Aint, MPI_Aint *, void *, int, 
+int MPI_Unpack_external(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, 
                         MPI_Datatype); 
 int MPI_Win_create_errhandler(MPI_Win_errhandler_fn *, MPI_Errhandler *);
 int MPI_Win_get_errhandler(MPI_Win, MPI_Errhandler *);
@@ -841,18 +840,18 @@
 
 /* Here are the bindings of the profiling routines */
 #if !defined(MPI_BUILD_PROFILING)
-int PMPI_Send(void*, int, MPI_Datatype, int, int, MPI_Comm);
+int PMPI_Send(const void*, int, MPI_Datatype, int, int, MPI_Comm);
 int PMPI_Recv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
 int PMPI_Get_count(MPI_Status *, MPI_Datatype, int *);
-int PMPI_Bsend(void*, int, MPI_Datatype, int, int, MPI_Comm);
-int PMPI_Ssend(void*, int, MPI_Datatype, int, int, MPI_Comm);
-int PMPI_Rsend(void*, int, MPI_Datatype, int, int, MPI_Comm);
+int PMPI_Bsend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+int PMPI_Ssend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+int PMPI_Rsend(const void*, int, MPI_Datatype, int, int, MPI_Comm);
 int PMPI_Buffer_attach( void* buffer, int);
 int PMPI_Buffer_detach( void* buffer, int *);
-int PMPI_Isend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Ibsend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Issend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Irsend(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Isend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Ibsend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Issend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Irsend(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int PMPI_Irecv(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int PMPI_Wait(MPI_Request *, MPI_Status *);
 int PMPI_Test(MPI_Request *, int *, MPI_Status *);
@@ -866,23 +865,23 @@
 int PMPI_Iprobe(int, int, MPI_Comm, int *, MPI_Status *);
 int PMPI_Probe(int, int, MPI_Comm, MPI_Status *);
 int PMPI_Cancel(MPI_Request *);
-int PMPI_Test_cancelled(MPI_Status *, int *);
-int PMPI_Send_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Bsend_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Ssend_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-int PMPI_Rsend_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Test_cancelled(const MPI_Status *, int *);
+int PMPI_Send_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Bsend_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Ssend_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+int PMPI_Rsend_init(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int PMPI_Recv_init(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
 int PMPI_Start(MPI_Request *);
 int PMPI_Startall(int, MPI_Request *);
-int PMPI_Sendrecv(void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
+int PMPI_Sendrecv(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
 int PMPI_Sendrecv_replace(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *);
 int PMPI_Type_contiguous(int, MPI_Datatype, MPI_Datatype *);
 int PMPI_Type_vector(int, int, int, MPI_Datatype, MPI_Datatype *);
 int PMPI_Type_hvector(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-int PMPI_Type_indexed(int, int *, int *, MPI_Datatype, MPI_Datatype *);
-int PMPI_Type_hindexed(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *);
-int PMPI_Type_struct(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *);
-int PMPI_Address(void*, MPI_Aint *);
+int PMPI_Type_indexed(int, const int *, const int *, MPI_Datatype, MPI_Datatype *);
+int PMPI_Type_hindexed(int, const int *, const MPI_Aint *, MPI_Datatype, MPI_Datatype *);
+int PMPI_Type_struct(int, const int *, const MPI_Aint *, const MPI_Datatype *, MPI_Datatype *);
+int PMPI_Address(const void*, MPI_Aint *);
 int PMPI_Type_extent(MPI_Datatype, MPI_Aint *);
 int PMPI_Type_size(MPI_Datatype, int *);
 int PMPI_Type_lb(MPI_Datatype, MPI_Aint *);
@@ -890,35 +889,35 @@
 int PMPI_Type_commit(MPI_Datatype *);
 int PMPI_Type_free(MPI_Datatype *);
 int PMPI_Get_elements(MPI_Status *, MPI_Datatype, int *);
-int PMPI_Pack(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
-int PMPI_Unpack(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
+int PMPI_Pack(const void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
+int PMPI_Unpack(const void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
 int PMPI_Pack_size(int, MPI_Datatype, MPI_Comm, int *);
 int PMPI_Barrier(MPI_Comm );
-int PMPI_Bcast(void* buffer, int, MPI_Datatype, int, MPI_Comm );
-int PMPI_Gather(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
-int PMPI_Gatherv(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm); 
-int PMPI_Scatter(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-int PMPI_Scatterv(void* , int *, int *displs, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-int PMPI_Allgather(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-int PMPI_Allgatherv(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-int PMPI_Alltoall(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-int PMPI_Alltoallv(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-int PMPI_Reduce(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
+int PMPI_Bcast(void*, int, MPI_Datatype, int, MPI_Comm );
+int PMPI_Gather(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
+int PMPI_Gatherv(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, int, MPI_Comm); 
+int PMPI_Scatter(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+int PMPI_Scatterv(const void* , const int *, const int *, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+int PMPI_Allgather(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+int PMPI_Allgatherv(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+int PMPI_Alltoall(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+int PMPI_Alltoallv(const void* , const int *, const int *, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+int PMPI_Reduce(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
 int PMPI_Op_create(MPI_User_function *, int, MPI_Op *);
 int PMPI_Op_free( MPI_Op *);
-int PMPI_Allreduce(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
-int PMPI_Reduce_scatter(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm);
-int PMPI_Scan(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
+int PMPI_Allreduce(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
+int PMPI_Reduce_scatter(const void* , void*, const int *, MPI_Datatype, MPI_Op, MPI_Comm);
+int PMPI_Scan(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
 int PMPI_Group_size(MPI_Group, int *);
 int PMPI_Group_rank(MPI_Group, int *);
-int PMPI_Group_translate_ranks (MPI_Group, int, int *, MPI_Group, int *);
+int PMPI_Group_translate_ranks(MPI_Group, int, const int *, MPI_Group, int *);
 int PMPI_Group_compare(MPI_Group, MPI_Group, int *);
 int PMPI_Comm_group(MPI_Comm, MPI_Group *);
 int PMPI_Group_union(MPI_Group, MPI_Group, MPI_Group *);
 int PMPI_Group_intersection(MPI_Group, MPI_Group, MPI_Group *);
 int PMPI_Group_difference(MPI_Group, MPI_Group, MPI_Group *);
-int PMPI_Group_incl(MPI_Group, int, int *, MPI_Group *);
-int PMPI_Group_excl(MPI_Group, int, int *, MPI_Group *);
+int PMPI_Group_incl(MPI_Group, int, const int *, MPI_Group *);
+int PMPI_Group_excl(MPI_Group, int, const int *, MPI_Group *);
 int PMPI_Group_range_incl(MPI_Group, int, int [][3], MPI_Group *);
 int PMPI_Group_range_excl(MPI_Group, int, int [][3], MPI_Group *);
 int PMPI_Group_free(MPI_Group *);
@@ -940,21 +939,21 @@
 int PMPI_Attr_get(MPI_Comm, int, void *, int *);
 int PMPI_Attr_delete(MPI_Comm, int);
 int PMPI_Topo_test(MPI_Comm, int *);
-int PMPI_Cart_create(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+int PMPI_Cart_create(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
 int PMPI_Dims_create(int, int, int *);
-int PMPI_Graph_create(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+int PMPI_Graph_create(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
 int PMPI_Graphdims_get(MPI_Comm, int *, int *);
 int PMPI_Graph_get(MPI_Comm, int, int, int *, int *);
 int PMPI_Cartdim_get(MPI_Comm, int *);
 int PMPI_Cart_get(MPI_Comm, int, int *, int *, int *);
-int PMPI_Cart_rank(MPI_Comm, int *, int *);
+int PMPI_Cart_rank(MPI_Comm, const int *, int *);
 int PMPI_Cart_coords(MPI_Comm, int, int, int *);
 int PMPI_Graph_neighbors_count(MPI_Comm, int, int *);
 int PMPI_Graph_neighbors(MPI_Comm, int, int, int *);
 int PMPI_Cart_shift(MPI_Comm, int, int, int *, int *);
-int PMPI_Cart_sub(MPI_Comm, int *, MPI_Comm *);
-int PMPI_Cart_map(MPI_Comm, int, int *, int *, int *);
-int PMPI_Graph_map(MPI_Comm, int, int *, int *, int *);
+int PMPI_Cart_sub(MPI_Comm, const int *, MPI_Comm *);
+int PMPI_Cart_map(MPI_Comm, int, const int *, const int *, int *);
+int PMPI_Graph_map(MPI_Comm, int, const int *, const int *, int *);
 int PMPI_Get_processor_name(char *, int *);
 int PMPI_Get_version(int *, int *);
 int PMPI_Errhandler_create(MPI_Handler_function *, MPI_Errhandler *);
@@ -975,28 +974,27 @@
 /* MPI-2 functions */
 
 /* Process Creation and Management */
-int PMPI_Close_port(char *);
-int PMPI_Comm_accept(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
-int PMPI_Comm_connect(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+int PMPI_Close_port(const char *);
+int PMPI_Comm_accept(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+int PMPI_Comm_connect(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
 int PMPI_Comm_disconnect(MPI_Comm *);
 int PMPI_Comm_get_parent(MPI_Comm *);
 int PMPI_Comm_join(int, MPI_Comm *);
-int PMPI_Comm_spawn(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *,
-                   int []);
-int PMPI_Comm_spawn_multiple(int, char *[], char **[], int [], MPI_Info [], int,
-			    MPI_Comm, MPI_Comm *, int []); 
-int PMPI_Lookup_name(char *, MPI_Info, char *);
+int PMPI_Comm_spawn(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *,
+                    int []);
+int PMPI_Comm_spawn_multiple(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
+int PMPI_Lookup_name(const char *, MPI_Info, char *);
 int PMPI_Open_port(MPI_Info, char *);
-int PMPI_Publish_name(char *, MPI_Info, char *);
-int PMPI_Unpublish_name(char *, MPI_Info, char *);
+int PMPI_Publish_name(const char *, MPI_Info, const char *);
+int PMPI_Unpublish_name(const char *, MPI_Info, const char *);
 
 /* One-Sided Communications */
-int PMPI_Accumulate(void *, int, MPI_Datatype, int, MPI_Aint, int, 
-		   MPI_Datatype,  MPI_Op, MPI_Win);
+int PMPI_Accumulate(const void *, int, MPI_Datatype, int, MPI_Aint, int, 
+                    MPI_Datatype,  MPI_Op, MPI_Win);
 int PMPI_Get(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
 	    MPI_Win);
-int PMPI_Put(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
-	    MPI_Win);
+int PMPI_Put(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
+             MPI_Win);
 int PMPI_Win_complete(MPI_Win);
 int PMPI_Win_create(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *);
 int PMPI_Win_fence(int, MPI_Win);
@@ -1010,14 +1008,13 @@
 int PMPI_Win_wait(MPI_Win);
  
 /* Extended Collective Operations */
-int PMPI_Alltoallw(void *, int [], int [], MPI_Datatype [], void *, int [], 
-		  int [], MPI_Datatype [], MPI_Comm);
-int PMPI_Exscan(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
+int PMPI_Alltoallw(const void *, const int [], const int [], const MPI_Datatype [], void *, const int [], const int [], const MPI_Datatype [], MPI_Comm);
+int PMPI_Exscan(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
  
 /* External Interfaces */
 int PMPI_Add_error_class(int *);
 int PMPI_Add_error_code(int, int *);
-int PMPI_Add_error_string(int, char *);
+int PMPI_Add_error_string(int, const char *);
 int PMPI_Comm_call_errhandler(MPI_Comm, int);
 int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *, 
                            MPI_Comm_delete_attr_function *, int *, void *);
@@ -1026,7 +1023,7 @@
 int PMPI_Comm_get_attr(MPI_Comm, int, void *, int *);
 int PMPI_Comm_get_name(MPI_Comm, char *, int *);
 int PMPI_Comm_set_attr(MPI_Comm, int, void *);
-int PMPI_Comm_set_name(MPI_Comm, char *);
+int PMPI_Comm_set_name(MPI_Comm, const char *);
 int PMPI_File_call_errhandler(MPI_File, int);
 int PMPI_Grequest_complete(MPI_Request);
 int PMPI_Grequest_start(MPI_Grequest_query_function *, 
@@ -1048,7 +1045,7 @@
 int PMPI_Type_get_envelope(MPI_Datatype, int *, int *, int *, int *);
 int PMPI_Type_get_name(MPI_Datatype, char *, int *);
 int PMPI_Type_set_attr(MPI_Datatype, int, void *);
-int PMPI_Type_set_name(MPI_Datatype, char *);
+int PMPI_Type_set_name(MPI_Datatype, const char *);
 int PMPI_Type_match_size( int, int, MPI_Datatype *);
 int PMPI_Win_call_errhandler(MPI_Win, int);
 int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *, 
@@ -1058,7 +1055,7 @@
 int PMPI_Win_get_attr(MPI_Win, int, void *, int *);
 int PMPI_Win_get_name(MPI_Win, char *, int *);
 int PMPI_Win_set_attr(MPI_Win, int, void *);
-int PMPI_Win_set_name(MPI_Win, char *);
+int PMPI_Win_set_name(MPI_Win, const char *);
 
 /* Fortran 90-related functions.  These routines are available only if
    Fortran 90 support is enabled 
@@ -1077,37 +1074,36 @@
 int PMPI_File_set_errhandler(MPI_File, MPI_Errhandler);
 int PMPI_Finalized(int *);
 int PMPI_Free_mem(void *);
-int PMPI_Get_address(void *, MPI_Aint *);
+int PMPI_Get_address(const void *, MPI_Aint *);
 int PMPI_Info_create(MPI_Info *);
-int PMPI_Info_delete(MPI_Info, char *);
+int PMPI_Info_delete(MPI_Info, const char *);
 int PMPI_Info_dup(MPI_Info, MPI_Info *);
 int PMPI_Info_free(MPI_Info *info);
-int PMPI_Info_get(MPI_Info, char *, int, char *, int *);
+int PMPI_Info_get(MPI_Info, const char *, int, char *, int *);
 int PMPI_Info_get_nkeys(MPI_Info, int *);
 int PMPI_Info_get_nthkey(MPI_Info, int, char *);
-int PMPI_Info_get_valuelen(MPI_Info, char *, int *, int *);
-int PMPI_Info_set(MPI_Info, char *, char *);
-int PMPI_Pack_external(char *, void *, int, MPI_Datatype, void *, MPI_Aint, 
-                      MPI_Aint *); 
-int PMPI_Pack_external_size(char *, int, MPI_Datatype, MPI_Aint *); 
+int PMPI_Info_get_valuelen(MPI_Info, const char *, int *, int *);
+int PMPI_Info_set(MPI_Info, const char *, const char *);
+int PMPI_Pack_external(const char *, const void *, int, MPI_Datatype, void *, MPI_Aint, 
+                       MPI_Aint *); 
+int PMPI_Pack_external_size(const char *, int, MPI_Datatype, MPI_Aint *); 
 int PMPI_Request_get_status(MPI_Request, int *, MPI_Status *);
-int PMPI_Status_c2f(MPI_Status *, MPI_Fint *);
-int PMPI_Status_f2c(MPI_Fint *, MPI_Status *);
-int PMPI_Type_create_darray(int, int, int, int [], int [], int [], int [], int,
-                           MPI_Datatype, MPI_Datatype *);
-int PMPI_Type_create_hindexed(int, int [], MPI_Aint [], MPI_Datatype, 
-                             MPI_Datatype *);
+int PMPI_Status_c2f(const MPI_Status *, MPI_Fint *);
+int PMPI_Status_f2c(const MPI_Fint *, MPI_Status *);
+int PMPI_Type_create_darray(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype *);
+int PMPI_Type_create_hindexed(int, const int [], const MPI_Aint [], MPI_Datatype, 
+                              MPI_Datatype *);
 int PMPI_Type_create_hvector(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-int PMPI_Type_create_indexed_block(int, int, int [], MPI_Datatype, 
+int PMPI_Type_create_indexed_block(int, int, const int [], MPI_Datatype, 
                                   MPI_Datatype *);
 int PMPI_Type_create_resized(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *);
-int PMPI_Type_create_struct(int, int [], MPI_Aint [], MPI_Datatype [], 
-                           MPI_Datatype *);
-int PMPI_Type_create_subarray(int, int [], int [], int [], int, MPI_Datatype, 
+int PMPI_Type_create_struct(int, const int [], const MPI_Aint [], const MPI_Datatype [], 
+                            MPI_Datatype *);
+int PMPI_Type_create_subarray(int, const int [], const int [], const int [], int, MPI_Datatype, 
                              MPI_Datatype *);
 int PMPI_Type_get_extent(MPI_Datatype, MPI_Aint *, MPI_Aint *);
 int PMPI_Type_get_true_extent(MPI_Datatype, MPI_Aint *, MPI_Aint *);
-int PMPI_Unpack_external(char *, void *, MPI_Aint, MPI_Aint *, void *, int, 
+int PMPI_Unpack_external(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, 
                         MPI_Datatype); 
 int PMPI_Win_create_errhandler(MPI_Win_errhandler_fn *, MPI_Errhandler *);
 int PMPI_Win_get_errhandler(MPI_Win, MPI_Errhandler *);
Index: src/include/mpiimpl.h
===================================================================
--- src/include/mpiimpl.h	(.../trunk)	(revision 4035)
+++ src/include/mpiimpl.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -1559,11 +1559,11 @@
 struct MPID_Win;
 typedef struct MPIRI_RMA_Ops {
     int (*Win_free)(struct MPID_Win **);
-    int (*Put)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
+    int (*Put)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
 		struct MPID_Win *);
     int (*Get)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, 
 		struct MPID_Win *);
-    int (*Accumulate)(void *, int, MPI_Datatype, int, MPI_Aint, int, 
+    int (*Accumulate)(const void *, int, MPI_Datatype, int, MPI_Aint, int, 
 		       MPI_Datatype, MPI_Op, struct MPID_Win *);
     int (*Win_fence)(int, struct MPID_Win *);
     int (*Win_post)(MPID_Group *, int, struct MPID_Win *);
@@ -1861,32 +1861,32 @@
     /* Contains pointers to the functions for the MPI collectives */
     int (*Barrier) (MPID_Comm *);
     int (*Bcast) (void*, int, MPI_Datatype, int, MPID_Comm * );
-    int (*Gather) (void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
+    int (*Gather) (const void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
                    int, MPID_Comm *); 
-    int (*Gatherv) (void*, int, MPI_Datatype, void*, int *, int *, 
+    int (*Gatherv) (const void*, int, MPI_Datatype, void*, const int *, const int *, 
                     MPI_Datatype, int, MPID_Comm *); 
-    int (*Scatter) (void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
+    int (*Scatter) (const void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
                     int, MPID_Comm *);
-    int (*Scatterv) (void*, int *, int *, MPI_Datatype, void*, int, 
+    int (*Scatterv) (const void*, const int *, const int *, MPI_Datatype, void*, int, 
                     MPI_Datatype, int, MPID_Comm *);
-    int (*Allgather) (void*, int, MPI_Datatype, void*, int, 
+    int (*Allgather) (const void*, int, MPI_Datatype, void*, int, 
                       MPI_Datatype, MPID_Comm *);
-    int (*Allgatherv) (void*, int, MPI_Datatype, void*, int *, int *, 
+    int (*Allgatherv) (const void*, int, MPI_Datatype, void*, const int *, const int *, 
                        MPI_Datatype, MPID_Comm *);
-    int (*Alltoall) (void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
-                               MPID_Comm *);
-    int (*Alltoallv) (void*, int *, int *, MPI_Datatype, void*, int *, 
-                     int *, MPI_Datatype, MPID_Comm *);
-    int (*Alltoallw) (void*, int *, int *, MPI_Datatype *, void*, int *, 
-                     int *, MPI_Datatype *, MPID_Comm *);
-    int (*Reduce) (void*, void*, int, MPI_Datatype, MPI_Op, int, 
+    int (*Alltoall) (const void*, int, MPI_Datatype, void*, int, MPI_Datatype, 
+                     MPID_Comm *);
+    int (*Alltoallv) (const void*, const int *, const int *, MPI_Datatype, void*, const int *, 
+                      const int *, MPI_Datatype, MPID_Comm *);
+    int (*Alltoallw) (const void*, const int *, const int *, const MPI_Datatype *, void*, const int *, 
+                      const int *, const MPI_Datatype *, MPID_Comm *);
+    int (*Reduce) (const void*, void*, int, MPI_Datatype, MPI_Op, int, 
                    MPID_Comm *);
-    int (*Allreduce) (void*, void*, int, MPI_Datatype, MPI_Op, 
+    int (*Allreduce) (const void*, void*, int, MPI_Datatype, MPI_Op, 
                       MPID_Comm *);
-    int (*Reduce_scatter) (void*, void*, int *, MPI_Datatype, MPI_Op, 
+    int (*Reduce_scatter) (const void*, void*, const int *, MPI_Datatype, MPI_Op, 
                            MPID_Comm *);
-    int (*Scan) (void*, void*, int, MPI_Datatype, MPI_Op, MPID_Comm * );
-    int (*Exscan) (void*, void*, int, MPI_Datatype, MPI_Op, MPID_Comm * );
+    int (*Scan) (const void*, void*, int, MPI_Datatype, MPI_Op, MPID_Comm * );
+    int (*Exscan) (const void*, void*, int, MPI_Datatype, MPI_Op, MPID_Comm * );
     
 } MPID_Collops;
 
@@ -1910,7 +1910,7 @@
     int (*cartCreate)( const MPID_Comm *, int, const int[], const int [],
 		       int, MPI_Comm * );
     int (*cartMap)   ( const MPID_Comm *, int, const int[], const int [], 
-		       int * );
+		       const int * );
     int (*graphCreate)( const MPID_Comm *, int, const int[], const int [],
 			int, MPI_Comm * );
     int (*graphMap)   ( const MPID_Comm *, int, const int[], const int[], 
@@ -2698,7 +2698,7 @@
   Return Value:
   'MPI_SUCCESS' or a valid MPI error code.
 @*/
-int MPID_Comm_accept(char *, MPID_Info *, int, MPID_Comm *, MPID_Comm **);
+int MPID_Comm_accept(const char *, MPID_Info *, int, MPID_Comm *, MPID_Comm **);
 
 /*@
    MPID_Comm_connect - MPID entry point for MPI_Comm_connect
@@ -2719,7 +2719,7 @@
 
 int MPID_Comm_disconnect(MPID_Comm *);
 
-int MPID_Comm_spawn_multiple(int, char *[], char* *[], int [], MPID_Info* [],
+int MPID_Comm_spawn_multiple(int, const char *[], char* *[], const int [], MPID_Info* [],
                              int, MPID_Comm *, MPID_Comm **, int []);
 
 /*@
@@ -3581,21 +3581,21 @@
    operations. They are wrappers around MPID send/recv functions. They do
    sends/receives by setting the context offset to
    MPID_CONTEXT_INTRA_COLL. */
-int MPIC_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm);
 int MPIC_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag,
               MPI_Comm comm, MPI_Status *status);
-int MPIC_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm);
-int MPIC_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIC_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                   int dest, int sendtag, void *recvbuf, int recvcount,
                   MPI_Datatype recvtype, int source, int recvtag,
                   MPI_Comm comm, MPI_Status *status);
-int MPIR_Localcopy(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIR_Localcopy(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                    void *recvbuf, int recvcount, MPI_Datatype recvtype);
 int MPIC_Irecv(void *buf, int count, MPI_Datatype datatype, int
                source, int tag, MPI_Comm comm, MPI_Request *request);
-int MPIC_Isend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm, MPI_Request *request);
 int MPIC_Wait(MPID_Request * request_ptr);
 
@@ -3640,41 +3640,41 @@
 #define MPIR_MAX(a,b) (((b)>(a))?(b):(a))
 #endif /* MPIR_MAX */
 
-int MPIR_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIR_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                    void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                    MPID_Comm *comm_ptr );
-int MPIR_Allgather_inter(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIR_Allgather_inter(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                          void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                          MPID_Comm *comm_ptr );
-int MPIR_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
-                    void *recvbuf, int *recvcounts, int *displs,   
+int MPIR_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+                    void *recvbuf, const int *recvcounts, const int *displs,   
                     MPI_Datatype recvtype, MPID_Comm *comm_ptr );
-int MPIR_Allgatherv_inter(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
-                          void *recvbuf, int *recvcounts, int *displs,   
+int MPIR_Allgatherv_inter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+                          void *recvbuf, const int *recvcounts, const int *displs,   
                           MPI_Datatype recvtype, MPID_Comm *comm_ptr );
-int MPIR_Allreduce(void *sendbuf, void *recvbuf, int count, 
+int MPIR_Allreduce(const void *sendbuf, void *recvbuf, int count, 
                    MPI_Datatype datatype, MPI_Op op, MPID_Comm *comm_ptr);
-int MPIR_Allreduce_inter(void *sendbuf, void *recvbuf, int count, 
+int MPIR_Allreduce_inter(const void *sendbuf, void *recvbuf, int count, 
                         MPI_Datatype datatype, MPI_Op op, MPID_Comm *comm_ptr);
-int MPIR_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPIR_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                   void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                   MPID_Comm *comm_ptr);
-int MPIR_Alltoall_inter(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPIR_Alltoall_inter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                         void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                         MPID_Comm *comm_ptr);
-int MPIR_Alltoallv(void *sendbuf, int *sendcnts, int *sdispls, 
-                   MPI_Datatype sendtype, void *recvbuf, int *recvcnts, 
-                   int *rdispls, MPI_Datatype recvtype, MPID_Comm *comm_ptr);
-int MPIR_Alltoallv_inter(void *sendbuf, int *sendcnts, int *sdispls, 
-                         MPI_Datatype sendtype, void *recvbuf, int *recvcnts, 
-                         int *rdispls, MPI_Datatype recvtype, 
+int MPIR_Alltoallv(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                   MPI_Datatype sendtype, void *recvbuf, const int *recvcnts, 
+                   const int *rdispls, MPI_Datatype recvtype, MPID_Comm *comm_ptr);
+int MPIR_Alltoallv_inter(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                         MPI_Datatype sendtype, void *recvbuf, const int *recvcnts, 
+                         const int *rdispls, MPI_Datatype recvtype, 
                          MPID_Comm *comm_ptr);
-int MPIR_Alltoallw(void *sendbuf, int *sendcnts, int *sdispls, 
-                   MPI_Datatype *sendtypes, void *recvbuf, int *recvcnts, 
-                   int *rdispls, MPI_Datatype *recvtypes, MPID_Comm *comm_ptr);
-int MPIR_Alltoallw_inter(void *sendbuf, int *sendcnts, int *sdispls, 
-                         MPI_Datatype *sendtypes, void *recvbuf, 
-                         int *recvcnts, int *rdispls, MPI_Datatype *recvtypes, 
+int MPIR_Alltoallw(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                   const MPI_Datatype *sendtypes, void *recvbuf, const int *recvcnts, 
+                   const int *rdispls, const MPI_Datatype *recvtypes, MPID_Comm *comm_ptr);
+int MPIR_Alltoallw_inter(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                         const MPI_Datatype *sendtypes, void *recvbuf, 
+                         const int *recvcnts, const int *rdispls, const MPI_Datatype *recvtypes, 
                          MPID_Comm *comm_ptr);
 int MPIR_Barrier_inter( MPID_Comm *comm_ptr);
 int MPIR_Bcast_inter(void *buffer, int count, MPI_Datatype datatype, 
@@ -3683,37 +3683,37 @@
                 root, MPID_Comm *comm_ptr);
 int MPIR_Bcast_or_coll_fn (void *buffer, int count, MPI_Datatype datatype, int
                 root, MPID_Comm *comm_ptr);
-int MPIR_Exscan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
+int MPIR_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                 MPI_Op op, MPID_Comm *comm_ptr );
-int MPIR_Gather (void *sendbuf, int sendcnt, MPI_Datatype sendtype,
+int MPIR_Gather (const void *sendbuf, int sendcnt, MPI_Datatype sendtype,
                  void *recvbuf, int recvcnt, MPI_Datatype recvtype,
                  int root, MPID_Comm *comm_ptr);
-int MPIR_Gather_inter (void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPIR_Gather_inter (const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                        void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                        int root, MPID_Comm *comm_ptr );
-int MPIR_Gatherv (void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
-                  void *recvbuf, int *recvcnts, int *displs,
+int MPIR_Gatherv (const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+                  void *recvbuf, const int *recvcnts, const int *displs,
                   MPI_Datatype recvtype, int root, MPID_Comm *comm_ptr); 
-int MPIR_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcnts, 
+int MPIR_Reduce_scatter(const void *sendbuf, void *recvbuf, const int *recvcnts, 
                         MPI_Datatype datatype, MPI_Op op, MPID_Comm *comm_ptr);
-int MPIR_Reduce_scatter_inter(void *sendbuf, void *recvbuf, int *recvcnts, 
+int MPIR_Reduce_scatter_inter(const void *sendbuf, void *recvbuf, const int *recvcnts, 
                               MPI_Datatype datatype, MPI_Op op, 
                               MPID_Comm *comm_ptr);
-int MPIR_Reduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
+int MPIR_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                 MPI_Op op, int root, MPID_Comm *comm_ptr );
-int MPIR_Reduce_or_coll_fn(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
+int MPIR_Reduce_or_coll_fn(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype,
                 MPI_Op op, int root, MPID_Comm *comm_ptr );
-int MPIR_Reduce_inter (void *sendbuf, void *recvbuf, int count, MPI_Datatype
+int MPIR_Reduce_inter (const void *sendbuf, void *recvbuf, int count, MPI_Datatype
                  datatype, MPI_Op op, int root, MPID_Comm *comm_ptr); 
-int MPIR_Scan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPIR_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
               MPI_Op op, MPID_Comm *comm_ptr);
-int MPIR_Scatter(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPIR_Scatter(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                  void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                  int root, MPID_Comm *comm_ptr );
-int MPIR_Scatter_inter(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPIR_Scatter_inter(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                        void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                        int root, MPID_Comm *comm_ptr );
-int MPIR_Scatterv (void *sendbuf, int *sendcnts, int *displs,
+int MPIR_Scatterv (const void *sendbuf, const int *sendcnts, const int *displs,
                    MPI_Datatype sendtype, void *recvbuf, int recvcnt,
                    MPI_Datatype recvtype, int root, MPID_Comm
                    *comm_ptr);
Index: src/mpe2/src/collchk/include/collchk.h
===================================================================
--- src/mpe2/src/collchk/include/collchk.h	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/include/collchk.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -95,16 +95,16 @@
 #endif
 void CollChk_set_begin(char* in);
 void CollChk_unset_begin(void);
-int CollChk_check_buff(MPI_Comm comm, void * buff, char* call);
-int CollChk_check_dims(MPI_Comm comm, int ndims, int *dims, char* call);
-int CollChk_check_graph(MPI_Comm comm, int nnodes, int *index, int* edges,
+int CollChk_check_buff(MPI_Comm comm, const void * buff, char* call);
+int CollChk_check_dims(MPI_Comm comm, int ndims, const int *dims, char* call);
+int CollChk_check_graph(MPI_Comm comm, int nnodes, const int *index, const int* edges,
                         char* call);
 int CollChk_check_size(MPI_Comm comm, int size, char* call);
 int CollChk_err_han(char * err_str, int err_code, char * call, MPI_Comm comm);
 int CollChk_is_init(void);
 int CollChk_same_amode(MPI_Comm comm, int amode, char* call);
 int CollChk_same_call(MPI_Comm comm, char* call);
-int CollChk_same_datarep(MPI_Comm comm, char* datarep, char *call);
+int CollChk_same_datarep(MPI_Comm comm, const char* datarep, char *call);
 
 int CollChk_hash_equal(const CollChk_hash_t *alpha,
                        const CollChk_hash_t *beta);
@@ -117,7 +117,7 @@
                           MPI_Datatype recvtype, int recvcnt,
                           int root, int are2buffs, char *call);
 int CollChk_dtype_scatterv(MPI_Comm comm,
-                           MPI_Datatype sendtype, int *sendcnts,
+                           MPI_Datatype sendtype, const int *sendcnts,
                            MPI_Datatype recvtype, int recvcnt,
                            int root, int are2buffs, char *call);
 int CollChk_dtype_allgather(MPI_Comm comm,
@@ -126,15 +126,15 @@
                             int are2buffs, char *call);
 int CollChk_dtype_allgatherv(MPI_Comm comm,
                              MPI_Datatype sendtype, int sendcnt,
-                             MPI_Datatype recvtype, int *recvcnts,
+                             MPI_Datatype recvtype, const int *recvcnts,
                              int are2buffs, char *call);
 int CollChk_dtype_alltoallv(MPI_Comm comm,
-                            MPI_Datatype sendtype, int *sendcnts,
-                            MPI_Datatype recvtype, int *recvcnts,
+                            MPI_Datatype sendtype, const int *sendcnts,
+                            MPI_Datatype recvtype, const int *recvcnts,
                             char *call);
 int CollChk_dtype_alltoallw(MPI_Comm comm,
-                            MPI_Datatype *sendtypes, int *sendcnts,
-                            MPI_Datatype *recvtypes, int *recvcnts,
+                            const MPI_Datatype *sendtypes, const int *sendcnts,
+                            const MPI_Datatype *recvtypes, const int *recvcnts,
                             char *call);
 
 int CollChk_same_high_low(MPI_Comm comm, int high_low, char* call);
Index: src/mpe2/src/collchk/src/check_graph.c
===================================================================
--- src/mpe2/src/collchk/src/check_graph.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/check_graph.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int CollChk_check_graph(MPI_Comm comm, int nnodes, int *index, int* edges,
+int CollChk_check_graph(MPI_Comm comm, int nnodes, const int *index, const int* edges,
                         char* call)
 {
     char err_str[COLLCHK_STD_STRLEN], check[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/file_open.c
===================================================================
--- src/mpe2/src/collchk/src/file_open.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_open.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_open(MPI_Comm comm, char *filename, int amode,
+int MPI_File_open(MPI_Comm comm, const char *filename, int amode,
                   MPI_Info info, MPI_File *fh)
 {
     int g2g = 1,i;
Index: src/mpe2/src/collchk/src/allgather.c
===================================================================
--- src/mpe2/src/collchk/src/allgather.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/allgather.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Allgather( void* sbuff, int scnt, MPI_Datatype stype,
+int MPI_Allgather( const void* sbuff, int scnt, MPI_Datatype stype,
                    void* rbuff, int rcnt, MPI_Datatype rtype,
                    MPI_Comm comm )
 {
Index: src/mpe2/src/collchk/src/comm_spawn.c
===================================================================
--- src/mpe2/src/collchk/src/comm_spawn.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/comm_spawn.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Comm_spawn(char *command, char **argv, int maxprocs, MPI_Info info,
+int MPI_Comm_spawn(const char *command, char **argv, int maxprocs, MPI_Info info,
                    int root, MPI_Comm comm, MPI_Comm *intercomm,
                    int *array_of_errcodes)
 {
Index: src/mpe2/src/collchk/src/scatter.c
===================================================================
--- src/mpe2/src/collchk/src/scatter.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/scatter.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Scatter(void* sbuff, int scnt, MPI_Datatype stype,
+int MPI_Scatter(const void* sbuff, int scnt, MPI_Datatype stype,
                 void* rbuff, int rcnt, MPI_Datatype rtype,
                 int root, MPI_Comm comm)
 {
Index: src/mpe2/src/collchk/src/file_write_all_end.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_all_end.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_all_end.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_all_end(MPI_File fh, void *buff, MPI_Status *st)
+int MPI_File_write_all_end(MPI_File fh, const void *buff, MPI_Status *st)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/gather.c
===================================================================
--- src/mpe2/src/collchk/src/gather.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/gather.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Gather(void* sbuff, int scnt, MPI_Datatype stype, 
+int MPI_Gather(const void* sbuff, int scnt, MPI_Datatype stype, 
                void* rbuff, int rcnt, MPI_Datatype rtype,
                int root, MPI_Comm comm)
 {
Index: src/mpe2/src/collchk/src/comm_spawn_multiple.c
===================================================================
--- src/mpe2/src/collchk/src/comm_spawn_multiple.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/comm_spawn_multiple.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -5,7 +5,7 @@
 #include "collchk.h" 
 
 int MPI_Comm_spawn_multiple(int count, char **array_of_commands,
-                            char ***array_of_argv, int *array_of_maxprocs,
+                            char ***array_of_argv, const int *array_of_maxprocs,
                             MPI_Info *array_of_info, int root, MPI_Comm comm, 
                             MPI_Comm *intercomm, int *array_of_errcodes)
 {
Index: src/mpe2/src/collchk/src/check_dims.c
===================================================================
--- src/mpe2/src/collchk/src/check_dims.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/check_dims.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int CollChk_check_dims(MPI_Comm comm, int ndims, int *dims, char* call)
+int CollChk_check_dims(MPI_Comm comm, int ndims, const int *dims, char* call)
 {
     char err_str[COLLCHK_STD_STRLEN], check[COLLCHK_SM_STRLEN];
     int i;
Index: src/mpe2/src/collchk/src/reduce_scatter.c
===================================================================
--- src/mpe2/src/collchk/src/reduce_scatter.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/reduce_scatter.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Reduce_scatter(void* sbuff, void* rbuff, int* rcnts, 
+int MPI_Reduce_scatter(const void* sbuff, void* rbuff, const int* rcnts, 
                        MPI_Datatype dt, MPI_Op op, MPI_Comm comm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/allreduce.c
===================================================================
--- src/mpe2/src/collchk/src/allreduce.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/allreduce.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Allreduce( void* sbuff, void* rbuff, int cnt, 
+int MPI_Allreduce( const void* sbuff, void* rbuff, int cnt, 
                    MPI_Datatype dt, MPI_Op op, MPI_Comm comm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/alltoall.c
===================================================================
--- src/mpe2/src/collchk/src/alltoall.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/alltoall.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -6,7 +6,7 @@
 
 #define BUFFS_NOT_SHARED 0
 
-int MPI_Alltoall( void* sbuff, int scnt, MPI_Datatype stype,
+int MPI_Alltoall( const void* sbuff, int scnt, MPI_Datatype stype,
                   void* rbuff, int rcnt, MPI_Datatype rtype,
                   MPI_Comm comm)
 {
Index: src/mpe2/src/collchk/src/comm_connect.c
===================================================================
--- src/mpe2/src/collchk/src/comm_connect.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/comm_connect.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Comm_connect(char *portname, MPI_Info info, int root,
+int MPI_Comm_connect(const char *portname, MPI_Info info, int root,
                      MPI_Comm comm, MPI_Comm *newcomm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/file_write_at_all.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_at_all.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_at_all.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, void *buff, int cnt, 
+int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buff, int cnt, 
                           MPI_Datatype dtype, MPI_Status *st)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/reduce.c
===================================================================
--- src/mpe2/src/collchk/src/reduce.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/reduce.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Reduce(void* sbuff, void* rbuff, int cnt, MPI_Datatype dt, 
+int MPI_Reduce(const void* sbuff, void* rbuff, int cnt, MPI_Datatype dt, 
                MPI_Op op, int root, MPI_Comm comm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/file_write_at_all_begin.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_at_all_begin.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_at_all_begin.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, void *buff,
+int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buff,
                                 int cnt, MPI_Datatype dtype)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/cart_create.c
===================================================================
--- src/mpe2/src/collchk/src/cart_create.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/cart_create.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods,
+int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int *dims, const int *periods,
                     int reorder, MPI_Comm *comm_cart)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/scan.c
===================================================================
--- src/mpe2/src/collchk/src/scan.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/scan.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Scan(void* sbuff, void* rbuff, int cnt, 
+int MPI_Scan(const void* sbuff, void* rbuff, int cnt, 
              MPI_Datatype dt, MPI_Op op, MPI_Comm comm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/alltoallv.c
===================================================================
--- src/mpe2/src/collchk/src/alltoallv.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/alltoallv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,8 +4,8 @@
 */
 #include "collchk.h" 
 
-int MPI_Alltoallv(void* sbuff, int *scnts, int *sdispls, MPI_Datatype stype,
-                  void* rbuff, int *rcnts, int *rdispls, MPI_Datatype rtype,
+int MPI_Alltoallv(const void* sbuff, const int *scnts, const int *sdispls, MPI_Datatype stype,
+                  void* rbuff, const int *rcnts, const int *rdispls, MPI_Datatype rtype,
                   MPI_Comm comm)
 {
     int             g2g = 1, rank;
Index: src/mpe2/src/collchk/src/scatterv.c
===================================================================
--- src/mpe2/src/collchk/src/scatterv.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/scatterv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Scatterv(void *sbuff, int *scnts, int* displs, MPI_Datatype stype,
+int MPI_Scatterv(const void *sbuff, const int *scnts, const int* displs, MPI_Datatype stype,
                  void *rbuff, int rcnt, MPI_Datatype rtype,
                  int root, MPI_Comm comm)
 {
Index: src/mpe2/src/collchk/src/file_write_ordered.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_ordered.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_ordered.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_ordered(MPI_File fh, void *buff, int cnt,
+int MPI_File_write_ordered(MPI_File fh, const void *buff, int cnt,
                            MPI_Datatype dtype, MPI_Status *st)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/graph_map.c
===================================================================
--- src/mpe2/src/collchk/src/graph_map.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/graph_map.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -5,7 +5,7 @@
 #include "collchk.h" 
 
 int MPI_Graph_map(MPI_Comm comm, int nnodes,
-                  int *index, int *edges, int *newrank)
+                  const int *index, const int *edges, int *newrank)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/file_write_ordered_begin.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_ordered_begin.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_ordered_begin.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_ordered_begin(MPI_File fh, void *buff, int cnt, 
+int MPI_File_write_ordered_begin(MPI_File fh, const void *buff, int cnt, 
                                  MPI_Datatype dtype)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/comm_accept.c
===================================================================
--- src/mpe2/src/collchk/src/comm_accept.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/comm_accept.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Comm_accept(char *portname, MPI_Info info, int root,
+int MPI_Comm_accept(const char *portname, MPI_Info info, int root,
                     MPI_Comm comm, MPI_Comm *newcomm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/file_write_all.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_all.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_all.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_all(MPI_File fh, void *buff, int cnt,
+int MPI_File_write_all(MPI_File fh, const void *buff, int cnt,
                        MPI_Datatype dtype, MPI_Status *st)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/file_write_all_begin.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_all_begin.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_all_begin.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_all_begin(MPI_File fh, void *buff, int cnt,
+int MPI_File_write_all_begin(MPI_File fh, const void *buff, int cnt,
                              MPI_Datatype dtype)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/same_dtype.c
===================================================================
--- src/mpe2/src/collchk/src/same_dtype.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/same_dtype.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -561,7 +561,7 @@
   on process root. 
 */
 int CollChk_dtype_scatterv(MPI_Comm comm,
-                           MPI_Datatype sendtype, int *sendcnts,
+                           MPI_Datatype sendtype, const int *sendcnts,
                            MPI_Datatype recvtype, int recvcnt,
                            int root, int are2buffs, char *call)
 {
@@ -738,7 +738,7 @@
 */
 int CollChk_dtype_allgatherv(MPI_Comm comm,
                              MPI_Datatype sendtype, int sendcnt,
-                             MPI_Datatype recvtype, int *recvcnts,
+                             MPI_Datatype recvtype, const int *recvcnts,
                              int are2buffs, char *call)
 {
     CollChk_hash_t  *hashes;      /* hash array for (sendtype,sendcnt) */
@@ -838,8 +838,8 @@
   (sendtype,sendcnts[]) collected from all the other processes.
 */
 int CollChk_dtype_alltoallv(MPI_Comm comm,
-                            MPI_Datatype sendtype, int *sendcnts,
-                            MPI_Datatype recvtype, int *recvcnts,
+                            MPI_Datatype sendtype, const int *sendcnts,
+                            MPI_Datatype recvtype, const int *recvcnts,
                             char *call)
 {
     CollChk_hash_t  *send_hashes;    /* hash array for (sendtype,sendcnt[]) */
@@ -936,8 +936,8 @@
   (sendtype[],sendcnts[]) collected from all the other processes.
 */
 int CollChk_dtype_alltoallw(MPI_Comm comm,
-                            MPI_Datatype *sendtypes, int *sendcnts,
-                            MPI_Datatype *recvtypes, int *recvcnts,
+                            const MPI_Datatype *sendtypes, const int *sendcnts,
+                            const MPI_Datatype *recvtypes, const int *recvcnts,
                             char *call)
 {
     CollChk_hash_t  *send_hashes;  /* hash array for (sendtypes[],sendcnt[]) */
Index: src/mpe2/src/collchk/src/file_write_at_all_end.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_at_all_end.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_at_all_end.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_at_all_end(MPI_File fh, void *buff, MPI_Status *st)
+int MPI_File_write_at_all_end(MPI_File fh, const void *buff, MPI_Status *st)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/gatherv.c
===================================================================
--- src/mpe2/src/collchk/src/gatherv.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/gatherv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,8 +4,8 @@
 */
 #include "collchk.h" 
 
-int MPI_Gatherv(void *sbuff, int scnt, MPI_Datatype stype,
-                void *rbuff, int *rcnts, int *displs, MPI_Datatype rtype,
+int MPI_Gatherv(const void *sbuff, int scnt, MPI_Datatype stype,
+                void *rbuff, const int *rcnts, const int *displs, MPI_Datatype rtype,
                 int root, MPI_Comm comm)
 {
     int             g2g = 1, rank;
Index: src/mpe2/src/collchk/src/check_buff.c
===================================================================
--- src/mpe2/src/collchk/src/check_buff.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/check_buff.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int CollChk_check_buff(MPI_Comm comm, void *buff, char* call)
+int CollChk_check_buff(MPI_Comm comm, const void *buff, char* call)
 {
 #if defined( HAVE_MPI_IN_PLACE )
     int   num_buffs_in_place;
Index: src/mpe2/src/collchk/src/exscan.c
===================================================================
--- src/mpe2/src/collchk/src/exscan.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/exscan.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Exscan(void* sbuff, void* rbuff, int cnt, 
+int MPI_Exscan(const void* sbuff, void* rbuff, int cnt, 
                MPI_Datatype dt, MPI_Op op, MPI_Comm comm)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/file_write_ordered_end.c
===================================================================
--- src/mpe2/src/collchk/src/file_write_ordered_end.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_write_ordered_end.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_File_write_ordered_end(MPI_File fh, void *buff, MPI_Status *st)
+int MPI_File_write_ordered_end(MPI_File fh, const void *buff, MPI_Status *st)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/graph_create.c
===================================================================
--- src/mpe2/src/collchk/src/graph_create.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/graph_create.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,8 +4,8 @@
 */
 #include "collchk.h" 
 
-int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index,
-                     int *edges, int reorder, MPI_Comm *comm_graph)
+int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int *index,
+                     const int *edges, int reorder, MPI_Comm *comm_graph)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/file_set_view.c
===================================================================
--- src/mpe2/src/collchk/src/file_set_view.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/file_set_view.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -5,7 +5,7 @@
 #include "collchk.h" 
 
 int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, 
-                      MPI_Datatype filetype, char *datarep, MPI_Info info)
+                      MPI_Datatype filetype, const char *datarep, MPI_Info info)
 {
     int g2g = 1;
     char call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/same_datarep.c
===================================================================
--- src/mpe2/src/collchk/src/same_datarep.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/same_datarep.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int CollChk_same_datarep(MPI_Comm comm, char* datarep, char *call)
+int CollChk_same_datarep(MPI_Comm comm, const char* datarep, char *call)
 {
     int r, s, i, go, ok;     /* rank, size, counter, go flag, ok flag */
     char buff[COLLCHK_STD_STRLEN];          /* temp communication buffer */
Index: src/mpe2/src/collchk/src/cart_map.c
===================================================================
--- src/mpe2/src/collchk/src/cart_map.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/cart_map.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,7 +4,7 @@
 */
 #include "collchk.h" 
 
-int MPI_Cart_map(MPI_Comm comm, int ndims, int *dims, int *periods,
+int MPI_Cart_map(MPI_Comm comm, int ndims, const int *dims, const int *periods,
                  int *newrank)
 {
     int g2g = 1;
Index: src/mpe2/src/collchk/src/allgatherv.c
===================================================================
--- src/mpe2/src/collchk/src/allgatherv.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/allgatherv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -4,8 +4,8 @@
 */
 #include "collchk.h" 
 
-int MPI_Allgatherv( void* sbuff, int scnt, MPI_Datatype stype,
-                    void* rbuff, int *rcnts, int *displs, MPI_Datatype rtype,
+int MPI_Allgatherv( const void* sbuff, int scnt, MPI_Datatype stype,
+                    void* rbuff, const int *rcnts, const int *displs, MPI_Datatype rtype,
                     MPI_Comm comm )
 {
     char            call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/collchk/src/alltoallw.c
===================================================================
--- src/mpe2/src/collchk/src/alltoallw.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/collchk/src/alltoallw.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -5,9 +5,9 @@
 #include "collchk.h" 
 
 
-int MPI_Alltoallw(void* sbuff, int *scnts, int *sdispls, MPI_Datatype *stypes,
-                  void* rbuff, int *rcnts, int *rdispls, MPI_Datatype *rtypes,
-                  MPI_Comm comm)
+int MPI_Alltoallw(const void* sbuff, const int *scnts, const int *sdispls,
+                  const MPI_Datatype *stypes, void* rbuff, const int *rcnts, const int *rdispls,
+                  const MPI_Datatype *rtypes, MPI_Comm comm)
 {
     int              g2g = 1, r;
     char             call[COLLCHK_SM_STRLEN];
Index: src/mpe2/src/graphics/src/visual_mess.c
===================================================================
--- src/mpe2/src/graphics/src/visual_mess.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/graphics/src/visual_mess.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -322,7 +322,7 @@
 }
 
 int  MPI_Bsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -346,7 +346,7 @@
 }
 
 int  MPI_Bsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -442,7 +442,7 @@
 }
 
 int  MPI_Send_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -478,7 +478,7 @@
 }
 
 int  MPI_Ibsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -543,7 +543,7 @@
 }
 
 int  MPI_Irsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -579,7 +579,7 @@
 }
 
 int  MPI_Isend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -615,7 +615,7 @@
 }
 
 int  MPI_Issend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -676,7 +676,7 @@
 }
 
 int  MPI_Rsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -700,7 +700,7 @@
 }
 
 int  MPI_Rsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -736,7 +736,7 @@
 }
 
 int  MPI_Send( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -760,7 +760,7 @@
 }
 
 int  MPI_Sendrecv( sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 int dest;
@@ -825,7 +825,7 @@
 }
 
 int  MPI_Ssend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -849,7 +849,7 @@
 }
 
 int  MPI_Ssend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
Index: src/mpe2/src/wrappers/src/log_mpi_core.c
===================================================================
--- src/mpe2/src/wrappers/src/log_mpi_core.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/log_mpi_core.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -1544,7 +1544,7 @@
 
 
 int   MPI_Allgather( sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -1583,12 +1583,12 @@
 }
 
 int   MPI_Allgatherv( sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcounts;
-int * displs;
+const int * recvcounts;
+const int * displs;
 MPI_Datatype recvtype;
 MPI_Comm comm;
 {
@@ -1624,7 +1624,7 @@
 }
 
 int   MPI_Allreduce( sendbuf, recvbuf, count, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -1663,7 +1663,7 @@
 }
 
 int  MPI_Alltoall( sendbuf, sendcnt, sendtype, recvbuf, recvcnt, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -1717,13 +1717,13 @@
 }
 
 int   MPI_Alltoallv( sendbuf, sendcnts, sdispls, sendtype, recvbuf, recvcnts, rdispls, recvtype, comm )
-void * sendbuf;
-int * sendcnts;
-int * sdispls;
+const void * sendbuf;
+const int * sendcnts;
+const int * sdispls;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcnts;
-int * rdispls;
+const int * recvcnts;
+const int * rdispls;
 MPI_Datatype recvtype;
 MPI_Comm comm;
 {
@@ -1849,7 +1849,7 @@
 }
 
 int MPI_Gather( sendbuf, sendcnt, sendtype, recvbuf, recvcount, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -1890,12 +1890,12 @@
 }
 
 int MPI_Gatherv( sendbuf, sendcnt, sendtype, recvbuf, recvcnts, displs, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcnts;
-int * displs;
+const int * recvcnts;
+const int * displs;
 MPI_Datatype recvtype;
 int root;
 MPI_Comm comm;
@@ -2003,9 +2003,9 @@
 }
 
 int   MPI_Reduce_scatter( sendbuf, recvbuf, recvcnts, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
-int * recvcnts;
+const int * recvcnts;
 MPI_Datatype datatype;
 MPI_Op op;
 MPI_Comm comm;
@@ -2043,7 +2043,7 @@
 }
 
 int   MPI_Reduce( sendbuf, recvbuf, count, datatype, op, root, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -2083,7 +2083,7 @@
 }
 
 int   MPI_Scan( sendbuf, recvbuf, count, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -2122,7 +2122,7 @@
 }
 
 int   MPI_Scatter( sendbuf, sendcnt, sendtype, recvbuf, recvcnt, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -2165,9 +2165,9 @@
 
 int   MPI_Scatterv( sendbuf, sendcnts, displs, sendtype,
                     recvbuf, recvcnt, recvtype, root, comm )
-void * sendbuf;
-int * sendcnts;
-int * displs;
+const void * sendbuf;
+const int * sendcnts;
+const int * displs;
 MPI_Datatype sendtype;
 void * recvbuf;
 int recvcnt;
@@ -2792,7 +2792,7 @@
 int   MPI_Group_excl( group, n, ranks, newgroup )
 MPI_Group group;
 int n;
-int * ranks;
+const int * ranks;
 MPI_Group * newgroup;
 {
   int   returnVal;
@@ -2863,7 +2863,7 @@
 int   MPI_Group_incl( group, n, ranks, group_out )
 MPI_Group group;
 int n;
-int * ranks;
+const int * ranks;
 MPI_Group * group_out;
 {
   int   returnVal;
@@ -3080,7 +3080,7 @@
 int   MPI_Group_translate_ranks( group_a, n, ranks_a, group_b, ranks_b )
 MPI_Group group_a;
 int n;
-int * ranks_a;
+const int * ranks_a;
 MPI_Group group_b;
 int * ranks_b;
 {
@@ -4008,7 +4008,7 @@
 #endif
 
 int  MPI_Address( location, address )
-void * location;
+const void * location;
 MPI_Aint * address;
 {
   int  returnVal;
@@ -4043,7 +4043,7 @@
 }
 
 int  MPI_Bsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4086,7 +4086,7 @@
 }
 
 int  MPI_Bsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4317,7 +4317,7 @@
 }
 
 int  MPI_Send_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4432,7 +4432,7 @@
 }
 
 int  MPI_Ibsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4572,7 +4572,7 @@
 }
 
 int  MPI_Irsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4614,7 +4614,7 @@
 }
 
 int  MPI_Isend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4660,7 +4660,7 @@
 }
 
 int  MPI_Issend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4706,7 +4706,7 @@
 }
 
 int   MPI_Pack( inbuf, incount, type, outbuf, outcount, position, comm )
-void * inbuf;
+const void * inbuf;
 int incount;
 MPI_Datatype type;
 void * outbuf;
@@ -4898,7 +4898,7 @@
 }
 
 int  MPI_Rsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4941,7 +4941,7 @@
 }
 
 int  MPI_Rsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -4984,7 +4984,7 @@
 }
 
 int  MPI_Send( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -5029,7 +5029,7 @@
 int  MPI_Sendrecv( sendbuf, sendcount, sendtype, dest, sendtag, 
                    recvbuf, recvcount, recvtype, source, recvtag,
                    comm, status )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 int dest;
@@ -5166,7 +5166,7 @@
 }
 
 int  MPI_Ssend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -5208,7 +5208,7 @@
 }
 
 int  MPI_Ssend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -5509,7 +5509,7 @@
 }
 
 int  MPI_Test_cancelled( status, flag )
-MPI_Status * status;
+const MPI_Status * status;
 int * flag;
 {
   int  returnVal;
@@ -5766,8 +5766,8 @@
 
 int  MPI_Type_hindexed( count, blocklens, indices, old_type, newtype )
 int count;
-int * blocklens;
-MPI_Aint * indices;
+const int * blocklens;
+const MPI_Aint * indices;
 MPI_Datatype old_type;
 MPI_Datatype * newtype;
 {
@@ -5843,8 +5843,8 @@
 
 int  MPI_Type_indexed( count, blocklens, indices, old_type, newtype )
 int count;
-int * blocklens;
-int * indices;
+const int * blocklens;
+const int * indices;
 MPI_Datatype old_type;
 MPI_Datatype * newtype;
 {
@@ -5951,9 +5951,9 @@
 
 int  MPI_Type_struct( count, blocklens, indices, old_types, newtype )
 int count;
-int * blocklens;
-MPI_Aint * indices;
-MPI_Datatype * old_types;
+const int * blocklens;
+const MPI_Aint * indices;
+const MPI_Datatype * old_types;
 MPI_Datatype * newtype;
 {
   int  returnVal;
@@ -6061,7 +6061,7 @@
 }
 
 int   MPI_Unpack( inbuf, insize, position, outbuf, outcount, type, comm )
-void * inbuf;
+const void * inbuf;
 int insize;
 int * position;
 void * outbuf;
@@ -6411,8 +6411,8 @@
 int   MPI_Cart_create( comm_old, ndims, dims, periods, reorder, comm_cart )
 MPI_Comm comm_old;
 int ndims;
-int * dims;
-int * periods;
+const int * dims;
+const int * periods;
 int reorder;
 MPI_Comm * comm_cart;
 {
@@ -6492,8 +6492,8 @@
 int   MPI_Cart_map( comm_old, ndims, dims, periods, newrank )
 MPI_Comm comm_old;
 int ndims;
-int * dims;
-int * periods;
+const int * dims;
+const int * periods;
 int * newrank;
 {
   int   returnVal;
@@ -6529,7 +6529,7 @@
 
 int   MPI_Cart_rank( comm, coords, rank )
 MPI_Comm comm;
-int * coords;
+const int * coords;
 int * rank;
 {
   int   returnVal;
@@ -6603,7 +6603,7 @@
 
 int   MPI_Cart_sub( comm, remain_dims, comm_new )
 MPI_Comm comm;
-int * remain_dims;
+const int * remain_dims;
 MPI_Comm * comm_new;
 {
   int   returnVal;
@@ -6714,8 +6714,8 @@
 int   MPI_Graph_create( comm_old, nnodes, index, edges, reorder, comm_graph )
 MPI_Comm comm_old;
 int nnodes;
-int * index;
-int * edges;
+const int * index;
+const int * edges;
 int reorder;
 MPI_Comm * comm_graph;
 {
@@ -6795,8 +6795,8 @@
 int   MPI_Graph_map( comm_old, nnodes, index, edges, newrank )
 MPI_Comm comm_old;
 int nnodes;
-int * index;
-int * edges;
+const int * index;
+const int * edges;
 int * newrank;
 {
   int   returnVal;
Index: src/mpe2/src/wrappers/src/log_mpi_spawn.c
===================================================================
--- src/mpe2/src/wrappers/src/log_mpi_spawn.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/log_mpi_spawn.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -98,7 +98,7 @@
     state->color = "purple";
 }
 
-int MPI_Comm_spawn( char *command, char *argv[], int maxprocs,
+int MPI_Comm_spawn( const char *command, char *argv[], int maxprocs,
                     MPI_Info info, int root, MPI_Comm comm,
                     MPI_Comm *intercomm, int array_of_errcodes[] )
 {
@@ -133,7 +133,7 @@
 }
 
 int MPI_Comm_spawn_multiple( int count, char *array_of_commands[],
-                             char* *array_of_argv[], int array_of_maxprocs[],
+                             char* *array_of_argv[], const int array_of_maxprocs[],
                              MPI_Info array_of_info[], int root, MPI_Comm comm,
                              MPI_Comm *intercomm, int array_of_errcodes[] )
 {
@@ -200,7 +200,7 @@
     return returnVal;
 }
 
-int MPI_Comm_accept( char *port_name, MPI_Info info, int root,
+int MPI_Comm_accept( const char *port_name, MPI_Info info, int root,
                      MPI_Comm comm, MPI_Comm *newcomm )
 {
     int   returnVal;
@@ -232,7 +232,7 @@
     return returnVal;
 }
 
-int MPI_Comm_connect( char *port_name, MPI_Info info, int root,
+int MPI_Comm_connect( const char *port_name, MPI_Info info, int root,
                       MPI_Comm comm, MPI_Comm *newcomm )
 {
     int   returnVal;
@@ -328,7 +328,7 @@
     return returnVal;
 }
 
-int MPI_Comm_set_name( MPI_Comm comm, char *comm_name )
+int MPI_Comm_set_name( MPI_Comm comm, const char *comm_name )
 {
     int   returnVal;
     MPE_LOG_STATE_DECL
@@ -412,7 +412,7 @@
     return returnVal;
 }
 
-int MPI_Close_port( char *port_name )
+int MPI_Close_port( const char *port_name )
 {
     int  returnVal;
     MPE_LOG_STATE_DECL
Index: src/mpe2/src/wrappers/src/log_mpi_rma.c
===================================================================
--- src/mpe2/src/wrappers/src/log_mpi_rma.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/log_mpi_rma.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -122,7 +122,7 @@
   state->color = "maroon";
 }
 
-int MPI_Accumulate( void *origin_addr, int origin_count,
+int MPI_Accumulate( const void *origin_addr, int origin_count,
                     MPI_Datatype origin_datatype, int target_rank,
                     MPI_Aint target_disp, int target_count,
                     MPI_Datatype target_datatype, MPI_Op op, MPI_Win win )
@@ -266,7 +266,7 @@
   return returnVal;
 }
 
-int MPI_Put( void *origin_addr, int origin_count,
+int MPI_Put( const void *origin_addr, int origin_count,
              MPI_Datatype origin_datatype, int target_rank,
              MPI_Aint target_disp, int target_count,
              MPI_Datatype target_datatype, MPI_Win win )
@@ -572,7 +572,7 @@
   return returnVal;
 }
 
-int MPI_Win_set_name( MPI_Win win, char *win_name )
+int MPI_Win_set_name( MPI_Win win, const char *win_name )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
Index: src/mpe2/src/wrappers/src/mpe_prof.c
===================================================================
--- src/mpe2/src/wrappers/src/mpe_prof.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/mpe_prof.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -123,7 +123,7 @@
     MPI_Send - prototyping replacement for MPI_Send
 */
 int MPI_Send( buf, count, datatype, dest, tag, comm )
-void *buf;
+const void *buf;
 int count, dest, tag;
 MPI_Datatype datatype;
 MPI_Comm comm;
@@ -188,7 +188,8 @@
     MPI_Reduce - prototyping replacement for MPI_Reduce
 */
 int MPI_Reduce( sendbuf, recvbuf, count, datatype, op, root, comm )
-void *sendbuf, *recvbuf;
+const void *sendbuf;
+void *recvbuf;
 int count, root;
 MPI_Op op;
 MPI_Datatype datatype;
@@ -208,7 +209,7 @@
    MPI_Allreduce
  */
 int MPI_Allreduce ( sendbuf, recvbuf, count, datatype, op, comm )
-void             *sendbuf;
+const void             *sendbuf;
 void             *recvbuf;
 int               count;
 MPI_Datatype      datatype;
@@ -246,7 +247,7 @@
     MPI_Isend - prototyping replacement for MPI_Isend
 */
 int MPI_Isend( buf, count, datatype, dest, tag, comm, request )
-void *buf;
+const void *buf;
 int count, dest, tag;
 MPI_Datatype datatype;
 MPI_Comm comm;
@@ -345,7 +346,8 @@
 int MPI_Sendrecv( sendbuf, sendcount, sendtype, dest,   sendtag,
 	      recvbuf, recvcount, recvtype, source, recvtag,
 	      comm, status )
-void *sendbuf, *recvbuf;
+const void *sendbuf;
+void *recvbuf;
 int sendcount, dest, sendtag, source, recvtag, recvcount;
 MPI_Datatype sendtype, recvtype;
 MPI_Comm comm;
@@ -385,7 +387,7 @@
     MPI_Ssend - prototyping replacement for MPI_Ssend
 */
 int MPI_Ssend( buf, count, datatype, dest, tag, comm )
-void *buf;
+const void *buf;
 int count, dest, tag;
 MPI_Datatype datatype;
 MPI_Comm comm;
@@ -404,7 +406,7 @@
     MPI_Issend - prototyping replacement for MPI_Issend
 */
 int MPI_Issend( buf, count, datatype, dest, tag, comm, request )
-void *buf;
+const void *buf;
 int count;
 MPI_Datatype datatype;
 int dest;
Index: src/mpe2/src/wrappers/src/trace_mpi_core.c
===================================================================
--- src/mpe2/src/wrappers/src/trace_mpi_core.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/trace_mpi_core.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -31,7 +31,7 @@
 
 
 int   MPI_Allgather( sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -58,12 +58,12 @@
 }
 
 int   MPI_Allgatherv( sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcounts;
-int * displs;
+const int * recvcounts;
+const int * displs;
 MPI_Datatype recvtype;
 MPI_Comm comm;
 {
@@ -86,7 +86,7 @@
 }
 
 int   MPI_Allreduce( sendbuf, recvbuf, count, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -111,7 +111,7 @@
 }
 
 int  MPI_Alltoall( sendbuf, sendcount, sendtype, recvbuf, recvcnt, recvtype, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -138,13 +138,13 @@
 }
 
 int   MPI_Alltoallv( sendbuf, sendcnts, sdispls, sendtype, recvbuf, recvcnts, rdispls, recvtype, comm )
-void * sendbuf;
-int * sendcnts;
-int * sdispls;
+const void * sendbuf;
+const int * sendcnts;
+const int * sdispls;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcnts;
-int * rdispls;
+const int * recvcnts;
+const int * rdispls;
 MPI_Datatype recvtype;
 MPI_Comm comm;
 {
@@ -211,7 +211,7 @@
 }
 
 int   MPI_Gather( sendbuf, sendcnt, sendtype, recvbuf, recvcount, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -239,12 +239,12 @@
 }
 
 int   MPI_Gatherv( sendbuf, sendcnt, sendtype, recvbuf, recvcnts, displs, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
-int * recvcnts;
-int * displs;
+const int * recvcnts;
+const int * displs;
 MPI_Datatype recvtype;
 int root;
 MPI_Comm comm;
@@ -310,9 +310,9 @@
 }
 
 int   MPI_Reduce_scatter( sendbuf, recvbuf, recvcnts, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
-int * recvcnts;
+const int * recvcnts;
 MPI_Datatype datatype;
 MPI_Op op;
 MPI_Comm comm;
@@ -336,7 +336,7 @@
 }
 
 int   MPI_Reduce( sendbuf, recvbuf, count, datatype, op, root, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -362,7 +362,7 @@
 }
 
 int   MPI_Scan( sendbuf, recvbuf, count, datatype, op, comm )
-void * sendbuf;
+const void * sendbuf;
 void * recvbuf;
 int count;
 MPI_Datatype datatype;
@@ -387,7 +387,7 @@
 }
 
 int   MPI_Scatter( sendbuf, sendcnt, sendtype, recvbuf, recvcnt, recvtype, root, comm )
-void * sendbuf;
+const void * sendbuf;
 int sendcnt;
 MPI_Datatype sendtype;
 void * recvbuf;
@@ -415,9 +415,9 @@
 }
 
 int   MPI_Scatterv( sendbuf, sendcnts, displs, sendtype, recvbuf, recvcnt, recvtype, root, comm )
-void * sendbuf;
-int * sendcnts;
-int * displs;
+const void * sendbuf;
+const int * sendcnts;
+const int * displs;
 MPI_Datatype sendtype;
 void * recvbuf;
 int recvcnt;
@@ -790,7 +790,7 @@
 int   MPI_Group_excl( group, n, ranks, newgroup )
 MPI_Group group;
 int n;
-int * ranks;
+const int * ranks;
 MPI_Group * newgroup;
 {
   int   returnVal;
@@ -833,7 +833,7 @@
 int   MPI_Group_incl( group, n, ranks, group_out )
 MPI_Group group;
 int n;
-int * ranks;
+const int * ranks;
 MPI_Group * group_out;
 {
   int   returnVal;
@@ -966,7 +966,7 @@
 int   MPI_Group_translate_ranks( group_a, n, ranks_a, group_b, ranks_b )
 MPI_Group group_a;
 int n;
-int * ranks_a;
+const int * ranks_a;
 MPI_Group group_b;
 int * ranks_b;
 {
@@ -1375,7 +1375,7 @@
 #endif
 
 int  MPI_Address( location, address )
-void * location;
+const void * location;
 MPI_Aint * address;
 {
   int  returnVal;
@@ -1396,7 +1396,7 @@
 }
 
 int  MPI_Bsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1424,7 +1424,7 @@
 }
 
 int  MPI_Bsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1565,7 +1565,7 @@
 }
 
 int  MPI_Send_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1637,7 +1637,7 @@
 }
 
 int  MPI_Ibsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1718,7 +1718,7 @@
 }
 
 int  MPI_Irsend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1746,7 +1746,7 @@
 }
 
 int  MPI_Isend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1775,7 +1775,7 @@
 }
 
 int  MPI_Issend( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1804,7 +1804,7 @@
 }
 
 int   MPI_Pack( inbuf, incount, type, outbuf, outcount, position, comm )
-void * inbuf;
+const void * inbuf;
 int incount;
 MPI_Datatype type;
 void * outbuf;
@@ -1914,7 +1914,7 @@
 }
 
 int  MPI_Rsend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1942,7 +1942,7 @@
 }
 
 int  MPI_Rsend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1971,7 +1971,7 @@
 }
 
 int  MPI_Send( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -1999,7 +1999,7 @@
 }
 
 int  MPI_Sendrecv( sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status )
-void * sendbuf;
+const void * sendbuf;
 int sendcount;
 MPI_Datatype sendtype;
 int dest;
@@ -2065,7 +2065,7 @@
 }
 
 int  MPI_Ssend( buf, count, datatype, dest, tag, comm )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -2093,7 +2093,7 @@
 }
 
 int  MPI_Ssend_init( buf, count, datatype, dest, tag, comm, request )
-void * buf;
+const void * buf;
 int count;
 MPI_Datatype datatype;
 int dest;
@@ -2233,7 +2233,7 @@
 }
 
 int  MPI_Test_cancelled( status, flag )
-MPI_Status * status;
+const MPI_Status * status;
 int * flag;
 {
   int  returnVal;
@@ -2364,8 +2364,8 @@
 
 int  MPI_Type_hindexed( count, blocklens, indices, old_type, newtype )
 int count;
-int * blocklens;
-MPI_Aint * indices;
+const int * blocklens;
+const MPI_Aint * indices;
 MPI_Datatype old_type;
 MPI_Datatype * newtype;
 {
@@ -2413,8 +2413,8 @@
 
 int  MPI_Type_indexed( count, blocklens, indices, old_type, newtype )
 int count;
-int * blocklens;
-int * indices;
+const int * blocklens;
+const int * indices;
 MPI_Datatype old_type;
 MPI_Datatype * newtype;
 {
@@ -2480,9 +2480,9 @@
 
 int  MPI_Type_struct( count, blocklens, indices, old_types, newtype )
 int count;
-int * blocklens;
-MPI_Aint * indices;
-MPI_Datatype * old_types;
+const int * blocklens;
+const MPI_Aint * indices;
+const MPI_Datatype * old_types;
 MPI_Datatype * newtype;
 {
   int  returnVal;
@@ -2549,7 +2549,7 @@
 }
 
 int   MPI_Unpack( inbuf, insize, position, outbuf, outcount, type, comm )
-void * inbuf;
+const void * inbuf;
 int insize;
 int * position;
 void * outbuf;
@@ -2692,8 +2692,8 @@
 int   MPI_Cart_create( comm_old, ndims, dims, periods, reorder, comm_cart )
 MPI_Comm comm_old;
 int ndims;
-int * dims;
-int * periods;
+const int * dims;
+const int * periods;
 int reorder;
 MPI_Comm * comm_cart;
 {
@@ -2742,8 +2742,8 @@
 int   MPI_Cart_map( comm_old, ndims, dims, periods, newrank )
 MPI_Comm comm_old;
 int ndims;
-int * dims;
-int * periods;
+const int * dims;
+const int * periods;
 int * newrank;
 {
   int   returnVal;
@@ -2765,7 +2765,7 @@
 
 int   MPI_Cart_rank( comm, coords, rank )
 MPI_Comm comm;
-int * coords;
+const int * coords;
 int * rank;
 {
   int   returnVal;
@@ -2811,7 +2811,7 @@
 
 int   MPI_Cart_sub( comm, remain_dims, comm_new )
 MPI_Comm comm;
-int * remain_dims;
+const int * remain_dims;
 MPI_Comm * comm_new;
 {
   int   returnVal;
@@ -2877,8 +2877,8 @@
 int   MPI_Graph_create( comm_old, nnodes, index, edges, reorder, comm_graph )
 MPI_Comm comm_old;
 int nnodes;
-int * index;
-int * edges;
+const int * index;
+const int * edges;
 int reorder;
 MPI_Comm * comm_graph;
 {
@@ -2927,8 +2927,8 @@
 int   MPI_Graph_map( comm_old, nnodes, index, edges, newrank )
 MPI_Comm comm_old;
 int nnodes;
-int * index;
-int * edges;
+const int * index;
+const int * edges;
 int * newrank;
 {
   int   returnVal;
Index: src/mpe2/src/wrappers/src/log_mpi_io.c
===================================================================
--- src/mpe2/src/wrappers/src/log_mpi_io.c	(.../trunk)	(revision 4035)
+++ src/mpe2/src/wrappers/src/log_mpi_io.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -333,7 +333,7 @@
 }
 
 
-int MPI_File_open( MPI_Comm  comm,char * filename,int  amode,MPI_Info  info,MPI_File * fh  )
+int MPI_File_open(MPI_Comm comm, const char * filename,int  amode,MPI_Info  info,MPI_File * fh)
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -399,7 +399,7 @@
   return returnVal;
 }
 
-int MPI_File_delete( char * filename,MPI_Info  info  )
+int MPI_File_delete( const char * filename,MPI_Info  info  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -663,7 +663,7 @@
   return returnVal;
 }
 
-int MPI_File_set_view( MPI_File  fh,MPI_Offset  disp,MPI_Datatype  etype,MPI_Datatype  filetype,char * datarep,MPI_Info  info  )
+int MPI_File_set_view( MPI_File  fh,MPI_Offset  disp,MPI_Datatype  etype,MPI_Datatype  filetype, const char * datarep,MPI_Info  info  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -795,7 +795,7 @@
   return returnVal;
 }
 
-int MPI_File_write_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write_at( MPI_File  fh,MPI_Offset  offset, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -828,7 +828,7 @@
   return returnVal;
 }
 
-int MPI_File_write_at_all( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write_at_all( MPI_File  fh,MPI_Offset  offset, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -894,7 +894,7 @@
   return returnVal;
 }
 
-int MPI_File_iwrite_at( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
+int MPI_File_iwrite_at( MPI_File  fh,MPI_Offset  offset, const void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -993,7 +993,7 @@
   return returnVal;
 }
 
-int MPI_File_write( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1026,7 +1026,7 @@
   return returnVal;
 }
 
-int MPI_File_write_all( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write_all( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1092,7 +1092,7 @@
   return returnVal;
 }
 
-int MPI_File_iwrite( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
+int MPI_File_iwrite( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1257,7 +1257,7 @@
   return returnVal;
 }
 
-int MPI_File_write_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write_shared( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1323,7 +1323,7 @@
   return returnVal;
 }
 
-int MPI_File_iwrite_shared( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
+int MPI_File_iwrite_shared( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPIO_Request * request  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1389,7 +1389,7 @@
   return returnVal;
 }
 
-int MPI_File_write_ordered( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
+int MPI_File_write_ordered( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1554,7 +1554,7 @@
   return returnVal;
 }
 
-int MPI_File_write_at_all_begin( MPI_File  fh,MPI_Offset  offset,void * buf,int  count,MPI_Datatype  datatype  )
+int MPI_File_write_at_all_begin( MPI_File  fh,MPI_Offset  offset, const void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1587,7 +1587,7 @@
   return returnVal;
 }
 
-int MPI_File_write_at_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
+int MPI_File_write_at_all_end( MPI_File  fh, const void * buf,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1686,7 +1686,7 @@
   return returnVal;
 }
 
-int MPI_File_write_all_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
+int MPI_File_write_all_begin( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1719,7 +1719,7 @@
   return returnVal;
 }
 
-int MPI_File_write_all_end( MPI_File  fh,void * buf,MPI_Status * status  )
+int MPI_File_write_all_end( MPI_File  fh, const void * buf,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1818,7 +1818,7 @@
   return returnVal;
 }
 
-int MPI_File_write_ordered_begin( MPI_File  fh,void * buf,int  count,MPI_Datatype  datatype  )
+int MPI_File_write_ordered_begin( MPI_File  fh, const void * buf,int  count,MPI_Datatype  datatype  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
@@ -1851,7 +1851,7 @@
   return returnVal;
 }
 
-int MPI_File_write_ordered_end( MPI_File  fh,void * buf,MPI_Status * status  )
+int MPI_File_write_ordered_end( MPI_File  fh, const void * buf,MPI_Status * status  )
 {
   int returnVal;
   MPE_LOG_STATE_DECL
Index: src/mpi/rma/win_set_name.c
===================================================================
--- src/mpi/rma/win_set_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/rma/win_set_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -45,7 +45,7 @@
 .N MPI_ERR_OTHER
 .N MPI_ERR_ARG
 @*/
-int MPI_Win_set_name(MPI_Win win, char *win_name)
+int MPI_Win_set_name(MPI_Win win, const char *win_name)
 {
 #ifdef HAVE_ERROR_CHECKING
     static const char FCNAME[] = "MPI_Win_set_name";
Index: src/mpi/rma/put.c
===================================================================
--- src/mpi/rma/put.c	(.../trunk)	(revision 4035)
+++ src/mpi/rma/put.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,7 +55,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_WIN
 @*/
-int MPI_Put(void *origin_addr, int origin_count, MPI_Datatype
+int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype
             origin_datatype, int target_rank, MPI_Aint target_disp,
             int target_count, MPI_Datatype target_datatype, MPI_Win
             win)
Index: src/mpi/rma/accumulate.c
===================================================================
--- src/mpi/rma/accumulate.c	(.../trunk)	(revision 4035)
+++ src/mpi/rma/accumulate.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -59,7 +59,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_WIN
 @*/
-int MPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype
+int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype
                    origin_datatype, int target_rank, MPI_Aint
                    target_disp, int target_count, MPI_Datatype
                    target_datatype, MPI_Op op, MPI_Win win) 
Index: src/mpi/errhan/add_error_string.c
===================================================================
--- src/mpi/errhan/add_error_string.c	(.../trunk)	(revision 4035)
+++ src/mpi/errhan/add_error_string.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -56,7 +56,7 @@
 .N Errors
 .N MPI_SUCCESS
 @*/
-int MPI_Add_error_string(int errorcode, char *string)
+int MPI_Add_error_string(int errorcode, const char *string)
 {
     static const char FCNAME[] = "MPI_Add_error_string";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/topo/graph_map.c
===================================================================
--- src/mpi/topo/graph_map.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/graph_map.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -67,7 +67,7 @@
 .N MPI_ERR_COMM
 .N MPI_ERR_ARG
 @*/
-int MPI_Graph_map(MPI_Comm comm_old, int nnodes, int *indx, int *edges,
+int MPI_Graph_map(MPI_Comm comm_old, int nnodes, const int *indx, const int *edges,
                   int *newrank)
 {
     static const char FCNAME[] = "MPI_Graph_map";
Index: src/mpi/topo/cart_sub.c
===================================================================
--- src/mpi/topo/cart_sub.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/cart_sub.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -54,7 +54,7 @@
 .N MPI_ERR_COMM
 .N MPI_ERR_ARG
 @*/
-int MPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new)
+int MPI_Cart_sub(MPI_Comm comm, const int *remain_dims, MPI_Comm *comm_new)
 {
     static const char FCNAME[] = "MPI_Cart_sub";
     int mpi_errno = MPI_SUCCESS, all_false;
Index: src/mpi/topo/cart_rank.c
===================================================================
--- src/mpi/topo/cart_rank.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/cart_rank.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 .N MPI_ERR_RANK
 .N MPI_ERR_ARG
 @*/
-int MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank)
+int MPI_Cart_rank(MPI_Comm comm, const int *coords, int *rank)
 {
     static const char FCNAME[] = "MPI_Cart_rank";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/topo/cart_create.c
===================================================================
--- src/mpi/topo/cart_create.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/cart_create.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -221,7 +221,7 @@
 .N MPI_ERR_DIMS
 .N MPI_ERR_ARG
 @*/
-int MPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
+int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int *dims, const int *periods,
 		    int reorder, MPI_Comm *comm_cart)
 {
 #ifdef HAVE_ERROR_CHECKING
Index: src/mpi/topo/graphcreate.c
===================================================================
--- src/mpi/topo/graphcreate.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/graphcreate.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -172,7 +172,7 @@
 .N MPI_ERR_ARG
 
 @*/
-int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *indx, int *edges, 
+int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int *indx, const int *edges, 
 		     int reorder, MPI_Comm *comm_graph)
 {
     static const char FCNAME[] = "MPI_Graph_create";
Index: src/mpi/topo/cart_map.c
===================================================================
--- src/mpi/topo/cart_map.c	(.../trunk)	(revision 4035)
+++ src/mpi/topo/cart_map.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -24,8 +24,8 @@
 #undef MPI_Cart_map
 #define MPI_Cart_map PMPI_Cart_map
 
-int MPIR_Cart_map( const MPID_Comm *comm_ptr, int ndims, const int dims[], 
-		   const int periodic[], int *newrank )
+int MPIR_Cart_map(const MPID_Comm *comm_ptr, int ndims, const int dims[], 
+                  const int periodic[], int * newrank)
 {		   
     int rank, nranks, i, size, mpi_errno;
 
@@ -93,8 +93,8 @@
 .N MPI_ERR_DIMS
 .N MPI_ERR_ARG
 @*/
-int MPI_Cart_map(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
-		 int *newrank)
+int MPI_Cart_map(MPI_Comm comm_old, int ndims, const int *dims, const int *periods, 
+		 int * newrank)
 {
 #ifdef HAVE_ERROR_CHECKING
     static const char FCNAME[] = "MPI_Cart_map";
Index: src/mpi/topo/topo.h
===================================================================
--- src/mpi/topo/topo.h	(.../trunk)	(revision 4035)
+++ src/mpi/topo/topo.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -37,6 +37,6 @@
 		       MPI_Comm *);
 int MPIR_Dims_create( int, int, int * );
 int MPIR_Graph_map( const MPID_Comm *, int, const int[], const int[], int* );
-int MPIR_Cart_map( const MPID_Comm *, int, const int[],  const int[], int* );
+int MPIR_Cart_map(const MPID_Comm *, int, const int[],  const int[], int*);
 
 #define MAX_CART_DIM 16
Index: src/mpi/romio/include/mpio.h.in
===================================================================
--- src/mpi/romio/include/mpio.h.in	(.../trunk)	(revision 4035)
+++ src/mpi/romio/include/mpio.h.in	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -116,9 +116,9 @@
 
 /* Section 9.2 */
 /* Begin Prototypes */
-int MPI_File_open(MPI_Comm, char *, int, MPI_Info, MPI_File *);
+int MPI_File_open(MPI_Comm, const char *, int, MPI_Info, MPI_File *);
 int MPI_File_close(MPI_File *);
-int MPI_File_delete(char *, MPI_Info);
+int MPI_File_delete(const char *, MPI_Info);
 int MPI_File_set_size(MPI_File, MPI_Offset);
 int MPI_File_preallocate(MPI_File, MPI_Offset);
 int MPI_File_get_size(MPI_File, MPI_Offset *);
@@ -129,7 +129,7 @@
 
 /* Section 9.3 */
 int MPI_File_set_view(MPI_File, MPI_Offset, MPI_Datatype,
-	         MPI_Datatype, char *, MPI_Info);
+	         MPI_Datatype, const char *, MPI_Info);
 int MPI_File_get_view(MPI_File, MPI_Offset *, 
                  MPI_Datatype *, MPI_Datatype *, char *);
 
@@ -138,9 +138,9 @@
 	      int, MPI_Datatype, MPI_Status *);
 int MPI_File_read_at_all(MPI_File, MPI_Offset, void *,
 	      int, MPI_Datatype, MPI_Status *);
-int MPI_File_write_at(MPI_File, MPI_Offset, void *,
+int MPI_File_write_at(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPI_Status *);
-int MPI_File_write_at_all(MPI_File, MPI_Offset, void *,
+int MPI_File_write_at_all(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPI_Status *);
 
 /* nonblocking calls currently use MPIO_Request, because generalized
@@ -149,21 +149,21 @@
 
 int MPI_File_iread_at(MPI_File, MPI_Offset, void *,
 	      int, MPI_Datatype, MPIO_Request *);
-int MPI_File_iwrite_at(MPI_File, MPI_Offset, void *,
+int MPI_File_iwrite_at(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPIO_Request *);
 
 /* Section 9.4.3 */
 int MPI_File_read(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
 int MPI_File_read_all(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
-int MPI_File_write(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-int MPI_File_write_all(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+int MPI_File_write(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
+int MPI_File_write_all(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
 
 /* nonblocking calls currently use MPIO_Request, because generalized
    requests not yet implemented. For the same reason, MPIO_Test and 
    MPIO_Wait are used to test and wait on nonblocking I/O requests */ 
 
 int MPI_File_iread(MPI_File, void *, int, MPI_Datatype, MPIO_Request *); 
-int MPI_File_iwrite(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+int MPI_File_iwrite(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
 
 int MPI_File_seek(MPI_File, MPI_Offset, int);
 int MPI_File_get_position(MPI_File, MPI_Offset *);
@@ -171,13 +171,13 @@
 
 /* Section 9.4.4 */
 int MPI_File_read_shared(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-int MPI_File_write_shared(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+int MPI_File_write_shared(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
 int MPI_File_iread_shared(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
-int MPI_File_iwrite_shared(MPI_File, void *, int, 
+int MPI_File_iwrite_shared(MPI_File, const void *, int, 
 			   MPI_Datatype, MPIO_Request *);
 int MPI_File_read_ordered(MPI_File, void *, int, 
                           MPI_Datatype, MPI_Status *);
-int MPI_File_write_ordered(MPI_File, void *, int, 
+int MPI_File_write_ordered(MPI_File, const void *, int, 
                            MPI_Datatype, MPI_Status *);
 int MPI_File_seek_shared(MPI_File, MPI_Offset, int);
 int MPI_File_get_position_shared(MPI_File, MPI_Offset *);
@@ -186,23 +186,23 @@
 int MPI_File_read_at_all_begin(MPI_File, MPI_Offset, void *,
                                int, MPI_Datatype);
 int MPI_File_read_at_all_end(MPI_File, void *, MPI_Status *);
-int MPI_File_write_at_all_begin(MPI_File, MPI_Offset, void *,
+int MPI_File_write_at_all_begin(MPI_File, MPI_Offset, const void *,
                                 int, MPI_Datatype);
-int MPI_File_write_at_all_end(MPI_File, void *, MPI_Status *);
+int MPI_File_write_at_all_end(MPI_File, const void *, MPI_Status *);
 int MPI_File_read_all_begin(MPI_File, void *, int, MPI_Datatype);
 int MPI_File_read_all_end(MPI_File, void *, MPI_Status *);
-int MPI_File_write_all_begin(MPI_File, void *, int, MPI_Datatype);
-int MPI_File_write_all_end(MPI_File, void *, MPI_Status *);
+int MPI_File_write_all_begin(MPI_File, const void *, int, MPI_Datatype);
+int MPI_File_write_all_end(MPI_File, const void *, MPI_Status *);
 int MPI_File_read_ordered_begin(MPI_File, void *, int, MPI_Datatype);
 int MPI_File_read_ordered_end(MPI_File, void *, MPI_Status *);
-int MPI_File_write_ordered_begin(MPI_File, void *, int, MPI_Datatype);
-int MPI_File_write_ordered_end(MPI_File, void *, MPI_Status *);
+int MPI_File_write_ordered_begin(MPI_File, const void *, int, MPI_Datatype);
+int MPI_File_write_ordered_end(MPI_File, const void *, MPI_Status *);
 
 /* Section 9.5.1 */
 int MPI_File_get_type_extent(MPI_File, MPI_Datatype, MPI_Aint *);
 
 /* Section 9.5.3 */
-int MPI_Register_datarep(char *,
+int MPI_Register_datarep(const char *,
 			 MPI_Datarep_conversion_function *,
 			 MPI_Datarep_conversion_function *,
 			 MPI_Datarep_extent_function *,
@@ -223,12 +223,12 @@
 
 #ifndef HAVE_MPI_DARRAY_SUBARRAY
 /* Section 4.14.4 */
-int MPI_Type_create_subarray(int, int *, int *, int *, int, 
-                      MPI_Datatype, MPI_Datatype *);
+int MPI_Type_create_subarray(int, const int [], const int [], const int [], int,
+                    MPI_Datatype, MPI_Datatype *);
 
 /* Section 4.14.5 */
-int MPI_Type_create_darray(int, int, int, 
-                    int *, int *, int *, int *, 
+int MPI_Type_create_darray(int, int, int,
+                    const int [], const int [], const int [], const int [],
                     int, MPI_Datatype, MPI_Datatype *);
 #endif
 
@@ -270,10 +270,10 @@
 #ifndef HAVE_MPI_INFO
 
 int MPI_Info_create(MPI_Info *);
-int MPI_Info_set(MPI_Info, char *, char *);
-int MPI_Info_delete(MPI_Info, char *);
-int MPI_Info_get(MPI_Info, char *, int, char *, int *);
-int MPI_Info_get_valuelen(MPI_Info, char *, int *, int *);
+int MPI_Info_set(MPI_Info, const char *, const char *);
+int MPI_Info_delete(MPI_Info, const char *);
+int MPI_Info_get(MPI_Info, const char *, int, char *, int *);
+int MPI_Info_get_valuelen(MPI_Info, const char *, int *, int *);
 int MPI_Info_get_nkeys(MPI_Info, int *);
 int MPI_Info_get_nthkey(MPI_Info, int, char *);
 int MPI_Info_dup(MPI_Info, MPI_Info *);
@@ -302,9 +302,9 @@
 
 
 /* Section 9.2 */
-int PMPI_File_open(MPI_Comm, char *, int, MPI_Info, MPI_File *);
+int PMPI_File_open(MPI_Comm, const char *, int, MPI_Info, MPI_File *);
 int PMPI_File_close(MPI_File *);
-int PMPI_File_delete(char *, MPI_Info);
+int PMPI_File_delete(const char *, MPI_Info);
 int PMPI_File_set_size(MPI_File, MPI_Offset);
 int PMPI_File_preallocate(MPI_File, MPI_Offset);
 int PMPI_File_get_size(MPI_File, MPI_Offset *);
@@ -314,8 +314,7 @@
 int PMPI_File_get_info(MPI_File, MPI_Info *);
 
 /* Section 9.3 */
-int PMPI_File_set_view(MPI_File, MPI_Offset, 
-    MPI_Datatype, MPI_Datatype, char *, MPI_Info);
+int PMPI_File_set_view(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info);
 int PMPI_File_get_view(MPI_File, MPI_Offset *, 
       MPI_Datatype *, MPI_Datatype *, char *);
 
@@ -324,9 +323,9 @@
 	      int, MPI_Datatype, MPI_Status *);
 int PMPI_File_read_at_all(MPI_File, MPI_Offset, void *,
 	      int, MPI_Datatype, MPI_Status *);
-int PMPI_File_write_at(MPI_File, MPI_Offset, void *,
+int PMPI_File_write_at(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPI_Status *);
-int PMPI_File_write_at_all(MPI_File, MPI_Offset, void *,
+int PMPI_File_write_at_all(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPI_Status *);
 
 /* nonblocking calls currently use MPIO_Request, because generalized
@@ -335,21 +334,21 @@
 
 int PMPI_File_iread_at(MPI_File, MPI_Offset, void *,
 	      int, MPI_Datatype, MPIO_Request *);
-int PMPI_File_iwrite_at(MPI_File, MPI_Offset, void *,
+int PMPI_File_iwrite_at(MPI_File, MPI_Offset, const void *,
 	      int, MPI_Datatype, MPIO_Request *);
 
 /* Section 9.4.3 */
 int PMPI_File_read(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
 int PMPI_File_read_all(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
-int PMPI_File_write(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-int PMPI_File_write_all(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+int PMPI_File_write(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
+int PMPI_File_write_all(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
 
 /* nonblocking calls currently use MPIO_Request, because generalized
    requests not yet implemented. For the same reason, MPIO_Test and 
    MPIO_Wait are used to test and wait on nonblocking I/O requests */ 
 
 int PMPI_File_iread(MPI_File, void *, int, MPI_Datatype, MPIO_Request *); 
-int PMPI_File_iwrite(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+int PMPI_File_iwrite(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
 
 int PMPI_File_seek(MPI_File, MPI_Offset, int);
 int PMPI_File_get_position(MPI_File, MPI_Offset *);
@@ -357,13 +356,13 @@
 
 /* Section 9.4.4 */
 int PMPI_File_read_shared(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-int PMPI_File_write_shared(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+int PMPI_File_write_shared(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
 int PMPI_File_iread_shared(MPI_File, void *, int, 
 			   MPI_Datatype, MPIO_Request *);
-int PMPI_File_iwrite_shared(MPI_File, void *, int, 
+int PMPI_File_iwrite_shared(MPI_File, const void *, int, 
 			    MPI_Datatype, MPIO_Request *);
 int PMPI_File_read_ordered(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-int PMPI_File_write_ordered(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+int PMPI_File_write_ordered(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
 int PMPI_File_seek_shared(MPI_File, MPI_Offset, int);
 int PMPI_File_get_position_shared(MPI_File, MPI_Offset *);
 
@@ -371,27 +370,27 @@
 int PMPI_File_read_at_all_begin(MPI_File, MPI_Offset, void *,
                                int, MPI_Datatype);
 int PMPI_File_read_at_all_end(MPI_File, void *, MPI_Status *);
-int PMPI_File_write_at_all_begin(MPI_File, MPI_Offset, void *,
+int PMPI_File_write_at_all_begin(MPI_File, MPI_Offset, const void *,
                                 int, MPI_Datatype);
-int PMPI_File_write_at_all_end(MPI_File, void *, MPI_Status *);
+int PMPI_File_write_at_all_end(MPI_File, const void *, MPI_Status *);
 int PMPI_File_read_all_begin(MPI_File, void *, int, MPI_Datatype);
 int PMPI_File_read_all_end(MPI_File, void *, MPI_Status *);
-int PMPI_File_write_all_begin(MPI_File, void *, int, MPI_Datatype);
-int PMPI_File_write_all_end(MPI_File, void *, MPI_Status *);
+int PMPI_File_write_all_begin(MPI_File, const void *, int, MPI_Datatype);
+int PMPI_File_write_all_end(MPI_File, const void *, MPI_Status *);
 int PMPI_File_read_ordered_begin(MPI_File, void *, int, MPI_Datatype);
 int PMPI_File_read_ordered_end(MPI_File, void *, MPI_Status *);
-int PMPI_File_write_ordered_begin(MPI_File, void *, int, MPI_Datatype);
-int PMPI_File_write_ordered_end(MPI_File, void *, MPI_Status *);
+int PMPI_File_write_ordered_begin(MPI_File, const void *, int, MPI_Datatype);
+int PMPI_File_write_ordered_end(MPI_File, const void *, MPI_Status *);
 
 /* Section 9.5.1 */
 int PMPI_File_get_type_extent(MPI_File, MPI_Datatype, MPI_Aint *);
 
 /* Section 9.5.3 */
-int PMPI_Register_datarep(char *,
-			 MPI_Datarep_conversion_function *,
-			 MPI_Datarep_conversion_function *,
-			 MPI_Datarep_extent_function *,
-			 void *);
+int PMPI_Register_datarep(const char *,
+                          MPI_Datarep_conversion_function *,
+                          MPI_Datarep_conversion_function *,
+                          MPI_Datarep_extent_function *,
+                          void *);
 
 /* Section 9.6.1 */
 int PMPI_File_set_atomicity(MPI_File, int);
@@ -407,12 +406,12 @@
 
 #ifndef HAVE_MPI_DARRAY_SUBARRAY
 /* Section 4.14.4 */
-int PMPI_Type_create_subarray(int, int *, int *, int *, int, 
-                      MPI_Datatype, MPI_Datatype *);
+int PMPI_Type_create_subarray(int, const int [], const int [], const int [], int,
+                        MPI_Datatype, MPI_Datatype *);
 
 /* Section 4.14.5 */
-int PMPI_Type_create_darray(int, int, int, int *, int *, 
-                    int *, int *, int, MPI_Datatype, MPI_Datatype *);
+int PMPI_Type_create_darray(int, int, int, const int [], const int [],
+                    const int [], const int [], int, MPI_Datatype, MPI_Datatype *);
 #endif
 
 /* Section 4.12.4 */
@@ -439,10 +438,10 @@
 #ifndef HAVE_MPI_INFO
 
 int PMPI_Info_create(MPI_Info *);
-int PMPI_Info_set(MPI_Info, char *, char *);
-int PMPI_Info_delete(MPI_Info, char *);
-int PMPI_Info_get(MPI_Info, char *, int, char *, int *);
-int PMPI_Info_get_valuelen(MPI_Info, char *, int *, int *);
+int PMPI_Info_set(MPI_Info, const char *, const char *);
+int PMPI_Info_delete(MPI_Info, const char *);
+int PMPI_Info_get(MPI_Info, const char *, int, char *, int *);
+int PMPI_Info_get_valuelen(MPI_Info, const char *, int *, int *);
 int PMPI_Info_get_nkeys(MPI_Info, int *);
 int PMPI_Info_get_nthkey(MPI_Info, int, char *);
 int PMPI_Info_dup(MPI_Info, MPI_Info *);
Index: src/mpi/romio/mpi2-other/info/info_set.c
===================================================================
--- src/mpi/romio/mpi2-other/info/info_set.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi2-other/info/info_set.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -33,7 +33,7 @@
 
 .N fortran
 @*/
-int MPI_Info_set(MPI_Info info, char *key, char *value)
+int MPI_Info_set(MPI_Info info, const char *key, const char *value)
 {
     MPI_Info prev, curr;
 
Index: src/mpi/romio/mpi2-other/info/info_get.c
===================================================================
--- src/mpi/romio/mpi2-other/info/info_get.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi2-other/info/info_get.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -37,7 +37,7 @@
 
 .N fortran
 @*/
-int MPI_Info_get(MPI_Info info, char *key, int valuelen, char *value, int *flag)
+int MPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag)
 {
     MPI_Info curr;
 
Index: src/mpi/romio/mpi2-other/info/info_getvln.c
===================================================================
--- src/mpi/romio/mpi2-other/info/info_getvln.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi2-other/info/info_getvln.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -36,7 +36,7 @@
 
 .N fortran
 @*/
-int MPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, int *flag)
+int MPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag)
 {
     MPI_Info curr;
 
Index: src/mpi/romio/mpi2-other/info/info_delete.c
===================================================================
--- src/mpi/romio/mpi2-other/info/info_delete.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi2-other/info/info_delete.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,7 +32,7 @@
 
 .N fortran
 @*/
-int MPI_Info_delete(MPI_Info info, char *key)
+int MPI_Info_delete(MPI_Info info, const char *key)
 {
     MPI_Info prev, curr;
     int done;
Index: src/mpi/romio/mpi-io/write_ord.c
===================================================================
--- src/mpi/romio/mpi-io/write_ord.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_ord.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -39,7 +39,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_ordered(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_ordered(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPI_Status *status)
 {
     int error_code, datatype_size, nprocs, myrank, incr;
Index: src/mpi/romio/mpi-io/iwrite.c
===================================================================
--- src/mpi/romio/mpi-io/iwrite.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/iwrite.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -41,7 +41,7 @@
 #include "mpiu_greq.h"
 #endif
 
-int MPI_File_iwrite(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_iwrite(MPI_File mpi_fh, const void *buf, int count, 
 		    MPI_Datatype datatype, MPI_Request *request)
 {
     int error_code=MPI_SUCCESS;
@@ -78,7 +78,7 @@
 int MPIOI_File_iwrite(MPI_File mpi_fh,
 		      MPI_Offset offset,
 		      int file_ptr_type,
-		      void *buf,
+		      const void *buf,
 		      int count,
 		      MPI_Datatype datatype,
 		      char *myname,
Index: src/mpi/romio/mpi-io/write_orde.c
===================================================================
--- src/mpi/romio/mpi-io/write_orde.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_orde.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -35,7 +35,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_ordered_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_ordered_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     int error_code;
     static char myname[] = "MPI_FILE_WRITE_ORDERED_END";
Index: src/mpi/romio/mpi-io/wr_atallb.c
===================================================================
--- src/mpi/romio/mpi-io/wr_atallb.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/wr_atallb.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -36,7 +36,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
 				int count, MPI_Datatype datatype)
 {
     int error_code;
Index: src/mpi/romio/mpi-io/register_datarep.c
===================================================================
--- src/mpi/romio/mpi-io/register_datarep.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/register_datarep.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -48,7 +48,7 @@
 .N fortran
   
   @*/
-int MPI_Register_datarep(char *name,
+int MPI_Register_datarep(const char *name,
 			 MPI_Datarep_conversion_function *read_conv_fn,
 			 MPI_Datarep_conversion_function *write_conv_fn,
 			 MPI_Datarep_extent_function *extent_fn,
Index: src/mpi/romio/mpi-io/iwrite_at.c
===================================================================
--- src/mpi/romio/mpi-io/iwrite_at.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/iwrite_at.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -42,7 +42,7 @@
 #include "mpiu_greq.h"
 #endif
 
-int MPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                        int count, MPI_Datatype datatype, 
                        MPIO_Request *request)
 {
Index: src/mpi/romio/mpi-io/write_all.c
===================================================================
--- src/mpi/romio/mpi-io/write_all.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_all.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -39,7 +39,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_all(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_all(MPI_File mpi_fh, const void *buf, int count, 
                        MPI_Datatype datatype, MPI_Status *status)
 {
     int error_code;
@@ -66,7 +66,7 @@
 int MPIOI_File_write_all(MPI_File mpi_fh,
 			 MPI_Offset offset,
 			 int file_ptr_type,
-			 void *buf,
+			 const void *buf,
 			 int count,
 			 MPI_Datatype datatype,
 			 char *myname,
Index: src/mpi/romio/mpi-io/write_sh.c
===================================================================
--- src/mpi/romio/mpi-io/write_sh.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_sh.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -39,7 +39,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_shared(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_shared(MPI_File mpi_fh, const void *buf, int count, 
                           MPI_Datatype datatype, MPI_Status *status)
 {
     int error_code, bufsize, buftype_is_contig, filetype_is_contig;
Index: src/mpi/romio/mpi-io/set_view.c
===================================================================
--- src/mpi/romio/mpi-io/set_view.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/set_view.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -37,7 +37,7 @@
 .N fortran
 @*/
 int MPI_File_set_view(MPI_File mpi_fh, MPI_Offset disp, MPI_Datatype etype,
-		      MPI_Datatype filetype, char *datarep, MPI_Info info)
+		      const MPI_Datatype filetype, const char *datarep, MPI_Info info)
 {
     int filetype_size, etype_size, error_code;
     static char myname[] = "MPI_FILE_SET_VIEW";
Index: src/mpi/romio/mpi-io/write_alle.c
===================================================================
--- src/mpi/romio/mpi-io/write_alle.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_alle.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -35,7 +35,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     int error_code;
     static char myname[] = "MPI_FILE_WRITE_ALL_END";
@@ -48,7 +48,7 @@
 /* prevent multiple definitions of this routine */
 #ifdef MPIO_BUILD_PROFILING
 int MPIOI_File_write_all_end(MPI_File mpi_fh,
-			     void *buf,
+			     const void *buf,
 			     char *myname,
 			     MPI_Status *status)
 {
Index: src/mpi/romio/mpi-io/write.c
===================================================================
--- src/mpi/romio/mpi-io/write.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -38,7 +38,7 @@
 
 .N fortran
 @*/
-int MPI_File_write(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write(MPI_File mpi_fh, const void *buf, int count, 
                    MPI_Datatype datatype, MPI_Status *status)
 {
     int error_code;
@@ -64,7 +64,7 @@
 int MPIOI_File_write(MPI_File mpi_fh,
 		     MPI_Offset offset,
 		     int file_ptr_type,
-		     void *buf,
+		     const void *buf,
 		     int count,
 		     MPI_Datatype datatype,
 		     char *myname,
Index: src/mpi/romio/mpi-io/write_ordb.c
===================================================================
--- src/mpi/romio/mpi-io/write_ordb.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_ordb.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -36,7 +36,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_ordered_begin(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_ordered_begin(MPI_File mpi_fh, const void *buf, int count, 
 				 MPI_Datatype datatype)
 {
     int error_code, datatype_size, nprocs, myrank, incr;
Index: src/mpi/romio/mpi-io/open.c
===================================================================
--- src/mpi/romio/mpi-io/open.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/open.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -39,7 +39,7 @@
 
 .N fortran
 @*/
-int MPI_File_open(MPI_Comm comm, char *filename, int amode, 
+int MPI_File_open(MPI_Comm comm, const char *filename, int amode, 
                   MPI_Info info, MPI_File *fh)
 {
     int error_code, file_system, flag, /* tmp_amode, */rank;
Index: src/mpi/romio/mpi-io/delete.c
===================================================================
--- src/mpi/romio/mpi-io/delete.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/delete.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,7 +32,7 @@
 
 .N fortran
 @*/
-int MPI_File_delete(char *filename, MPI_Info info)
+int MPI_File_delete(const char *filename, MPI_Info info)
 {
     int error_code, file_system;
     char *tmp;
Index: src/mpi/romio/mpi-io/write_atall.c
===================================================================
--- src/mpi/romio/mpi-io/write_atall.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_atall.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -40,7 +40,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                           int count, MPI_Datatype datatype, 
                           MPI_Status *status)
 {
Index: src/mpi/romio/mpi-io/wr_atalle.c
===================================================================
--- src/mpi/romio/mpi-io/wr_atalle.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/wr_atalle.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -35,7 +35,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_at_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_at_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     int error_code;
     static char myname[] = "MPI_FILE_WRITE_AT_ALL_END";
Index: src/mpi/romio/mpi-io/iwrite_sh.c
===================================================================
--- src/mpi/romio/mpi-io/iwrite_sh.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/iwrite_sh.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -41,7 +41,7 @@
 #include "mpiu_greq.h"
 #endif
 
-int MPI_File_iwrite_shared(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_iwrite_shared(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPIO_Request *request)
 {
     int error_code, bufsize, buftype_is_contig, filetype_is_contig;
Index: src/mpi/romio/mpi-io/write_at.c
===================================================================
--- src/mpi/romio/mpi-io/write_at.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_at.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -39,7 +39,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                       int count, MPI_Datatype datatype, 
                       MPI_Status *status)
 {
Index: src/mpi/romio/mpi-io/write_allb.c
===================================================================
--- src/mpi/romio/mpi-io/write_allb.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/mpi-io/write_allb.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -35,7 +35,7 @@
 
 .N fortran
 @*/
-int MPI_File_write_all_begin(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_all_begin(MPI_File mpi_fh, const void *buf, int count, 
 			     MPI_Datatype datatype)
 {
     int error_code;
@@ -53,7 +53,7 @@
 int MPIOI_File_write_all_begin(MPI_File mpi_fh,
 			       MPI_Offset offset,
 			       int file_ptr_type,
-			       void *buf,
+			       const void *buf,
 			       int count,
 			       MPI_Datatype datatype,
 			       char *myname)
Index: src/mpi/romio/adio/include/adio.h
===================================================================
--- src/mpi/romio/adio/include/adio.h	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/include/adio.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -328,7 +328,7 @@
 
 void ADIO_Init(int *argc, char ***argv, int *error_code);
 void ADIO_End(int *error_code);
-MPI_File ADIO_Open(MPI_Comm orig_comm, MPI_Comm comm, char *filename, 
+MPI_File ADIO_Open(MPI_Comm orig_comm, MPI_Comm comm, const char *filename, 
 		   int file_system, ADIOI_Fns *ops,
 		   int access_mode, ADIO_Offset disp, MPI_Datatype etype, 
 		   MPI_Datatype filetype, 
@@ -339,11 +339,11 @@
 void ADIO_ReadContig(ADIO_File fd, void *buf, int count, MPI_Datatype datatype,
                     int file_ptr_type,  ADIO_Offset offset, 
                     ADIO_Status *status, int *error_code);
-void ADIO_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIO_WriteContig(ADIO_File fd, const void *buf, int count, 
                      MPI_Datatype datatype, int file_ptr_type,
                       ADIO_Offset offset, int *bytes_written, int
 		      *error_code);
-void ADIO_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIO_IwriteContig(ADIO_File fd, const void *buf, int count, 
                       MPI_Datatype datatype, int file_ptr_type,
                       ADIO_Offset offset, ADIO_Request *request, int
 		      *error_code);   
@@ -369,7 +369,7 @@
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Status *status, int
 		       *error_code);
-void ADIO_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIO_WriteStrided(ADIO_File fd, const void *buf, int count,
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Status *status, int
 		       *error_code);
@@ -377,7 +377,7 @@
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Status *status, int
 		       *error_code);
-void ADIO_WriteStridedColl(ADIO_File fd, void *buf, int count,
+void ADIO_WriteStridedColl(ADIO_File fd, const void *buf, int count,
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Status *status, int
 		       *error_code);
@@ -385,17 +385,17 @@
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Request *request, int
 		       *error_code);
-void ADIO_IwriteStrided(ADIO_File fd, void *buf, int count,
+void ADIO_IwriteStrided(ADIO_File fd, const void *buf, int count,
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Request *request, int
 		       *error_code);
 ADIO_Offset ADIO_SeekIndividual(ADIO_File fd, ADIO_Offset offset, 
                        int whence, int *error_code);
-void ADIO_Delete(char *filename, int *error_code);
+void ADIO_Delete(const char *filename, int *error_code);
 void ADIO_Flush(ADIO_File fd, int *error_code);
 void ADIO_Resize(ADIO_File fd, ADIO_Offset size, int *error_code);
 void ADIO_SetInfo(ADIO_File fd, MPI_Info users_info, int *error_code);
-void ADIO_ResolveFileType(MPI_Comm comm, char *filename, int *fstype, 
+void ADIO_ResolveFileType(MPI_Comm comm, const char *filename, int *fstype, 
           ADIOI_Fns **ops, int *error_code);
 void ADIO_Get_shared_fp(ADIO_File fd, int size, ADIO_Offset *shared_fp, 
 			 int *error_code);
Index: src/mpi/romio/adio/include/adioi.h
===================================================================
--- src/mpi/romio/adio/include/adioi.h	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/include/adioi.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -142,13 +142,13 @@
     void (*ADIOI_xxx_ReadContig) (ADIO_File fd, void *buf, int count, 
                    MPI_Datatype datatype, int file_ptr_type, 
                    ADIO_Offset offset, ADIO_Status *status, int *error_code);
-    void (*ADIOI_xxx_WriteContig) (ADIO_File fd, void *buf, int count, 
+    void (*ADIOI_xxx_WriteContig) (ADIO_File fd, const void *buf, int count, 
                    MPI_Datatype datatype, int file_ptr_type, 
                    ADIO_Offset offset, ADIO_Status *status, int *error_code);  
     void (*ADIOI_xxx_ReadStridedColl) (ADIO_File fd, void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Status *status, int *error_code);
-    void (*ADIOI_xxx_WriteStridedColl) (ADIO_File fd, void *buf, int count,
+    void (*ADIOI_xxx_WriteStridedColl) (ADIO_File fd, const void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Status *status, int *error_code);
     ADIO_Offset (*ADIOI_xxx_SeekIndividual) (ADIO_File fd, ADIO_Offset offset, 
@@ -160,14 +160,14 @@
     void (*ADIOI_xxx_ReadStrided) (ADIO_File fd, void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Status *status, int *error_code);
-    void (*ADIOI_xxx_WriteStrided) (ADIO_File fd, void *buf, int count,
+    void (*ADIOI_xxx_WriteStrided) (ADIO_File fd, const void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Status *status, int *error_code);
     void (*ADIOI_xxx_Close) (ADIO_File fd, int *error_code);
     void (*ADIOI_xxx_IreadContig) (ADIO_File fd, void *buf, int count, 
                    MPI_Datatype datatype, int file_ptr_type, 
                    ADIO_Offset offset, ADIO_Request *request, int *error_code);
-    void (*ADIOI_xxx_IwriteContig) (ADIO_File fd, void *buf, int count, 
+    void (*ADIOI_xxx_IwriteContig) (ADIO_File fd, const void *buf, int count, 
                    MPI_Datatype datatype, int file_ptr_type, 
 	           ADIO_Offset offset, ADIO_Request *request, int *error_code);
     int (*ADIOI_xxx_ReadDone) (ADIO_Request *request, ADIO_Status *status, 
@@ -181,12 +181,12 @@
     void (*ADIOI_xxx_IreadStrided) (ADIO_File fd, void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Request *request, int *error_code);
-    void (*ADIOI_xxx_IwriteStrided) (ADIO_File fd, void *buf, int count,
+    void (*ADIOI_xxx_IwriteStrided) (ADIO_File fd, const void *buf, int count,
 	       MPI_Datatype datatype, int file_ptr_type,
 	       ADIO_Offset offset, ADIO_Request *request, int *error_code);
     void (*ADIOI_xxx_Flush) (ADIO_File fd, int *error_code); 
     void (*ADIOI_xxx_Resize) (ADIO_File fd, ADIO_Offset size, int *error_code);
-    void (*ADIOI_xxx_Delete) (char *filename, int *error_code);
+    void (*ADIOI_xxx_Delete) (const char *filename, int *error_code);
     int  (*ADIOI_xxx_Feature) (ADIO_File fd, int flag);
 };
 
@@ -344,7 +344,7 @@
 		int access_mode, int *error_code);
 void ADIOI_FAILSAFE_OpenColl(ADIO_File fd, int rank, 
 		int access_mode, int *error_code);
-void ADIOI_GEN_Delete(char *filename, int *error_code);
+void ADIOI_GEN_Delete(const char *filename, int *error_code);
 void ADIOI_GEN_ReadContig(ADIO_File fd, void *buf, int count, 
 			  MPI_Datatype datatype, int file_ptr_type,
 			  ADIO_Offset offset, ADIO_Status *status,
@@ -355,11 +355,11 @@
 			   MPI_Datatype datatype, int file_ptr_type,
 			   ADIO_Offset offset, ADIO_Request *request,
 			   int *error_code);
-void ADIOI_GEN_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_GEN_WriteContig(ADIO_File fd, const void *buf, int count, 
 			   MPI_Datatype datatype, int file_ptr_type,
 			   ADIO_Offset offset, ADIO_Status *status,
 			   int *error_code);
-void ADIOI_GEN_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_GEN_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request,
 			    int *error_code);
@@ -371,7 +371,7 @@
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request, int
 			    *error_code);
-void ADIOI_GEN_IwriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_IwriteStrided(ADIO_File fd, const void *buf, int count,
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, ADIO_Request *request, int
 			     *error_code);
@@ -390,15 +390,15 @@
                        MPI_Datatype buftype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
-void ADIOI_GEN_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStrided(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
-void ADIOI_GEN_WriteStrided_naive(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStrided_naive(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
-void ADIOI_NOLOCK_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_NOLOCK_WriteStrided(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
@@ -406,7 +406,7 @@
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
-void ADIOI_GEN_WriteStridedColl(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStridedColl(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code);
@@ -572,11 +572,11 @@
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request,
                              int *error_code);
-void ADIOI_FAKE_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_FAKE_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request,
                              int *error_code);  
-void ADIOI_FAKE_IwriteStrided(ADIO_File fd, void *buf, int count, 
+void ADIOI_FAKE_IwriteStrided(ADIO_File fd, const void *buf, int count, 
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, ADIO_Request *request,
                               int *error_code);
@@ -596,7 +596,7 @@
 int MPIOI_File_write(MPI_File fh,
 		     MPI_Offset offset,
 		     int file_ptr_type,
-		     void *buf,
+		     const void *buf,
 		     int count,
 		     MPI_Datatype datatype,
 		     char *myname,
@@ -612,7 +612,7 @@
 int MPIOI_File_write_all(MPI_File fh,
 			 MPI_Offset offset,
 			 int file_ptr_type,
-			 void *buf,
+			 const void *buf,
 			 int count,
 			 MPI_Datatype datatype,
 			 char *myname,
@@ -627,7 +627,7 @@
 int MPIOI_File_write_all_begin(MPI_File fh,
 			       MPI_Offset offset,
 			       int file_ptr_type,
-			       void *buf,
+			       const void *buf,
 			       int count,
 			       MPI_Datatype datatype,
 			       char *myname);
@@ -636,13 +636,13 @@
 			    char *myname,
 			    MPI_Status *status);
 int MPIOI_File_write_all_end(MPI_File fh,
-			     void *buf,
+			     const void *buf,
 			     char *myname,
 			     MPI_Status *status);
 int MPIOI_File_iwrite(MPI_File fh,
 		      MPI_Offset offset,
 		      int file_ptr_type,
-		      void *buf,
+		      const void *buf,
 		      int count,
 		      MPI_Datatype datatype,
 		      char *myname,
Index: src/mpi/romio/adio/common/ad_write_nolock.c
===================================================================
--- src/mpi/romio/adio/common/ad_write_nolock.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_write_nolock.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -12,7 +12,7 @@
 
 
 /* #define IO_DEBUG 1 */
-void ADIOI_NOLOCK_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_NOLOCK_WriteStrided(ADIO_File fd, const void *buf, int count,
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, ADIO_Status *status, int
 			     *error_code)
Index: src/mpi/romio/adio/common/ad_fstype.c
===================================================================
--- src/mpi/romio/adio/common/ad_fstype.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_fstype.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -106,12 +106,12 @@
     defined(ROMIO_HAVE_STRUCT_STAT_WITH_ST_FSTYPE) 
 #ifndef ROMIO_NTFS
 #define ROMIO_NEEDS_ADIOPARENTDIR
-static void ADIO_FileSysType_parentdir(char *filename, char **dirnamep);
+static void ADIO_FileSysType_parentdir(const char *filename, char **dirnamep);
 #endif
 #endif 
-static void ADIO_FileSysType_prefix(char *filename, int *fstype, 
+static void ADIO_FileSysType_prefix(const char *filename, int *fstype, 
 				    int *error_code);
-static void ADIO_FileSysType_fncall(char *filename, int *fstype, 
+static void ADIO_FileSysType_fncall(const char *filename, int *fstype, 
 				    int *error_code);
 
 /*
@@ -152,7 +152,7 @@
  * Returns pointer to string in dirnamep; that string is allocated with
  * strdup and must be free()'d.
  */
-static void ADIO_FileSysType_parentdir(char *filename, char **dirnamep)
+static void ADIO_FileSysType_parentdir(const char *filename, char **dirnamep)
 {
     int err;
     char *dir = NULL, *slash;
@@ -232,7 +232,7 @@
  file system type.  Most other functions use the type which is stored when the 
  file is opened.
  */
-static void ADIO_FileSysType_fncall(char *filename, int *fstype, int *error_code)
+static void ADIO_FileSysType_fncall(const char *filename, int *fstype, int *error_code)
 {
 #ifndef ROMIO_NTFS
     char *dir;
@@ -448,7 +448,8 @@
  * stat system calls (unless a fs prefix is given).  Cary out this file system
  * detection in a more scalable way by having rank 0 stat the file and broadcast the result (fs type and error code) to the other mpi processes */
 
-static void ADIO_FileSysType_fncall_scalable(MPI_Comm comm, char *filename, int * file_system, int * error_code)
+static void ADIO_FileSysType_fncall_scalable(MPI_Comm comm, const char *filename,
+                                             int * file_system, int * error_code)
 {
     int rank;
     int buf[2];
@@ -482,7 +483,7 @@
   is considered an error. Except for on Windows systems where the default is NTFS.
 
  */
-static void ADIO_FileSysType_prefix(char *filename, int *fstype, int *error_code)
+static void ADIO_FileSysType_prefix(const char *filename, int *fstype, int *error_code)
 {
     static char myname[] = "ADIO_RESOLVEFILETYPE_PREFIX";
     *error_code = MPI_SUCCESS;
@@ -576,7 +577,7 @@
 for this fs type" code from the MPI layer and also to introduce the ADIOI_Fns
 tables in a reasonable way. -- Rob, 06/06/2001
 @*/
-void ADIO_ResolveFileType(MPI_Comm comm, char *filename, int *fstype, 
+void ADIO_ResolveFileType(MPI_Comm comm, const char *filename, int *fstype, 
 			  ADIOI_Fns **ops, int *error_code)
 {
     int myerrcode, file_system, min_code, max_code;
Index: src/mpi/romio/adio/common/ad_write.c
===================================================================
--- src/mpi/romio/adio/common/ad_write.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_write.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -14,7 +14,7 @@
 #include "mpe.h"
 #endif
 
-void ADIOI_GEN_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_GEN_WriteContig(ADIO_File fd, const void *buf, int count, 
 			   MPI_Datatype datatype, int file_ptr_type,
 			   ADIO_Offset offset, ADIO_Status *status,
 			   int *error_code)
Index: src/mpi/romio/adio/common/ad_open.c
===================================================================
--- src/mpi/romio/adio/common/ad_open.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_open.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -19,7 +19,7 @@
 	int rank, int procs, int *error_code);
 
 MPI_File ADIO_Open(MPI_Comm orig_comm,
-		   MPI_Comm comm, char *filename, int file_system,
+		   MPI_Comm comm, const char *filename, int file_system,
 		   ADIOI_Fns *ops,
 		   int access_mode, ADIO_Offset disp, MPI_Datatype etype, 
 		   MPI_Datatype filetype,
Index: src/mpi/romio/adio/common/ad_delete.c
===================================================================
--- src/mpi/romio/adio/common/ad_delete.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_delete.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -11,7 +11,7 @@
 #include <unistd.h>
 #endif
 
-void ADIOI_GEN_Delete(char *filename, int *error_code)
+void ADIOI_GEN_Delete(const char *filename, int *error_code)
 {
     int err;
     static char myname[] = "ADIOI_GEN_DELETE";
Index: src/mpi/romio/adio/common/ad_iwrite.c
===================================================================
--- src/mpi/romio/adio/common/ad_iwrite.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_iwrite.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -44,7 +44,7 @@
  * routines.  Otherwise, the ADIOI_Fns_struct will point to the FAKE
  * version.
  */
-void ADIOI_GEN_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_GEN_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request,
 			    int *error_code)  
@@ -58,7 +58,7 @@
     ADIOI_Assert(len == (int)((ADIO_Offset)count * (ADIO_Offset)typesize)); /* the count is an int parm */
 
     if (file_ptr_type == ADIO_INDIVIDUAL) offset = fd->fp_ind;
-    aio_errno = ADIOI_GEN_aio(fd, buf, len, offset, 1, request);
+    aio_errno = ADIOI_GEN_aio(fd, (void *) buf, len, offset, 1, request);
     if (file_ptr_type == ADIO_INDIVIDUAL) fd->fp_ind += len;
 
     fd->fp_sys_posn = -1;
@@ -133,7 +133,7 @@
 	    /* exceeded the max. no. of outstanding requests.
 	    treat this as a blocking request and return.  */
 	    if (wr) 
-		ADIO_WriteContig(fd, buf, len, MPI_BYTE, 
+		ADIO_WriteContig(fd, (const void *) buf, len, MPI_BYTE, 
 			    ADIO_EXPLICIT_OFFSET, offset, NULL, &error_code);  
 	    else
 		ADIO_ReadContig(fd, buf, len, MPI_BYTE,
@@ -162,7 +162,7 @@
 /* Generic implementation of IwriteStrided calls the blocking WriteStrided
  * immediately.
  */
-void ADIOI_GEN_IwriteStrided(ADIO_File fd, void *buf, int count, 
+void ADIOI_GEN_IwriteStrided(ADIO_File fd, const void *buf, int count, 
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, MPI_Request *request,
 			     int *error_code)
Index: src/mpi/romio/adio/common/ad_write_coll.c
===================================================================
--- src/mpi/romio/adio/common/ad_write_coll.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_write_coll.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -13,7 +13,7 @@
 #endif
 
 /* prototypes of functions used for collective writes only. */
-static void ADIOI_Exch_and_write(ADIO_File fd, void *buf, MPI_Datatype
+static void ADIOI_Exch_and_write(ADIO_File fd, const void *buf, MPI_Datatype
                          datatype, int nprocs, int myrank,
 			 ADIOI_Access
                          *others_req, ADIO_Offset *offset_list,
@@ -21,7 +21,7 @@
                          min_st_offset, ADIO_Offset fd_size,
                          ADIO_Offset *fd_start, ADIO_Offset *fd_end,
                          int *buf_idx, int *error_code);
-static void ADIOI_W_Exchange_data(ADIO_File fd, void *buf, char *write_buf,
+static void ADIOI_W_Exchange_data(ADIO_File fd, const void *buf, char *write_buf,
                          ADIOI_Flatlist_node *flat_buf, ADIO_Offset 
                          *offset_list, ADIO_Offset *len_list, int *send_size, 
                          int *recv_size, ADIO_Offset off, int size,
@@ -35,7 +35,7 @@
                          int *send_buf_idx, int *curr_to_proc,
                          int *done_to_proc, int *hole, int iter, 
                          MPI_Aint buftype_extent, int *buf_idx, int *error_code);
-static void ADIOI_Fill_send_buffer(ADIO_File fd, void *buf, ADIOI_Flatlist_node
+static void ADIOI_Fill_send_buffer(ADIO_File fd, const void *buf, ADIOI_Flatlist_node
                            *flat_buf, char **send_buf, ADIO_Offset 
                            *offset_list, ADIO_Offset *len_list, int *send_size, 
                            MPI_Request *requests, int *sent_to_proc, 
@@ -51,7 +51,7 @@
                       int nprocs, int nprocs_recv, int total_elements);
 
 
-void ADIOI_GEN_WriteStridedColl(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStridedColl(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code)
@@ -81,7 +81,7 @@
     int old_error, tmp_error;
 
     if (fd->hints->cb_pfr != ADIOI_HINT_DISABLE) { 
-	ADIOI_IOStridedColl (fd, buf, count, ADIOI_WRITE, datatype, 
+	ADIOI_IOStridedColl (fd, (void *) buf, count, ADIOI_WRITE, datatype, 
 			file_ptr_type, offset, status, error_code);
 	return;
     }
@@ -289,7 +289,7 @@
 /* If successful, error_code is set to MPI_SUCCESS.  Otherwise an error
  * code is created and returned in error_code.
  */
-static void ADIOI_Exch_and_write(ADIO_File fd, void *buf, MPI_Datatype
+static void ADIOI_Exch_and_write(ADIO_File fd, const void *buf, MPI_Datatype
 				 datatype, int nprocs, 
 				 int myrank,
 				 ADIOI_Access
@@ -557,7 +557,7 @@
 /* Sets error_code to MPI_SUCCESS if successful, or creates an error code
  * in the case of error.
  */
-static void ADIOI_W_Exchange_data(ADIO_File fd, void *buf, char *write_buf,
+static void ADIOI_W_Exchange_data(ADIO_File fd, const void *buf, char *write_buf,
 				  ADIOI_Flatlist_node *flat_buf, ADIO_Offset 
 				  *offset_list, ADIO_Offset *len_list, int *send_size, 
 				  int *recv_size, ADIO_Offset off, int size,
@@ -851,7 +851,7 @@
 
 
 
-static void ADIOI_Fill_send_buffer(ADIO_File fd, void *buf, ADIOI_Flatlist_node
+static void ADIOI_Fill_send_buffer(ADIO_File fd, const void *buf, ADIOI_Flatlist_node
                            *flat_buf, char **send_buf, ADIO_Offset 
                            *offset_list, ADIO_Offset *len_list, int *send_size, 
                            MPI_Request *requests, int *sent_to_proc, 
Index: src/mpi/romio/adio/common/ad_write_str_naive.c
===================================================================
--- src/mpi/romio/adio/common/ad_write_str_naive.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_write_str_naive.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -8,7 +8,7 @@
 #include "adio.h"
 #include "adio_extern.h"
 
-void ADIOI_GEN_WriteStrided_naive(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStrided_naive(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype buftype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code)
Index: src/mpi/romio/adio/common/ad_write_str.c
===================================================================
--- src/mpi/romio/adio/common/ad_write_str.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_write_str.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -108,7 +108,7 @@
         memcpy(writebuf, (char *)buf + userbuf_off, write_sz);\
     } \
 }
-void ADIOI_GEN_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_GEN_WriteStrided(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code)
Index: src/mpi/romio/adio/common/ad_iwrite_fake.c
===================================================================
--- src/mpi/romio/adio/common/ad_iwrite_fake.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/common/ad_iwrite_fake.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -12,7 +12,7 @@
 /* Generic implementation of IwriteContig calls the blocking WriteContig
  * immediately.
  */
-void ADIOI_FAKE_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_FAKE_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			    MPI_Datatype datatype, int file_ptr_type,
 			    ADIO_Offset offset, ADIO_Request *request,
 			    int *error_code)  
@@ -43,7 +43,7 @@
 /* Generic implementation of IwriteStrided calls the blocking WriteStrided
  * immediately.
  */
-void ADIOI_FAKE_IwriteStrided(ADIO_File fd, void *buf, int count, 
+void ADIOI_FAKE_IwriteStrided(ADIO_File fd, const void *buf, int count, 
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, ADIO_Request *request,
 			     int *error_code)
Index: src/mpi/romio/adio/ad_nfs/ad_nfs.h
===================================================================
--- src/mpi/romio/adio/ad_nfs/ad_nfs.h	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_nfs/ad_nfs.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -43,11 +43,11 @@
                       MPI_Datatype datatype, int file_ptr_type,
                      ADIO_Offset offset, ADIO_Status *status, int
 		     *error_code);
-void ADIOI_NFS_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_NFS_WriteContig(ADIO_File fd, const void *buf, int count, 
                       MPI_Datatype datatype, int file_ptr_type,
                       ADIO_Offset offset, ADIO_Status *status, int
 		      *error_code);   
-void ADIOI_NFS_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_NFS_IwriteContig(ADIO_File fd, const void *buf, int count, 
                       MPI_Datatype datatype, int file_ptr_type,
                       ADIO_Offset offset, ADIO_Request *request, int
 		      *error_code);   
@@ -65,7 +65,7 @@
 			int *error_code); 
 void ADIOI_NFS_Fcntl(ADIO_File fd, int flag, ADIO_Fcntl_t *fcntl_struct, int
 		*error_code); 
-void ADIOI_NFS_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_NFS_WriteStrided(ADIO_File fd, const void *buf, int count,
 		       MPI_Datatype datatype, int file_ptr_type,
 		       ADIO_Offset offset, ADIO_Status *status, int
 		       *error_code);
Index: src/mpi/romio/adio/ad_nfs/ad_nfs_write.c
===================================================================
--- src/mpi/romio/adio/ad_nfs/ad_nfs_write.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_nfs/ad_nfs_write.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -8,7 +8,7 @@
 #include "ad_nfs.h"
 #include "adio_extern.h"
 
-void ADIOI_NFS_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_NFS_WriteContig(ADIO_File fd, const void *buf, int count, 
                      MPI_Datatype datatype, int file_ptr_type,
 		     ADIO_Offset offset, ADIO_Status *status, int *error_code)
 {
@@ -263,7 +263,7 @@
 #endif
 
 
-void ADIOI_NFS_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_NFS_WriteStrided(ADIO_File fd, const void *buf, int count,
                        MPI_Datatype datatype, int file_ptr_type,
                        ADIO_Offset offset, ADIO_Status *status, int
                        *error_code)
Index: src/mpi/romio/adio/ad_nfs/ad_nfs_iwrite.c
===================================================================
--- src/mpi/romio/adio/ad_nfs/ad_nfs_iwrite.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_nfs/ad_nfs_iwrite.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -16,7 +16,7 @@
 static MPIX_Grequest_class ADIOI_GEN_greq_class = 0;
 /* this routine is nearly identical to ADIOI_GEN_IwriteContig, except we lock
  * around I/O */
-void ADIOI_NFS_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_NFS_IwriteContig(ADIO_File fd, const void *buf, int count, 
                 MPI_Datatype datatype, int file_ptr_type,
                 ADIO_Offset offset, ADIO_Request *request, int *error_code)  
 {
@@ -28,7 +28,7 @@
     len = count * typesize;
 
     if (file_ptr_type == ADIO_INDIVIDUAL) offset = fd->fp_ind;
-    aio_errno = ADIOI_NFS_aio(fd, buf, len, offset, 1, request);
+    aio_errno = ADIOI_NFS_aio(fd, (void *) buf, len, offset, 1, request);
     if (file_ptr_type == ADIO_INDIVIDUAL) fd->fp_ind += len;
 
     fd->fp_sys_posn = -1;
Index: src/mpi/romio/adio/ad_testfs/ad_testfs_delete.c
===================================================================
--- src/mpi/romio/adio/ad_testfs/ad_testfs_delete.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_testfs/ad_testfs_delete.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -8,7 +8,7 @@
 #include "ad_testfs.h"
 #include "adioi.h"
 
-void ADIOI_TESTFS_Delete(char *filename, int *error_code)
+void ADIOI_TESTFS_Delete(const char *filename, int *error_code)
 {
     int myrank, nprocs;
 
Index: src/mpi/romio/adio/ad_testfs/ad_testfs_wrcoll.c
===================================================================
--- src/mpi/romio/adio/ad_testfs/ad_testfs_wrcoll.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_testfs/ad_testfs_wrcoll.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -8,7 +8,7 @@
 #include "ad_testfs.h"
 #include "adioi.h"
 
-void ADIOI_TESTFS_WriteStridedColl(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_WriteStridedColl(ADIO_File fd, const void *buf, int count,
 				   MPI_Datatype datatype, int file_ptr_type,
 				   ADIO_Offset offset, ADIO_Status *status, 
 				   int *error_code)
Index: src/mpi/romio/adio/ad_testfs/ad_testfs_iwrite.c
===================================================================
--- src/mpi/romio/adio/ad_testfs/ad_testfs_iwrite.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_testfs/ad_testfs_iwrite.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -15,7 +15,7 @@
  *
  * Implemented by immediately calling WriteContig()
  */
-void ADIOI_TESTFS_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_TESTFS_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			       MPI_Datatype datatype, int file_ptr_type,
 			       ADIO_Offset offset, ADIO_Request *request, int
 			       *error_code)
@@ -40,7 +40,7 @@
 
 }
 
-void ADIOI_TESTFS_IwriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_IwriteStrided(ADIO_File fd, const void *buf, int count,
 				MPI_Datatype datatype, int file_ptr_type,
 				ADIO_Offset offset, ADIO_Request *request, int
 				*error_code)
Index: src/mpi/romio/adio/ad_testfs/ad_testfs.h
===================================================================
--- src/mpi/romio/adio/ad_testfs/ad_testfs.h	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_testfs/ad_testfs.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -20,11 +20,11 @@
 			     MPI_Datatype datatype, int file_ptr_type,
 			     ADIO_Offset offset, ADIO_Status *status, int
 			     *error_code);
-void ADIOI_TESTFS_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_TESTFS_WriteContig(ADIO_File fd, const void *buf, int count, 
 			      MPI_Datatype datatype, int file_ptr_type,
 			      ADIO_Offset offset, ADIO_Status *status, int
 			      *error_code);   
-void ADIOI_TESTFS_IwriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_TESTFS_IwriteContig(ADIO_File fd, const void *buf, int count, 
 			       MPI_Datatype datatype, int file_ptr_type,
 			       ADIO_Offset offset, ADIO_Request *request, int
 			       *error_code);   
@@ -42,7 +42,7 @@
 				int *error_code); 
 void ADIOI_TESTFS_Fcntl(ADIO_File fd, int flag, ADIO_Fcntl_t *fcntl_struct, 
 			int *error_code); 
-void ADIOI_TESTFS_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_WriteStrided(ADIO_File fd, const void *buf, int count,
 			       MPI_Datatype datatype, int file_ptr_type,
 			       ADIO_Offset offset, ADIO_Status *status,
 			       int *error_code);
@@ -50,7 +50,7 @@
 			      MPI_Datatype datatype, int file_ptr_type,
 			      ADIO_Offset offset, ADIO_Status *status, int
 			      *error_code);
-void ADIOI_TESTFS_WriteStridedColl(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_WriteStridedColl(ADIO_File fd, const void *buf, int count,
 				   MPI_Datatype datatype, int file_ptr_type,
 				   ADIO_Offset offset, ADIO_Status *status, int
 				   *error_code);
@@ -62,7 +62,7 @@
 			       MPI_Datatype datatype, int file_ptr_type,
 			       ADIO_Offset offset, ADIO_Request *request, int
 			       *error_code);
-void ADIOI_TESTFS_IwriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_IwriteStrided(ADIO_File fd, const void *buf, int count,
 				MPI_Datatype datatype, int file_ptr_type,
 				ADIO_Offset offset, ADIO_Request *request, int
 				*error_code);
@@ -76,7 +76,7 @@
 				int *error_code);
 void ADIOI_TESTFS_Set_shared_fp(ADIO_File fd, ADIO_Offset offset, 
 				int *error_code);
-void ADIOI_TESTFS_Delete(char *filename, int *error_code);
+void ADIOI_TESTFS_Delete(const char *filename, int *error_code);
 
 #endif
 
Index: src/mpi/romio/adio/ad_testfs/ad_testfs_write.c
===================================================================
--- src/mpi/romio/adio/ad_testfs/ad_testfs_write.c	(.../trunk)	(revision 4035)
+++ src/mpi/romio/adio/ad_testfs/ad_testfs_write.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -7,7 +7,7 @@
 #include "ad_testfs.h"
 #include "adioi.h"
 
-void ADIOI_TESTFS_WriteContig(ADIO_File fd, void *buf, int count, 
+void ADIOI_TESTFS_WriteContig(ADIO_File fd, const void *buf, int count, 
 			      MPI_Datatype datatype, int file_ptr_type,
 			      ADIO_Offset offset, ADIO_Status *status, int
 			      *error_code)
@@ -41,7 +41,7 @@
 #endif
 }
 
-void ADIOI_TESTFS_WriteStrided(ADIO_File fd, void *buf, int count,
+void ADIOI_TESTFS_WriteStrided(ADIO_File fd, const void *buf, int count,
 			       MPI_Datatype datatype, int file_ptr_type,
 			       ADIO_Offset offset, ADIO_Status *status,
 			       int *error_code)
Index: src/mpi/spawn/comm_spawn_multiple.c
===================================================================
--- src/mpi/spawn/comm_spawn_multiple.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/comm_spawn_multiple.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -60,7 +60,7 @@
 .N MPI_ERR_SPAWN
 @*/
 int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], 
-			    char* *array_of_argv[], int array_of_maxprocs[], 
+			    char* *array_of_argv[], const int array_of_maxprocs[], 
 			    MPI_Info array_of_info[], int root, MPI_Comm comm, 
 			    MPI_Comm *intercomm, int array_of_errcodes[]) 
 {
@@ -134,7 +134,10 @@
 
     /* TODO: add error check to see if this collective function is
        being called from multiple threads. */
-    mpi_errno = MPID_Comm_spawn_multiple(count, array_of_commands,
+    /* The weird typecasting for array_of_commands is because
+     * MPI_Comm_spawn_multiple did not make it a const in MPI-2.2;
+     * this should be fixed in MPI-3.0 */
+    mpi_errno = MPID_Comm_spawn_multiple(count, (const char **) array_of_commands,
                                          array_of_argv,
                                          array_of_maxprocs,
                                          array_of_info_ptrs, root, 
Index: src/mpi/spawn/comm_spawn.c
===================================================================
--- src/mpi/spawn/comm_spawn.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/comm_spawn.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 .N MPI_ERR_INFO
 .N MPI_ERR_SPAWN
 @*/
-int MPI_Comm_spawn(char *command, char *argv[], int maxprocs, MPI_Info info, 
+int MPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, 
 		   int root, MPI_Comm comm, MPI_Comm *intercomm,
 		   int array_of_errcodes[])
 {
Index: src/mpi/spawn/comm_connect.c
===================================================================
--- src/mpi/spawn/comm_connect.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/comm_connect.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -50,7 +50,7 @@
 .N MPI_ERR_INFO
 .N MPI_ERR_PORT
 @*/
-int MPI_Comm_connect(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int MPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                      MPI_Comm *newcomm)
 {
     static const char FCNAME[] = "MPI_Comm_connect";
Index: src/mpi/spawn/publish_name.c
===================================================================
--- src/mpi/spawn/publish_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/publish_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -51,7 +51,7 @@
 .N MPI_ERR_INFO
 .N MPI_ERR_OTHER
 @*/
-int MPI_Publish_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     static const char FCNAME[] = "MPI_Publish_name";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/spawn/close_port.c
===================================================================
--- src/mpi/spawn/close_port.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/close_port.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -41,7 +41,7 @@
 .N Errors
 .N MPI_SUCCESS
 @*/
-int MPI_Close_port(char *port_name)
+int MPI_Close_port(const char *port_name)
 {
     static const char FCNAME[] = "MPI_Close_port";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/spawn/lookup_name.c
===================================================================
--- src/mpi/spawn/lookup_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/lookup_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -61,7 +61,7 @@
 .N MPI_ERR_OTHER
 .N MPI_ERR_ARG
 @*/
-int MPI_Lookup_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name)
 {
     static const char FCNAME[] = "MPI_Lookup_name";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/spawn/unpublish_name.c
===================================================================
--- src/mpi/spawn/unpublish_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/unpublish_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -48,7 +48,7 @@
 .N MPI_ERR_ARG
 .N MPI_ERR_OTHER
 @*/
-int MPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     static const char FCNAME[] = "MPI_Unpublish_name";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/spawn/comm_accept.c
===================================================================
--- src/mpi/spawn/comm_accept.c	(.../trunk)	(revision 4035)
+++ src/mpi/spawn/comm_accept.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -49,7 +49,7 @@
 .N MPI_ERR_INFO
 .N MPI_ERR_COMM
 @*/
-int MPI_Comm_accept(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int MPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                     MPI_Comm *newcomm)
 {
     static const char FCNAME[] = "MPI_Comm_accept";
Index: src/mpi/coll/allgather.c
===================================================================
--- src/mpi/coll/allgather.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/allgather.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -71,7 +71,7 @@
 /* not declared static because a machine-specific function may call this 
    one in some cases */
 int MPIR_Allgather ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount, 
     MPI_Datatype sendtype,
     void *recvbuf, 
@@ -589,7 +589,7 @@
 /* not declared static because a machine-specific function may call this one 
    in some cases */
 int MPIR_Allgather_inter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount, 
     MPI_Datatype sendtype,
     void *recvbuf, 
@@ -746,7 +746,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                   void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                   MPI_Comm comm)
 {
Index: src/mpi/coll/scatter.c
===================================================================
--- src/mpi/coll/scatter.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/scatter.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -47,14 +47,14 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Scatter ( 
-	void *sendbuf, 
-	int sendcnt, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int recvcnt, 
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    int sendcnt, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    int recvcnt, 
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Scatter";
     MPI_Status status;
@@ -438,14 +438,14 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Scatter_inter ( 
-	void *sendbuf, 
-	int sendcnt, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int recvcnt, 
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    int sendcnt, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    int recvcnt, 
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
 /*  Intercommunicator scatter.
     For short messages, root sends to rank 0 in remote group. rank 0
@@ -618,7 +618,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Scatter(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPI_Scatter(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
 		void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, 
 		MPI_Comm comm)
 {
Index: src/mpi/coll/gather.c
===================================================================
--- src/mpi/coll/gather.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/gather.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -44,14 +44,14 @@
 /* not declared static because it is called in intercomm. allgather */
 /* begin:nested */
 int MPIR_Gather ( 
-	void *sendbuf, 
-	int sendcnt, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int recvcnt, 
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    int sendcnt, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    int recvcnt, 
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Gather";
     int        comm_size, rank;
@@ -411,14 +411,14 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Gather_inter ( 
-	void *sendbuf, 
-	int sendcnt, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int recvcnt, 
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    int sendcnt, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    int recvcnt, 
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
 /*  Intercommunicator gather.
     For short messages, remote group does a local intracommunicator
@@ -608,7 +608,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Gather(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPI_Gather(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                int root, MPI_Comm comm)
 {
Index: src/mpi/coll/opminloc.c
===================================================================
--- src/mpi/coll/opminloc.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/opminloc.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -41,10 +41,10 @@
 #endif
 
 void MPIR_MINLOC( 
-	void *invec, 
-	void *inoutvec, 
-	int *Len, 
-	MPI_Datatype *type )
+    void *invec, 
+    void *inoutvec, 
+    int *Len, 
+    MPI_Datatype *type )
 {
     static const char FCNAME[] = "MPIR_MINLOC";
     int i, len = *Len, flen;
Index: src/mpi/coll/opmin.c
===================================================================
--- src/mpi/coll/opmin.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/opmin.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -12,10 +12,10 @@
  * and floating point data items (4.9.2 Predefined reduce operations)
  */
 void MPIR_MINF ( 
-	void *invec, 
-	void *inoutvec, 
-	int *Len, 
-	MPI_Datatype *type )
+    void *invec, 
+    void *inoutvec, 
+    int *Len, 
+    MPI_Datatype *type )
 {
     static const char FCNAME[] = "MPIR_MINF";
     int i, len = *Len;
Index: src/mpi/coll/opmaxloc.c
===================================================================
--- src/mpi/coll/opmaxloc.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/opmaxloc.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -42,10 +42,10 @@
 
 
 void MPIR_MAXLOC( 
-	void *invec, 
-	void *inoutvec, 
-	int *Len, 
-	MPI_Datatype *type )
+    void *invec, 
+    void *inoutvec, 
+    int *Len, 
+    MPI_Datatype *type )
 {
     static const char FCNAME[] = "MPIR_MAXLOC";
     int i, len = *Len, flen;
Index: src/mpi/coll/red_scat.c
===================================================================
--- src/mpi/coll/red_scat.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/red_scat.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -75,9 +75,9 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 static int MPIR_Reduce_scatter_noncomm (
-    void *sendbuf,
+    const void *sendbuf,
     void *recvbuf,
-    int *recvcnts,
+    const int *recvcnts,
     MPI_Datatype datatype,
     MPI_Op op,
     MPID_Comm *comm_ptr )
@@ -280,9 +280,9 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Reduce_scatter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
-    int *recvcnts, 
+    const int *recvcnts, 
     MPI_Datatype datatype, 
     MPI_Op op, 
     MPID_Comm *comm_ptr )
@@ -646,7 +646,7 @@
                     }
                     else 
 #endif
-                        (*uop)(tmp_recvbuf, recvbuf, &recvcnts[rank], 
+                        (*uop)(tmp_recvbuf, recvbuf, (void *) &recvcnts[rank], 
                                &datatype); 
                 }
                 else {
@@ -659,7 +659,7 @@
                     else 
 #endif
                         (*uop)(tmp_recvbuf, ((char *)recvbuf+disps[rank]*extent), 
-                               &recvcnts[rank], &datatype); 
+                               (void *) &recvcnts[rank], &datatype); 
                     /* we can't store the result at the beginning of
                        recvbuf right here because there is useful data
                        there that other process/processes need. at the
@@ -678,7 +678,7 @@
                     }
                     else 
 #endif
-                        (*uop)(recvbuf, tmp_recvbuf, &recvcnts[rank], &datatype); 
+                        (*uop)(recvbuf, tmp_recvbuf, (void *) &recvcnts[rank], &datatype); 
                     /* copy result back into recvbuf */
                     mpi_errno = MPIR_Localcopy(tmp_recvbuf, recvcnts[rank], 
                                                datatype, recvbuf,
@@ -695,7 +695,7 @@
                     else 
 #endif
                         (*uop)(((char *)recvbuf+disps[rank]*extent),
-                               tmp_recvbuf, &recvcnts[rank], &datatype);   
+                               tmp_recvbuf, (void *) &recvcnts[rank], &datatype);   
                     /* copy result back into recvbuf */
                     mpi_errno = MPIR_Localcopy(tmp_recvbuf, recvcnts[rank], 
                                                datatype, 
@@ -978,9 +978,9 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Reduce_scatter_inter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
-    int *recvcnts, 
+    const int *recvcnts, 
     MPI_Datatype datatype, 
     MPI_Op op, 
     MPID_Comm *comm_ptr )
@@ -1158,7 +1158,7 @@
 .N MPI_ERR_OP
 .N MPI_ERR_BUFFER_ALIAS
 @*/
-int MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcnts, 
+int MPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int *recvcnts, 
 		       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
 {
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/coll/allreduce.c
===================================================================
--- src/mpi/coll/allreduce.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/allreduce.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -93,7 +93,7 @@
 #define FCNAME "MPIR_Allreduce"
 
 int MPIR_Allreduce ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -489,7 +489,7 @@
 #undef FCNAME
 #define FCNAME "MPIR_Allreduce_inter"
 int MPIR_Allreduce_inter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -593,8 +593,8 @@
 .N MPI_ERR_OP
 .N MPI_ERR_COMM
 @*/
-int MPI_Allreduce ( void *sendbuf, void *recvbuf, int count, 
-		    MPI_Datatype datatype, MPI_Op op, MPI_Comm comm )
+int MPI_Allreduce(const void *sendbuf, void *recvbuf, int count, 
+                  MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Allreduce";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/coll/gatherv.c
===================================================================
--- src/mpi/coll/gatherv.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/gatherv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -42,15 +42,15 @@
 
 /* not declared static because it is called in intercommunicator allgatherv */
 int MPIR_Gatherv ( 
-	void *sendbuf, 
-	int sendcnt,  
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int *recvcnts, 
-	int *displs, 
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    int sendcnt,  
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    const int *recvcnts, 
+    const int *displs, 
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Gatherv";
     int        comm_size, rank;
@@ -192,8 +192,8 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Gatherv(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
-                void *recvbuf, int *recvcnts, int *displs, 
+int MPI_Gatherv(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+                void *recvbuf, const int *recvcnts, const int *displs, 
                 MPI_Datatype recvtype, int root, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Gatherv";
Index: src/mpi/coll/opsum.c
===================================================================
--- src/mpi/coll/opsum.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/opsum.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -19,10 +19,10 @@
 #define MPIR_LSUM(a,b) ((a)+(b))
 
 void MPIR_SUM ( 
-	void *invec, 
-	void *inoutvec, 
-	int *Len, 
-	MPI_Datatype *type )
+    void *invec, 
+    void *inoutvec, 
+    int *Len, 
+    MPI_Datatype *type )
 {
     static const char FCNAME[] = "MPIR_SUM";
     int i, len = *Len;
Index: src/mpi/coll/alltoall.c
===================================================================
--- src/mpi/coll/alltoall.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/alltoall.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -67,7 +67,7 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoall( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount, 
     MPI_Datatype sendtype, 
     void *recvbuf, 
@@ -496,7 +496,7 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoall_inter( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount, 
     MPI_Datatype sendtype, 
     void *recvbuf, 
@@ -606,7 +606,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                  void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                  MPI_Comm comm)
 {
Index: src/mpi/coll/reduce.c
===================================================================
--- src/mpi/coll/reduce.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/reduce.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,7 +32,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 static int MPIR_Reduce_binomial ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -273,7 +273,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 static int MPIR_Reduce_redscat_gather ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -711,7 +711,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 int MPIR_Reduce ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -786,7 +786,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 int MPIR_Reduce_or_coll_fn(
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -818,7 +818,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 int MPIR_Reduce_inter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -951,7 +951,7 @@
 .N MPI_ERR_BUFFER_ALIAS
 
 @*/
-int MPI_Reduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	       MPI_Op op, int root, MPI_Comm comm)
 {
     int mpi_errno = MPI_SUCCESS;
@@ -1124,7 +1124,7 @@
 		    if (comm_ptr->node_roots_comm->rank != MPIU_Get_internode_rank(comm_ptr, root)) {
                         /* I am not on root's node.  Use tmp_buf if we
                            participated in the first reduce, otherwise use sendbuf */
-                        void *buf = (comm_ptr->node_comm == NULL ? sendbuf : tmp_buf);
+                        const void *buf = (comm_ptr->node_comm == NULL ? sendbuf : tmp_buf);
                         mpi_errno = MPIR_Reduce(buf, NULL, count, datatype,
                                                 op, MPIU_Get_internode_rank(comm_ptr, root), 
                                                 comm_ptr->node_roots_comm);
Index: src/mpi/coll/exscan.c
===================================================================
--- src/mpi/coll/exscan.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/exscan.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -70,7 +70,7 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Exscan ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -319,7 +319,7 @@
 .N MPI_ERR_BUFFER
 .N MPI_ERR_BUFFER_ALIAS
 @*/
-int MPI_Exscan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
                MPI_Op op, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Exscan";
Index: src/mpi/coll/scan.c
===================================================================
--- src/mpi/coll/scan.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/scan.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -63,7 +63,7 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Scan ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -279,7 +279,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 static int MPIR_Scan_or_coll_fn(
-    void *sendbuf, 
+    const void *sendbuf, 
     void *recvbuf, 
     int count, 
     MPI_Datatype datatype, 
@@ -312,7 +312,7 @@
 #undef FCNAME
 #define FCNAME MPIU_QUOTE(FUNCNAME)
 static int MPIR_SMP_Scan(
-    void *sendbuf,
+    const void *sendbuf,
     void *recvbuf,
     int count,
     MPI_Datatype datatype,
@@ -517,7 +517,7 @@
 .N MPI_ERR_BUFFER
 .N MPI_ERR_BUFFER_ALIAS
 @*/
-int MPI_Scan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	     MPI_Op op, MPI_Comm comm)
 {
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/coll/helper_fns.c
===================================================================
--- src/mpi/coll/helper_fns.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/helper_fns.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -19,7 +19,7 @@
 #define FUNCNAME MPIC_Send
 #undef FCNAME
 #define FCNAME "MPIC_Send"
-int MPIC_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm)
 {
     int mpi_errno, context_id;
@@ -98,7 +98,7 @@
 #define FUNCNAME MPIC_Ssend
 #undef FCNAME
 #define FCNAME "MPIC_Ssend"
-int MPIC_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
                MPI_Comm comm)
 {
     int mpi_errno, context_id;
@@ -134,7 +134,7 @@
 #define FUNCNAME MPIC_Sendrecv
 #undef FCNAME
 #define FCNAME "MPIC_Sendrecv"
-int MPIC_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIC_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                   int dest, int sendtag, void *recvbuf, int recvcount,
                   MPI_Datatype recvtype, int source, int recvtag,
                   MPI_Comm comm, MPI_Status *status) 
@@ -178,7 +178,7 @@
 #define FUNCNAME MPIR_Localcopy
 #undef FCNAME
 #define FCNAME "MPIR_Localcopy"
-int MPIR_Localcopy(void *sendbuf, int sendcount, MPI_Datatype sendtype,
+int MPIR_Localcopy(const void *sendbuf, int sendcount, MPI_Datatype sendtype,
                    void *recvbuf, int recvcount, MPI_Datatype recvtype)
 {
     int mpi_errno = MPI_SUCCESS;
@@ -325,7 +325,7 @@
 #define FUNCNAME MPIC_Isend
 #undef FCNAME
 #define FCNAME "MPIC_Isend"
-int MPIC_Isend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPIC_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
               MPI_Comm comm, MPI_Request *request)
 {
     int mpi_errno, context_id;
Index: src/mpi/coll/allgatherv.c
===================================================================
--- src/mpi/coll/allgatherv.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/allgatherv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -64,12 +64,12 @@
 /* not declared static because a machine-specific function may call this one 
    in some cases */
 int MPIR_Allgatherv ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount,   
     MPI_Datatype sendtype, 
     void *recvbuf, 
-    int *recvcounts, 
-    int *displs,   
+    const int *recvcounts, 
+    const int *displs,   
     MPI_Datatype recvtype, 
     MPID_Comm *comm_ptr )
 {
@@ -859,12 +859,12 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Allgatherv_inter ( 
-    void *sendbuf, 
+    const void *sendbuf, 
     int sendcount,  
     MPI_Datatype sendtype, 
     void *recvbuf, 
-    int *recvcounts, 
-    int *displs,   
+    const int *recvcounts, 
+    const int *displs,   
     MPI_Datatype recvtype, 
     MPID_Comm *comm_ptr )
 {
@@ -1012,8 +1012,8 @@
 .N MPI_ERR_COUNT
 .N MPI_ERR_TYPE
 @*/
-int MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
-                   void *recvbuf, int *recvcounts, int *displs, 
+int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+                   void *recvbuf, const int *recvcounts, const int *displs, 
                    MPI_Datatype recvtype, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Allgatherv";
Index: src/mpi/coll/alltoallv.c
===================================================================
--- src/mpi/coll/alltoallv.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/alltoallv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -45,15 +45,15 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoallv ( 
-	void *sendbuf, 
-	int *sendcnts, 
-	int *sdispls, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int *recvcnts, 
-	int *rdispls, 
-	MPI_Datatype recvtype, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    const int *sendcnts, 
+    const int *sdispls, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    const int *recvcnts, 
+    const int *rdispls, 
+    MPI_Datatype recvtype, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Alltoallv";
     int        comm_size, i;
@@ -156,13 +156,13 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoallv_inter ( 
-    void *sendbuf, 
-    int *sendcnts, 
-    int *sdispls, 
+    const void *sendbuf, 
+    const int *sendcnts, 
+    const int *sdispls, 
     MPI_Datatype sendtype, 
     void *recvbuf, 
-    int *recvcnts, 
-    int *rdispls, 
+    const int *recvcnts, 
+    const int *rdispls, 
     MPI_Datatype recvtype, 
     MPID_Comm *comm_ptr )
 {
@@ -286,9 +286,9 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Alltoallv(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype sendtype, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
+int MPI_Alltoallv(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  MPI_Datatype sendtype, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Alltoallv";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/coll/scatterv.c
===================================================================
--- src/mpi/coll/scatterv.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/scatterv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -44,15 +44,15 @@
 #undef FUNCNAME
 #define FUNCNAME MPIR_Scatterv
 int MPIR_Scatterv ( 
-	void *sendbuf, 
-	int *sendcnts, 
-	int *displs, 
-	MPI_Datatype sendtype, 
-	void *recvbuf, 
-	int recvcnt,  
-	MPI_Datatype recvtype, 
-	int root, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    const int *sendcnts, 
+    const int *displs, 
+    MPI_Datatype sendtype, 
+    void *recvbuf, 
+    int recvcnt,  
+    MPI_Datatype recvtype, 
+    int root, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Scatterv";
     int rank, comm_size, mpi_errno = MPI_SUCCESS;
@@ -183,10 +183,10 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_BUFFER
 @*/
-int MPI_Scatterv( void *sendbuf, int *sendcnts, int *displs, 
-		  MPI_Datatype sendtype, void *recvbuf, int recvcnt,
-		  MPI_Datatype recvtype,
-		  int root, MPI_Comm comm)
+int MPI_Scatterv(const void *sendbuf, const int *sendcnts, const int *displs, 
+                 MPI_Datatype sendtype, void *recvbuf, int recvcnt,
+                 MPI_Datatype recvtype,
+                 int root, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Scatterv";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/coll/alltoallw.c
===================================================================
--- src/mpi/coll/alltoallw.c	(.../trunk)	(revision 4035)
+++ src/mpi/coll/alltoallw.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -44,15 +44,15 @@
 /* begin:nested */
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoallw ( 
-	void *sendbuf, 
-	int *sendcnts, 
-	int *sdispls, 
-	MPI_Datatype *sendtypes, 
-	void *recvbuf, 
-	int *recvcnts, 
-	int *rdispls, 
-	MPI_Datatype *recvtypes, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    const int *sendcnts, 
+    const int *sdispls, 
+    const MPI_Datatype *sendtypes, 
+    void *recvbuf, 
+    const int *recvcnts, 
+    const int *rdispls, 
+    const MPI_Datatype *recvtypes, 
+    MPID_Comm *comm_ptr )
 {
     static const char FCNAME[] = "MPIR_Alltoallw";
     int        comm_size, i;
@@ -173,15 +173,15 @@
 
 /* not declared static because a machine-specific function may call this one in some cases */
 int MPIR_Alltoallw_inter ( 
-	void *sendbuf, 
-	int *sendcnts, 
-	int *sdispls, 
-	MPI_Datatype *sendtypes, 
-	void *recvbuf, 
-	int *recvcnts, 
-	int *rdispls, 
-	MPI_Datatype *recvtypes, 
-	MPID_Comm *comm_ptr )
+    const void *sendbuf, 
+    const int *sendcnts, 
+    const int *sdispls, 
+    const MPI_Datatype *sendtypes, 
+    void *recvbuf, 
+    const int *recvcnts, 
+    const int *rdispls, 
+    const MPI_Datatype *recvtypes, 
+    MPID_Comm *comm_ptr )
 {
 /* Intercommunicator alltoallw. We use a pairwise exchange algorithm
    similar to the one used in intracommunicator alltoallw. Since the
@@ -299,9 +299,9 @@
 .N MPI_ERR_COUNT
 .N MPI_ERR_TYPE
 @*/
-int MPI_Alltoallw(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype *sendtypes, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype *recvtypes, MPI_Comm comm)
+int MPI_Alltoallw(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  const MPI_Datatype *sendtypes, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, const MPI_Datatype *recvtypes, MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Alltoallw";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/comm/comm_set_name.c
===================================================================
--- src/mpi/comm/comm_set_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/comm/comm_set_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -45,7 +45,7 @@
 .N MPI_SUCCESS
 .N MPI_ERR_COMM
 @*/
-int MPI_Comm_set_name(MPI_Comm comm, char *comm_name)
+int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name)
 {
     int mpi_errno = MPI_SUCCESS;
     MPID_Comm *comm_ptr = NULL;
Index: src/mpi/group/group_incl.c
===================================================================
--- src/mpi/group/group_incl.c	(.../trunk)	(revision 4035)
+++ src/mpi/group/group_incl.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 
 .seealso: MPI_Group_free
 @*/
-int MPI_Group_incl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int MPI_Group_incl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     static const char FCNAME[] = "MPI_Group_incl";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/group/group.h
===================================================================
--- src/mpi/group/group.h	(.../trunk)	(revision 4035)
+++ src/mpi/group/group.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -7,7 +7,7 @@
 /* MPIR_Group_create is needed by some of the routines that return groups
    from communicators, so it is in mpidimpl.h */
 void MPIR_Group_setup_lpid_list( MPID_Group * );
-int MPIR_Group_check_valid_ranks( MPID_Group *, int [], int );
+int MPIR_Group_check_valid_ranks( MPID_Group *, const int [], int );
 int MPIR_Group_check_valid_ranges( MPID_Group *, int [][3], int );
 void MPIR_Group_setup_lpid_pairs( MPID_Group *, MPID_Group * );
 
Index: src/mpi/group/group_translate_ranks.c
===================================================================
--- src/mpi/group/group_translate_ranks.c	(.../trunk)	(revision 4035)
+++ src/mpi/group/group_translate_ranks.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -53,7 +53,7 @@
 .N Errors
 .N MPI_SUCCESS
 @*/
-int MPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1, 
+int MPI_Group_translate_ranks(MPI_Group group1, int n, const int *ranks1, 
 			      MPI_Group group2, int *ranks2)
 {
 #ifdef HAVE_ERROR_CHECKING
Index: src/mpi/group/group_excl.c
===================================================================
--- src/mpi/group/group_excl.c	(.../trunk)	(revision 4035)
+++ src/mpi/group/group_excl.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -61,7 +61,7 @@
 
 .seealso: MPI_Group_free
 @*/
-int MPI_Group_excl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int MPI_Group_excl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     static const char FCNAME[] = "MPI_Group_excl";
     int mpi_errno = MPI_SUCCESS;
Index: src/mpi/group/grouputil.c
===================================================================
--- src/mpi/group/grouputil.c	(.../trunk)	(revision 4035)
+++ src/mpi/group/grouputil.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -216,7 +216,7 @@
  * must be used by only on thread at a time (per group).  For the SINGLE_CS
  * case, that means that the SINGLE_CS must be held on entry to this routine.
  */
-int MPIR_Group_check_valid_ranks( MPID_Group *group_ptr, int ranks[], int n )
+int MPIR_Group_check_valid_ranks( MPID_Group *group_ptr, const int ranks[], int n )
 {
     int mpi_errno = MPI_SUCCESS, i;
 
Index: src/mpi/pt2pt/bsendutil.h
===================================================================
--- src/mpi/pt2pt/bsendutil.h	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/bsendutil.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -9,6 +9,6 @@
 /* Function Prototypes for the bsend utility functions */
 int MPIR_Bsend_attach( void *, int );
 int MPIR_Bsend_detach( void *, int * );
-int MPIR_Bsend_isend( void *, int, MPI_Datatype, int, int, MPID_Comm *, 
+int MPIR_Bsend_isend( const void *, int, MPI_Datatype, int, int, MPID_Comm *, 
 		      BsendKind_t, MPID_Request ** );
 
Index: src/mpi/pt2pt/ssend_init.c
===================================================================
--- src/mpi/pt2pt/ssend_init.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/ssend_init.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -54,7 +54,7 @@
 .N MPI_ERR_TAG
 .N MPI_ERR_RANK
 @*/
-int MPI_Ssend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Ssend_init";
Index: src/mpi/pt2pt/isend.c
===================================================================
--- src/mpi/pt2pt/isend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/isend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -54,7 +54,7 @@
 .N MPI_ERR_EXHAUSTED
 
 @*/
-int MPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Isend";
Index: src/mpi/pt2pt/ibsend.c
===================================================================
--- src/mpi/pt2pt/ibsend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/ibsend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -113,7 +113,7 @@
 .N MPI_ERR_BUFFER
 
 @*/
-int MPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	       MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Ibsend";
Index: src/mpi/pt2pt/rsend.c
===================================================================
--- src/mpi/pt2pt/rsend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/rsend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -52,7 +52,7 @@
 .N MPI_ERR_RANK
 
 @*/
-int MPI_Rsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Rsend";
Index: src/mpi/pt2pt/ssend.c
===================================================================
--- src/mpi/pt2pt/ssend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/ssend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -51,7 +51,7 @@
 .N MPI_ERR_TAG
 .N MPI_ERR_RANK
 @*/
-int MPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Ssend";
Index: src/mpi/pt2pt/bsend_init.c
===================================================================
--- src/mpi/pt2pt/bsend_init.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/bsend_init.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -56,7 +56,7 @@
 
 .seealso: MPI_Buffer_attach
 @*/
-int MPI_Bsend_init(void *buf, int count, MPI_Datatype datatype, 
+int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, 
                    int dest, int tag, MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Bsend_init";
Index: src/mpi/pt2pt/irsend.c
===================================================================
--- src/mpi/pt2pt/irsend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/irsend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -56,7 +56,7 @@
 .N MPI_ERR_EXHAUSTED
 
 @*/
-int MPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Irsend";
Index: src/mpi/pt2pt/issend.c
===================================================================
--- src/mpi/pt2pt/issend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/issend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,7 +55,7 @@
 .N MPI_ERR_RANK
 .N MPI_ERR_EXHAUSTED
 @*/
-int MPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Issend";
Index: src/mpi/pt2pt/send.c
===================================================================
--- src/mpi/pt2pt/send.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/send.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 
 .seealso: MPI_Isend, MPI_Bsend
 @*/
-int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	     MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Send";
Index: src/mpi/pt2pt/rsend_init.c
===================================================================
--- src/mpi/pt2pt/rsend_init.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/rsend_init.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 
 .seealso: MPI_Start, MPI_Request_free, MPI_Send_init
 @*/
-int MPI_Rsend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Rsend_init";
Index: src/mpi/pt2pt/sendrecv.c
===================================================================
--- src/mpi/pt2pt/sendrecv.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/sendrecv.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -62,7 +62,7 @@
 .N MPI_ERR_RANK
 
 @*/
-int MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
 		 int dest, int sendtag,
 		 void *recvbuf, int recvcount, MPI_Datatype recvtype, 
 		 int source, int recvtag,
Index: src/mpi/pt2pt/test_cancelled.c
===================================================================
--- src/mpi/pt2pt/test_cancelled.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/test_cancelled.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -45,7 +45,7 @@
 .N MPI_SUCCESS
 .N MPI_ERR_ARG
 @*/
-int MPI_Test_cancelled(MPI_Status *status, int *flag)
+int MPI_Test_cancelled(const MPI_Status *status, int *flag)
 {
 #ifdef HAVE_ERROR_CHECKING
     static const char FCNAME[] = "MPI_Test_cancelled";
Index: src/mpi/pt2pt/send_init.c
===================================================================
--- src/mpi/pt2pt/send_init.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/send_init.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 
 .seealso: MPI_Start, MPI_Startall, MPI_Request_free
 @*/
-int MPI_Send_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		  int tag, MPI_Comm comm, MPI_Request *request)
 {
     static const char FCNAME[] = "MPI_Send_init";
Index: src/mpi/pt2pt/bsendutil.c
===================================================================
--- src/mpi/pt2pt/bsendutil.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/bsendutil.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -254,9 +254,9 @@
 #define FUNCNAME MPIR_Bsend_isend
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPIR_Bsend_isend( void *buf, int count, MPI_Datatype dtype, 
-		      int dest, int tag, MPID_Comm *comm_ptr, 
-		      BsendKind_t kind, MPID_Request **request )
+int MPIR_Bsend_isend(const void *buf, int count, MPI_Datatype dtype, 
+                     int dest, int tag, MPID_Comm *comm_ptr, 
+                     BsendKind_t kind, MPID_Request **request)
 {
     BsendData_t *p;
     BsendMsg_t *msg;
Index: src/mpi/pt2pt/bsend.c
===================================================================
--- src/mpi/pt2pt/bsend.c	(.../trunk)	(revision 4035)
+++ src/mpi/pt2pt/bsend.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -83,7 +83,7 @@
 
 .seealso: MPI_Buffer_attach, MPI_Ibsend, MPI_Bsend_init
 @*/
-int MPI_Bsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	      MPI_Comm comm)
 {
     static const char FCNAME[] = "MPI_Bsend";
Index: src/mpi/datatype/type_create_darray.c
===================================================================
--- src/mpi/datatype/type_create_darray.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_create_darray.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -21,23 +21,23 @@
 #define MIN(__a, __b) (((__a) < (__b)) ? (__a) : (__b))
 #endif
 
-PMPI_LOCAL int MPIR_Type_block(int *array_of_gsizes,
+PMPI_LOCAL int MPIR_Type_block(const int *array_of_gsizes,
 			       int dim,
 			       int ndims,
-			       int nprocs,
+			       const int nprocs,
 			       int rank,
-			       int darg,
+			       const int darg,
 			       int order,
 			       MPI_Aint orig_extent,
 			       MPI_Datatype type_old,
 			       MPI_Datatype *type_new,
 			       MPI_Aint *st_offset);
-PMPI_LOCAL int MPIR_Type_cyclic(int *array_of_gsizes,
+PMPI_LOCAL int MPIR_Type_cyclic(const int *array_of_gsizes,
 				int dim,
 				int ndims,
-				int nprocs,
+				const int nprocs,
 				int rank,
-				int darg,
+				const int darg,
 				int order,
 				MPI_Aint orig_extent,
 				MPI_Datatype type_old,
@@ -52,12 +52,12 @@
 
 
 
-PMPI_LOCAL int MPIR_Type_block(int *array_of_gsizes,
+PMPI_LOCAL int MPIR_Type_block(const int *array_of_gsizes,
 			       int dim,
 			       int ndims,
-			       int nprocs,
+			       const int nprocs,
 			       int rank,
-			       int darg,
+			       const int darg,
 			       int order,
 			       MPI_Aint orig_extent,
 			       MPI_Datatype type_old,
@@ -178,12 +178,12 @@
 }
 
 
-PMPI_LOCAL int MPIR_Type_cyclic(int *array_of_gsizes,
+PMPI_LOCAL int MPIR_Type_cyclic(const int *array_of_gsizes,
 				int dim,
 				int ndims,
-				int nprocs,
+				const int nprocs,
 				int rank,
-				int darg,
+				const int darg,
 				int order,
 				MPI_Aint orig_extent,
 				MPI_Datatype type_old,
@@ -358,10 +358,10 @@
 int MPI_Type_create_darray(int size,
 			   int rank,
 			   int ndims,
-			   int array_of_gsizes[],
-			   int array_of_distribs[],
-			   int array_of_dargs[],
-			   int array_of_psizes[],
+			   const int array_of_gsizes[],
+			   const int array_of_distribs[],
+			   const int array_of_dargs[],
+			   const int array_of_psizes[],
 			   int order,
 			   MPI_Datatype oldtype,
 			   MPI_Datatype *newtype)
Index: src/mpi/datatype/type_create_struct.c
===================================================================
--- src/mpi/datatype/type_create_struct.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_create_struct.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -53,9 +53,9 @@
 .N MPI_ERR_TYPE
 @*/
 int MPI_Type_create_struct(int count,
-			   int array_of_blocklengths[],
-			   MPI_Aint array_of_displacements[],
-			   MPI_Datatype array_of_types[],
+			   const int array_of_blocklengths[],
+			   const MPI_Aint array_of_displacements[],
+			   const MPI_Datatype array_of_types[],
 			   MPI_Datatype *newtype)
 {
     static const char FCNAME[] = "MPI_Type_create_struct";
Index: src/mpi/datatype/pack_external_size.c
===================================================================
--- src/mpi/datatype/pack_external_size.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/pack_external_size.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -51,7 +51,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_ARG
 @*/
-int MPI_Pack_external_size(char *datarep,
+int MPI_Pack_external_size(const char *datarep,
 			   int incount,
 			   MPI_Datatype datatype,
 			   MPI_Aint *size)
Index: src/mpi/datatype/type_create_subarray.c
===================================================================
--- src/mpi/datatype/type_create_subarray.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_create_subarray.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,9 +55,9 @@
 .N MPI_ERR_ARG
 @*/
 int MPI_Type_create_subarray(int ndims,
-			     int array_of_sizes[],
-			     int array_of_subsizes[],
-			     int array_of_starts[],
+			     const int array_of_sizes[],
+			     const int array_of_subsizes[],
+			     const int array_of_starts[],
 			     int order,
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
Index: src/mpi/datatype/pack.c
===================================================================
--- src/mpi/datatype/pack.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/pack.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,7 +55,7 @@
 .N Errors
 .N MPI_SUCCESS
 @*/
-int MPI_Pack(void *inbuf,
+int MPI_Pack(const void *inbuf,
 	     int incount,
 	     MPI_Datatype datatype,
 	     void *outbuf,
Index: src/mpi/datatype/unpack.c
===================================================================
--- src/mpi/datatype/unpack.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/unpack.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,7 +55,7 @@
 
 .seealso: MPI_Pack, MPI_Pack_size
 @*/
-int MPI_Unpack(void *inbuf, int insize, int *position,
+int MPI_Unpack(const void *inbuf, int insize, int *position,
 	       void *outbuf, int outcount, MPI_Datatype datatype,
 	       MPI_Comm comm)
 {
Index: src/mpi/datatype/unpack_external.c
===================================================================
--- src/mpi/datatype/unpack_external.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/unpack_external.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -54,8 +54,8 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_ARG
 @*/
-int MPI_Unpack_external(char *datarep,
-			void *inbuf,
+int MPI_Unpack_external(const char *datarep,
+			const void *inbuf,
 			MPI_Aint insize,
 			MPI_Aint *position,
 			void *outbuf,
Index: src/mpi/datatype/address.c
===================================================================
--- src/mpi/datatype/address.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/address.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -57,7 +57,7 @@
 .N MPI_SUCCESS
 .N MPI_ERR_OTHER
 @*/
-int MPI_Address(void *location, MPI_Aint *address)
+int MPI_Address(const void *location, MPI_Aint *address)
 {
     int mpi_errno = MPI_SUCCESS;
     MPID_MPI_STATE_DECL(MPID_STATE_MPI_ADDRESS);
Index: src/mpi/datatype/type_struct.c
===================================================================
--- src/mpi/datatype/type_struct.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_struct.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -95,9 +95,9 @@
 .N MPI_ERR_EXHAUSTED
 @*/
 int MPI_Type_struct(int count,
-		    int blocklens[],
-		    MPI_Aint indices[],
-		    MPI_Datatype old_types[],
+		    const int blocklens[],
+		    const MPI_Aint indices[],
+		    const MPI_Datatype old_types[],
 		    MPI_Datatype *newtype)
 {
     static const char FCNAME[] = "MPI_Type_struct";
Index: src/mpi/datatype/type_create_hindexed.c
===================================================================
--- src/mpi/datatype/type_create_hindexed.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_create_hindexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -52,8 +52,8 @@
 .N MPI_ERR_ARG
 @*/
 int MPI_Type_create_hindexed(int count,
-			     int blocklengths[],
-			     MPI_Aint displacements[],
+			     const int blocklengths[],
+			     const MPI_Aint displacements[],
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
 {
Index: src/mpi/datatype/type_create_indexed_block.c
===================================================================
--- src/mpi/datatype/type_create_indexed_block.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_create_indexed_block.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -74,7 +74,7 @@
 @*/
 int MPI_Type_create_indexed_block(int count,
 				  int blocklength,
-				  int array_of_displacements[],
+				  const int array_of_displacements[],
 				  MPI_Datatype oldtype,
 				  MPI_Datatype *newtype)
 {
Index: src/mpi/datatype/pack_external.c
===================================================================
--- src/mpi/datatype/pack_external.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/pack_external.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -55,8 +55,8 @@
 .N MPI_ERR_ARG
 .N MPI_ERR_COUNT
 @*/
-int MPI_Pack_external(char *datarep,
-		      void *inbuf,
+int MPI_Pack_external(const char *datarep,
+		      const void *inbuf,
 		      int incount,
 		      MPI_Datatype datatype,
 		      void *outbuf,
Index: src/mpi/datatype/type_indexed.c
===================================================================
--- src/mpi/datatype/type_indexed.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_indexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -74,8 +74,8 @@
 .N MPI_ERR_EXHAUSTED
 @*/
 int MPI_Type_indexed(int count,
-		     int blocklens[],
-		     int indices[],
+		     const int blocklens[],
+		     const int indices[],
 		     MPI_Datatype old_type,
 		     MPI_Datatype *newtype)
 {
Index: src/mpi/datatype/get_address.c
===================================================================
--- src/mpi/datatype/get_address.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/get_address.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -67,7 +67,7 @@
 .N MPI_SUCCESS
 .N MPI_ERR_OTHER
 @*/
-int MPI_Get_address(void *location, MPI_Aint *address)
+int MPI_Get_address(const void *location, MPI_Aint *address)
 {
     int mpi_errno = MPI_SUCCESS;
     MPID_MPI_STATE_DECL(MPID_STATE_MPI_GET_ADDRESS);
Index: src/mpi/datatype/type_hindexed.c
===================================================================
--- src/mpi/datatype/type_hindexed.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_hindexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -77,8 +77,8 @@
 .N MPI_ERR_ARG
 @*/
 int MPI_Type_hindexed(int count,
-		      int blocklens[],
-		      MPI_Aint indices[],
+		      const int blocklens[],
+		      const MPI_Aint indices[],
 		      MPI_Datatype old_type,
 		      MPI_Datatype *newtype)
 {
Index: src/mpi/datatype/type_set_name.c
===================================================================
--- src/mpi/datatype/type_set_name.c	(.../trunk)	(revision 4035)
+++ src/mpi/datatype/type_set_name.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -46,7 +46,7 @@
 .N MPI_ERR_TYPE
 .N MPI_ERR_OTHER
 @*/
-int MPI_Type_set_name(MPI_Datatype type, char *type_name)
+int MPI_Type_set_name(MPI_Datatype type, const char *type_name)
 {
     int mpi_errno = MPI_SUCCESS;
     MPID_Datatype *datatype_ptr = NULL;
Index: src/mpid/common/datatype/mpid_type_struct.c
===================================================================
--- src/mpid/common/datatype/mpid_type_struct.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/mpid_type_struct.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -14,8 +14,8 @@
 #undef MPID_STRUCT_DEBUG
 
 static int MPID_Type_struct_alignsize(int count,
-				      MPI_Datatype *oldtype_array,
-				      MPI_Aint *displacement_array);
+				      const MPI_Datatype *oldtype_array,
+				      const MPI_Aint *displacement_array);
 
 /* MPID_Type_struct_alignsize
  *
@@ -40,8 +40,8 @@
  * different rules for this case.
  */
 static int MPID_Type_struct_alignsize(int count,
-				      MPI_Datatype *oldtype_array,
-				      MPI_Aint *displacement_array)
+				      const MPI_Datatype *oldtype_array,
+				      const MPI_Aint *displacement_array)
 {
     int i, max_alignsize = 0, tmp_alignsize, derived_alignsize = 0;
 
@@ -142,9 +142,9 @@
   MPI_SUCCESS on success, MPI errno on failure.
 @*/
 int MPID_Type_struct(int count,
-		     int *blocklength_array,
-		     MPI_Aint *displacement_array,
-		     MPI_Datatype *oldtype_array,
+		     const int *blocklength_array,
+		     const MPI_Aint *displacement_array,
+		     const MPI_Datatype *oldtype_array,
 		     MPI_Datatype *newtype)
 {
     int mpi_errno = MPI_SUCCESS;
Index: src/mpid/common/datatype/mpid_datatype_contents.c
===================================================================
--- src/mpid/common/datatype/mpid_datatype_contents.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/mpid_datatype_contents.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -22,8 +22,8 @@
 			       int nr_aints,
 			       int nr_types,
 			       int array_of_ints[],
-			       MPI_Aint array_of_aints[],
-			       MPI_Datatype array_of_types[])
+			       const MPI_Aint array_of_aints[],
+			       const MPI_Datatype array_of_types[])
 {
     int i, contents_size, align_sz = 8, epsilon, mpi_errno;
     int struct_sz, ints_sz, aints_sz, types_sz;
Index: src/mpid/common/datatype/mpid_type_blockindexed.c
===================================================================
--- src/mpid/common/datatype/mpid_type_blockindexed.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/mpid_type_blockindexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,7 +32,7 @@
 
 int MPID_Type_blockindexed(int count,
 			   int blocklength,
-			   void *displacement_array,
+			   const void *displacement_array,
 			   int dispinbytes,
 			   MPI_Datatype oldtype,
 			   MPI_Datatype *newtype)
Index: src/mpid/common/datatype/dataloop/dataloop_create_blockindexed.c
===================================================================
--- src/mpid/common/datatype/dataloop/dataloop_create_blockindexed.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/dataloop/dataloop_create_blockindexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -10,7 +10,7 @@
 #include "./dataloop.h"
 
 static void DLOOP_Type_blockindexed_array_copy(DLOOP_Count count,
-					       void *disp_array,
+					       const void *disp_array,
 					       DLOOP_Offset *out_disp_array,
 					       int dispinbytes,
 					       DLOOP_Offset old_extent);
@@ -33,7 +33,7 @@
 @*/
 int PREPEND_PREFIX(Dataloop_create_blockindexed)(int icount,
 						 int iblklen,
-						 void *disp_array,
+						 const void *disp_array,
 						 int dispinbytes,
 						 DLOOP_Type oldtype,
 						 DLOOP_Dataloop **dlp_p,
@@ -249,7 +249,7 @@
  * blocks, because that would really mess up the blockindexed type!
  */
 static void DLOOP_Type_blockindexed_array_copy(DLOOP_Count count,
-					       void *in_disp_array,
+					       const void *in_disp_array,
 					       DLOOP_Offset *out_disp_array,
 					       int dispinbytes,
 					       DLOOP_Offset old_extent)
@@ -276,7 +276,7 @@
 
 DLOOP_Count PREPEND_PREFIX(Type_blockindexed_count_contig)(DLOOP_Count count,
                                                            DLOOP_Count blklen,
-                                                           void *disp_array,
+                                                           const void *disp_array,
                                                            int dispinbytes,
                                                            DLOOP_Offset old_extent)
 {
Index: src/mpid/common/datatype/dataloop/dataloop_create_indexed.c
===================================================================
--- src/mpid/common/datatype/dataloop/dataloop_create_indexed.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/dataloop/dataloop_create_indexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -11,8 +11,8 @@
 
 static void DLOOP_Type_indexed_array_copy(DLOOP_Count count,
 					  DLOOP_Count contig_count,
-					  int *input_blocklength_array,
-					  void *input_displacement_array,
+					  const int *input_blocklength_array,
+					  const void *input_displacement_array,
 					  DLOOP_Count *output_blocklength_array,
 					  DLOOP_Offset *out_disp_array,
 					  int dispinbytes,
@@ -37,8 +37,8 @@
 @*/
 
 int PREPEND_PREFIX(Dataloop_create_indexed)(int icount,
-					    int *blocklength_array,
-					    void *displacement_array,
+					    const int *blocklength_array,
+					    const void *displacement_array,
 					    int dispinbytes,
 					    MPI_Datatype oldtype,
 					    DLOOP_Dataloop **dlp_p,
@@ -289,8 +289,8 @@
  */
 static void DLOOP_Type_indexed_array_copy(DLOOP_Count count,
 					  DLOOP_Count contig_count,
-					  int *in_blklen_array,
-					  void *in_disp_array,
+					  const int *in_blklen_array,
+					  const void *in_disp_array,
 					  DLOOP_Count *out_blklen_array,
 					  DLOOP_Offset *out_disp_array,
 					  int dispinbytes,
@@ -374,8 +374,8 @@
  * Extent passed in is for the original type.
  */
 DLOOP_Count PREPEND_PREFIX(Type_indexed_count_contig)(DLOOP_Count count,
-                                                      int *blocklength_array,
-                                                      void *displacement_array,
+                                                      const int *blocklength_array,
+                                                      const void *displacement_array,
                                                       int dispinbytes,
                                                       DLOOP_Offset old_extent)
 {
Index: src/mpid/common/datatype/dataloop/dataloop_create_struct.c
===================================================================
--- src/mpid/common/datatype/dataloop/dataloop_create_struct.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/dataloop/dataloop_create_struct.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -14,7 +14,7 @@
 static int DLOOP_Dataloop_create_struct_memory_error(void);
 static int DLOOP_Dataloop_create_unique_type_struct(int count,
 						    int *blklens,
-						    MPI_Aint *disps,
+						    const MPI_Aint *disps,
 						    DLOOP_Type *oldtypes,
 						    int type_pos,
 						    DLOOP_Dataloop **dlp_p,
@@ -24,7 +24,7 @@
 static int DLOOP_Dataloop_create_basic_all_bytes_struct(
 	       int count,
 	       int *blklens,
-	       MPI_Aint *disps,
+	       const MPI_Aint *disps,
 	       DLOOP_Type *oldtypes,
 	       DLOOP_Dataloop **dlp_p,
 	       int *dlsz_p,
@@ -32,7 +32,7 @@
 	       int flag);
 static int DLOOP_Dataloop_create_flattened_struct(int count,
 						  int *blklens,
-						  MPI_Aint *disps,
+						  const MPI_Aint *disps,
 						  DLOOP_Type *oldtypes,
 						  DLOOP_Dataloop **dlp_p,
 						  int *dlsz_p,
@@ -66,7 +66,7 @@
 @*/
 int PREPEND_PREFIX(Dataloop_create_struct)(int count,
 					   int *blklens,
-					   MPI_Aint *disps,
+					   const MPI_Aint *disps,
 					   DLOOP_Type *oldtypes,
 					   DLOOP_Dataloop **dlp_p,
 					   int *dlsz_p,
@@ -408,7 +408,7 @@
 
 static int DLOOP_Dataloop_create_unique_type_struct(int count,
 						    int *blklens,
-						    MPI_Aint *disps,
+						    const MPI_Aint *disps,
 						    DLOOP_Type *oldtypes,
 						    int type_pos,
 						    DLOOP_Dataloop **dlp_p,
@@ -471,7 +471,7 @@
 static int DLOOP_Dataloop_create_basic_all_bytes_struct(
 	       int count,
 	       int *blklens,
-	       MPI_Aint *disps,
+	       const MPI_Aint *disps,
 	       DLOOP_Type *oldtypes,
 	       DLOOP_Dataloop **dlp_p,
 	       int *dlsz_p,
@@ -532,7 +532,7 @@
 
 static int DLOOP_Dataloop_create_flattened_struct(int count,
 						  int *blklens,
-						  MPI_Aint *disps,
+						  const MPI_Aint *disps,
 						  DLOOP_Type *oldtypes,
 						  DLOOP_Dataloop **dlp_p,
 						  int *dlsz_p,
Index: src/mpid/common/datatype/dataloop/dataloop_create.h
===================================================================
--- src/mpid/common/datatype/dataloop/dataloop_create.h	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/dataloop/dataloop_create.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -31,7 +31,7 @@
 					   int flag);
 int PREPEND_PREFIX(Dataloop_create_blockindexed)(int count,
 						 int blklen,
-						 void *disp_array,
+						 const void *disp_array,
 						 int dispinbytes,
 						 MPI_Datatype oldtype,
 						 DLOOP_Dataloop **dlp_p,
@@ -39,8 +39,8 @@
 						 int *dldepth_p,
 						 int flag);
 int PREPEND_PREFIX(Dataloop_create_indexed)(int count,
-					    int *blocklength_array,
-					    void *displacement_array,
+					    const int *blocklength_array,
+					    const void *displacement_array,
 					    int dispinbytes,
 					    MPI_Datatype oldtype,
 					    DLOOP_Dataloop **dlp_p,
@@ -49,7 +49,7 @@
 					    int flag);
 int PREPEND_PREFIX(Dataloop_create_struct)(int count,
 					   int *blklen_array,
-					   MPI_Aint *disp_array,
+					   const MPI_Aint *disp_array,
 					   MPI_Datatype *oldtype_array,
 					   DLOOP_Dataloop **dlp_p,
 					   int *dlsz_p,
@@ -81,14 +81,14 @@
 					MPI_Datatype *newtype);
 
 DLOOP_Count PREPEND_PREFIX(Type_indexed_count_contig)(DLOOP_Count count,
-                                                      int *blocklength_array,
-                                                      void *displacement_array,
+                                                      const int *blocklength_array,
+                                                      const void *displacement_array,
                                                       int dispinbytes,
                                                       DLOOP_Offset old_extent);
                                                      
 DLOOP_Count PREPEND_PREFIX(Type_blockindexed_count_contig)(DLOOP_Count count,
                                                            DLOOP_Count blklen,
-                                                           void *disp_array,
+                                                           const void *disp_array,
                                                            int dispinbytes,
                                                            DLOOP_Offset old_extent);
                                                           
Index: src/mpid/common/datatype/mpid_datatype.h
===================================================================
--- src/mpid/common/datatype/mpid_datatype.h	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/mpid_datatype.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -536,21 +536,21 @@
 		  MPI_Datatype *newtype);
 
 int MPID_Type_struct(int count,
-		     int *blocklength_array,
-		     MPI_Aint *displacement_array,
-		     MPI_Datatype *oldtype_array,
+		     const int *blocklength_array,
+		     const MPI_Aint *displacement_array,
+		     const MPI_Datatype *oldtype_array,
 		     MPI_Datatype *newtype);
 
 int MPID_Type_indexed(int count,
-		      int *blocklength_array,
-		      void *displacement_array,
+		      const int *blocklength_array,
+		      const void *displacement_array,
 		      int dispinbytes,
 		      MPI_Datatype oldtype,
 		      MPI_Datatype *newtype);
 
 int MPID_Type_blockindexed(int count,
 			   int blocklength,
-			   void *displacement_array,
+			   const void *displacement_array,
 			   int dispinbytes,
 			   MPI_Datatype oldtype,
 			   MPI_Datatype *newtype);
@@ -624,7 +624,7 @@
 				int *new_loop_sz_p);
 void MPID_Dataloop_dup(DLOOP_Dataloop *old_loop,
 		       int old_loop_sz,
-		       DLOOP_Dataloop **new_loop_p);
+                       DLOOP_Dataloop **new_loop_p);
 void MPID_Dataloop_free(struct MPID_Dataloop **dataloop);
 
 /* Segment functions specific to MPICH2 */
@@ -654,8 +654,8 @@
 			       int nr_aints,
 			       int nr_types,
 			       int *ints,
-			       MPI_Aint *aints,
-			       MPI_Datatype *types);
+			       const MPI_Aint *aints,
+			       const MPI_Datatype *types);
 
 void MPID_Datatype_free_contents(struct MPID_Datatype *ptr);
 void MPIDI_Datatype_get_contents_aints(MPID_Datatype_contents *cp,
Index: src/mpid/common/datatype/mpid_type_indexed.c
===================================================================
--- src/mpid/common/datatype/mpid_type_indexed.c	(.../trunk)	(revision 4035)
+++ src/mpid/common/datatype/mpid_type_indexed.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,8 +32,8 @@
 @*/
 
 int MPID_Type_indexed(int count,
-		      int *blocklength_array,
-		      void *displacement_array,
+		      const int *blocklength_array,
+		      const void *displacement_array,
 		      int dispinbytes,
 		      MPI_Datatype oldtype,
 		      MPI_Datatype *newtype)
Index: src/mpid/ch3/include/mpidrma.h
===================================================================
--- src/mpid/ch3/include/mpidrma.h	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/include/mpidrma.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -30,7 +30,7 @@
     struct MPIDI_RMA_ops *next;  /* pointer to next element in list */
     int type;  /* MPIDI_RMA_PUT, MPID_REQUEST_GET,
 		  MPIDI_RMA_ACCUMULATE, MPIDI_RMA_LOCK */
-    void *origin_addr;
+    const void *origin_addr;
     int origin_count;
     MPI_Datatype origin_datatype;
     int target_rank;
Index: src/mpid/ch3/include/mpidimpl.h
===================================================================
--- src/mpid/ch3/include/mpidimpl.h	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/include/mpidimpl.h	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -1020,7 +1020,7 @@
 int MPIDI_Comm_connect(const char *, MPID_Info *, int, MPID_Comm *, MPID_Comm **);
 int MPIDI_Comm_accept(const char *, MPID_Info *, int, MPID_Comm *, MPID_Comm **);
 
-int MPIDI_Comm_spawn_multiple(int, char **, char ***, int *, MPID_Info **, 
+int MPIDI_Comm_spawn_multiple(int, const char **, char ***, const int *, MPID_Info **, 
 			      int, MPID_Comm *, MPID_Comm **, int *);
 
 
@@ -1097,11 +1097,11 @@
 int MPIDI_Win_create(void *, MPI_Aint, int, MPID_Info *, MPID_Comm *,
                     MPID_Win ** );
 int MPIDI_Win_fence(int, MPID_Win *);
-int MPIDI_Put(void *, int, MPI_Datatype, int, MPI_Aint, int,
+int MPIDI_Put(const void *, int, MPI_Datatype, int, MPI_Aint, int,
             MPI_Datatype, MPID_Win *); 
 int MPIDI_Get(void *, int, MPI_Datatype, int, MPI_Aint, int,
             MPI_Datatype, MPID_Win *);
-int MPIDI_Accumulate(void *, int, MPI_Datatype, int, MPI_Aint, int, 
+int MPIDI_Accumulate(const void *, int, MPI_Datatype, int, MPI_Aint, int, 
 		   MPI_Datatype,  MPI_Op, MPID_Win *);
 int MPIDI_Win_free(MPID_Win **); 
 int MPIDI_Win_wait(MPID_Win *win_ptr);
Index: src/mpid/ch3/src/ch3u_comm_spawn_multiple.c
===================================================================
--- src/mpid/ch3/src/ch3u_comm_spawn_multiple.c	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/src/ch3u_comm_spawn_multiple.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -100,11 +100,11 @@
 #define FUNCNAME MPIDI_Comm_spawn_multiple
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPIDI_Comm_spawn_multiple(int count, char **commands, 
-                                  char ***argvs, int *maxprocs, 
-                                  MPID_Info **info_ptrs, int root,
-                                  MPID_Comm *comm_ptr, MPID_Comm
-                                  **intercomm, int *errcodes) 
+int MPIDI_Comm_spawn_multiple(int count, const char **commands, 
+                              char ***argvs, const int *maxprocs, 
+                              MPID_Info **info_ptrs, int root,
+                              MPID_Comm *comm_ptr, MPID_Comm
+                              **intercomm, int *errcodes) 
 {
     char port_name[MPI_MAX_PORT_NAME];
     int *info_keyval_sizes=0, i, mpi_errno=MPI_SUCCESS;
Index: src/mpid/ch3/src/mpid_port.c
===================================================================
--- src/mpid/ch3/src/mpid_port.c	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/src/mpid_port.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -128,7 +128,7 @@
 #define FUNCNAME MPID_Comm_accept
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPID_Comm_accept(char * port_name, MPID_Info * info, int root, 
+int MPID_Comm_accept(const char * port_name, MPID_Info * info, int root, 
 		     MPID_Comm * comm, MPID_Comm ** newcomm_ptr)
 {
     int mpi_errno = MPI_SUCCESS;
Index: src/mpid/ch3/src/ch3u_rma_sync.c
===================================================================
--- src/mpid/ch3/src/ch3u_rma_sync.c	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/src/ch3u_rma_sync.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -685,7 +685,7 @@
 
     MPIU_Object_set_ref(req, 2);
 
-    req->dev.user_buf = rma_op->origin_addr;
+    req->dev.user_buf = (void *) rma_op->origin_addr;
     req->dev.user_count = rma_op->origin_count;
     req->dev.datatype = rma_op->origin_datatype;
     req->dev.target_win_handle = MPI_WIN_NULL;
@@ -2006,7 +2006,7 @@
 
     MPIU_Object_set_ref(rreq, 2);
 
-    rreq->dev.user_buf = rma_op->origin_addr;
+    rreq->dev.user_buf = (void *) rma_op->origin_addr;
     rreq->dev.user_count = rma_op->origin_count;
     rreq->dev.datatype = rma_op->origin_datatype;
     rreq->dev.target_win_handle = MPI_WIN_NULL;
Index: src/mpid/ch3/src/ch3u_rma_ops.c
===================================================================
--- src/mpid/ch3/src/ch3u_rma_ops.c	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/src/ch3u_rma_ops.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -191,7 +191,7 @@
 #define FUNCNAME MPIDI_Put
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPIDI_Put(void *origin_addr, int origin_count, MPI_Datatype
+int MPIDI_Put(const void *origin_addr, int origin_count, MPI_Datatype
             origin_datatype, int target_rank, MPI_Aint target_disp,
             int target_count, MPI_Datatype target_datatype, MPID_Win *win_ptr)
 {
@@ -399,7 +399,7 @@
 #define FUNCNAME MPIDI_Accumulate
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPIDI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype
+int MPIDI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype
                     origin_datatype, int target_rank, MPI_Aint target_disp,
                     int target_count, MPI_Datatype target_datatype, MPI_Op op,
                     MPID_Win *win_ptr)
@@ -462,7 +462,7 @@
 	
 	if (origin_predefined && target_predefined)
 	{    
-	    (*uop)(origin_addr, (char *) win_ptr->base + win_ptr->disp_unit *
+	    (*uop)((void *) origin_addr, (char *) win_ptr->base + win_ptr->disp_unit *
 		   target_disp, &target_count, &target_datatype);
 	}
 	else
@@ -525,7 +525,7 @@
 		
 		MPID_Segment_pack_vector(segp, first, &last, dloop_vec, &vec_len);
 		
-		source_buf = (tmp_buf != NULL) ? tmp_buf : origin_addr;
+		source_buf = tmp_buf ? tmp_buf : (void *) origin_addr;
 		target_buf = (char *) win_ptr->base + 
 		    win_ptr->disp_unit * target_disp;
 		type = dtp->eltype;
Index: src/mpid/ch3/src/mpid_comm_spawn_multiple.c
===================================================================
--- src/mpid/ch3/src/mpid_comm_spawn_multiple.c	(.../trunk)	(revision 4035)
+++ src/mpid/ch3/src/mpid_comm_spawn_multiple.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -32,8 +32,8 @@
 #define FUNCNAME MPID_Comm_spawn_multiple
 #undef FCNAME
 #define FCNAME MPIDI_QUOTE(FUNCNAME)
-int MPID_Comm_spawn_multiple(int count, char *array_of_commands[], 
-			     char ** array_of_argv[], int array_of_maxprocs[],
+int MPID_Comm_spawn_multiple(int count, const char *array_of_commands[], 
+			     char ** array_of_argv[], const int array_of_maxprocs[],
 			     MPID_Info * array_of_info_ptrs[], int root, 
 			     MPID_Comm * comm_ptr, MPID_Comm ** intercomm,
 			     int array_of_errcodes[]) 
Index: src/binding/cxx/buildiface
===================================================================
--- src/binding/cxx/buildiface	(.../trunk)	(revision 4035)
+++ src/binding/cxx/buildiface	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -1380,7 +1380,7 @@
 
 // MPICH_DONT_INCLUDE_STDIO_H is another escape hatch for us, just like
 // MPICH_IGNORE_CXX_SEEK.  If we encounter a wacky environment or user in the
-// wild that doesn't want our workaround and/or the stdio.h header, then we can
+// wild that does not want our workaround and/or the stdio.h header, then we can
 // offer them a way out.
 #ifndef MPICH_DONT_INCLUDE_STDIO_H
 // ensure that we have SEEK_* defined
@@ -3171,6 +3171,14 @@
     #$mpi_routine{name} = args;
     while (<FD>) {
 	if (/\/\*\s*End Prototypes/ ) { last; }
+	$origline = $_;
+	while (/(.*)\/\*(.*?)\*\/(.*)/) {
+	    my $removed = $2;
+	    $_ = $1.$3;
+	    if ($2 =~ /\/\*/) {
+		print STDERR "Error in processing comment within interface file $filename in line $origline";
+	    }
+	}
 	if (/^int\s+MPI_([A-Z][a-z0-9_]*)\s*\((.*)/) {
 	    $routine_name = $1;
 	    $args = $2;
@@ -3934,7 +3942,15 @@
 	print $OUTFD "const $name v$count$array";
     }
     else {
-	print $OUTFD "const $lparm v$count";
+	# Only add if a const is not already present
+	if ($lparm =~ /^\s*const/) {
+	    # No need to add const
+	    print $OUTFD "$lparm v$count";
+	}
+	else {
+	    print $OUTFD "const $lparm v$count";
+	    print "const added to $lparm, argument $count for $routine(class $class)\n" if $debug;
+	}
     }
 }
 # We have to explicitly remove the cast
Index: src/binding/f77/buildiface
===================================================================
--- src/binding/f77/buildiface	(.../trunk)	(revision 4035)
+++ src/binding/f77/buildiface	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -3066,7 +3066,7 @@
 #undef FUNCNAME
 #define FUNCNAME MPI_Status_f2c
 
-int MPI_Status_f2c( MPI_Fint *f_status, MPI_Status *c_status )
+int MPI_Status_f2c( const MPI_Fint *f_status, MPI_Status *c_status )
 {
     int mpi_errno = MPI_SUCCESS;
     /* This code assumes that the ints are the same size */\n";
@@ -3125,7 +3125,7 @@
 #undef FUNCNAME
 #define FUNCNAME MPI_Status_c2f
 
-int MPI_Status_c2f( MPI_Status *c_status, MPI_Fint *f_status )
+int MPI_Status_c2f( const MPI_Status *c_status, MPI_Fint *f_status )
 {
     int mpi_errno = MPI_SUCCESS;
     /* This code assumes that the ints are the same size */
@@ -3228,8 +3228,15 @@
 		&SkipCPPIfdef( FD );
 	    }
 	}
-	# Remove any comments
-	s/\/\*.*\*\///g;
+	# Remove any comments; check for problems
+	$origline = $_;
+	while (/(.*)\/\*(.*?)\*\/(.*)/) {
+	    my $removed = $2;
+	    $_ = $1.$3;
+	    if ($2 =~ /\/\*/) {
+		print STDERR "Error in processing comment within interface file $prototype_file in line $origline";
+	    }
+	}
 
 	if (/^int\s+$routine_prefix($routine_pattern)\s*\((.*)/) {
 	    $routine_name = $1;
@@ -3367,8 +3374,15 @@
     # First, find the values that we need
     while (<MPIFD>) {
 	$linecount++;
-	# Remove any comments
-	s/\/\*.*\*\///g;
+	# Remove any comments; check for problems
+	$origline = $_;
+	while (/(.*)\/\*(.*?)\*\/(.*)/) {
+	    my $removed = $2;
+	    $_ = $1.$3;
+	    if ($2 =~ /\/\*/) {
+		print STDERR "Error in processing comment within interface file $prototype_file in line $origline";
+	    }
+	}
 
 	# We should also skip #ifndef xxx, for some xxx.  
 	if (/^#\s*ifndef\s+(\w*)/) {
Index: src/binding/f90/binding.sub
===================================================================
--- src/binding/f90/binding.sub	(.../trunk)	(revision 4035)
+++ src/binding/f90/binding.sub	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -28,7 +28,14 @@
     # Read each one
     while (<FD>) {
 	# Remove any comments
-	s/\/\*.*\*\///g;
+	$origline = $_;
+	while (/(.*)\/\*(.*?)\*\/(.*)/) {
+	    my $removed = $2;
+	    $_ = $1.$3;
+	    if ($2 =~ /\/\*/) {
+		print STDERR "Error in processing comment within interface file $prototype_file in line $origline";
+	    }
+	}
 	print $_ if $debug;
 	if (/\/\*\s*End Prototypes/) { last; }
 	if (/^int\s+$routine_prefix($routine_pattern)\s*\((.*)/) {
Index: src/util/multichannel/mpi.c
===================================================================
--- src/util/multichannel/mpi.c	(.../trunk)	(revision 4035)
+++ src/util/multichannel/mpi.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -90,9 +90,9 @@
     MPI_Op (*MPI_Op_f2c)(MPI_Fint);
     MPI_Request (*MPI_Request_f2c)(MPI_Fint);
     MPI_Win (*MPI_Win_f2c)(MPI_Fint);
-    int (*MPI_File_open)(MPI_Comm, char *, int, MPI_Info, MPI_File *);
+    int (*MPI_File_open)(MPI_Comm, const char *, int, MPI_Info, MPI_File *);
     int (*MPI_File_close)(MPI_File *);
-    int (*MPI_File_delete)(char *, MPI_Info);
+    int (*MPI_File_delete)(const char *, MPI_Info);
     int (*MPI_File_set_size)(MPI_File, MPI_Offset);
     int (*MPI_File_preallocate)(MPI_File, MPI_Offset);
     int (*MPI_File_get_size)(MPI_File, MPI_Offset *);
@@ -100,60 +100,60 @@
     int (*MPI_File_get_amode)(MPI_File, int *);
     int (*MPI_File_set_info)(MPI_File, MPI_Info);
     int (*MPI_File_get_info)(MPI_File, MPI_Info *);
-    int (*MPI_File_set_view)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, char *, MPI_Info);
+    int (*MPI_File_set_view)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info);
     int (*MPI_File_get_view)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *);
     int (*MPI_File_read_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
     int (*MPI_File_read_at_all)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
-    int (*MPI_File_write_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
-    int (*MPI_File_write_at_all)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write_at)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write_at_all)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *);
     int (*MPI_File_iread_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *);
-    int (*MPI_File_iwrite_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*MPI_File_iwrite_at)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*MPI_File_read)(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
     int (*MPI_File_read_all)(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
-    int (*MPI_File_write)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*MPI_File_write_all)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write_all)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*MPI_File_iread)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *); 
-    int (*MPI_File_iwrite)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*MPI_File_iwrite)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*MPI_File_seek)(MPI_File, MPI_Offset, int);
     int (*MPI_File_get_position)(MPI_File, MPI_Offset *);
     int (*MPI_File_get_byte_offset)(MPI_File, MPI_Offset, MPI_Offset *);
     int (*MPI_File_read_shared)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*MPI_File_write_shared)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write_shared)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*MPI_File_iread_shared)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
-    int (*MPI_File_iwrite_shared)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*MPI_File_iwrite_shared)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*MPI_File_read_ordered)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*MPI_File_write_ordered)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*MPI_File_write_ordered)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*MPI_File_seek_shared)(MPI_File, MPI_Offset, int);
     int (*MPI_File_get_position_shared)(MPI_File, MPI_Offset *);
     int (*MPI_File_read_at_all_begin)(MPI_File, MPI_Offset, void *, int, MPI_Datatype);
     int (*MPI_File_read_at_all_end)(MPI_File, void *, MPI_Status *);
-    int (*MPI_File_write_at_all_begin)(MPI_File, MPI_Offset, void *, int, MPI_Datatype);
-    int (*MPI_File_write_at_all_end)(MPI_File, void *, MPI_Status *);
+    int (*MPI_File_write_at_all_begin)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype);
+    int (*MPI_File_write_at_all_end)(MPI_File, const void *, MPI_Status *);
     int (*MPI_File_read_all_begin)(MPI_File, void *, int, MPI_Datatype);
     int (*MPI_File_read_all_end)(MPI_File, void *, MPI_Status *);
-    int (*MPI_File_write_all_begin)(MPI_File, void *, int, MPI_Datatype);
-    int (*MPI_File_write_all_end)(MPI_File, void *, MPI_Status *);
+    int (*MPI_File_write_all_begin)(MPI_File, const void *, int, MPI_Datatype);
+    int (*MPI_File_write_all_end)(MPI_File, const void *, MPI_Status *);
     int (*MPI_File_read_ordered_begin)(MPI_File, void *, int, MPI_Datatype);
     int (*MPI_File_read_ordered_end)(MPI_File, void *, MPI_Status *);
-    int (*MPI_File_write_ordered_begin)(MPI_File, void *, int, MPI_Datatype);
-    int (*MPI_File_write_ordered_end)(MPI_File, void *, MPI_Status *);
+    int (*MPI_File_write_ordered_begin)(MPI_File, const void *, int, MPI_Datatype);
+    int (*MPI_File_write_ordered_end)(MPI_File, const void *, MPI_Status *);
     int (*MPI_File_get_type_extent)(MPI_File, MPI_Datatype, MPI_Aint *);
-    int (*MPI_Register_datarep)(char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *);
+    int (*MPI_Register_datarep)(const char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *);
     int (*MPI_File_set_atomicity)(MPI_File, int);
     int (*MPI_File_get_atomicity)(MPI_File, int *);
     int (*MPI_File_sync)(MPI_File);
-    int (*MPI_Send)(void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*MPI_Send)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
     int (*MPI_Recv)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
     int (*MPI_Get_count)(MPI_Status *, MPI_Datatype, int *);
-    int (*MPI_Bsend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
-    int (*MPI_Ssend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
-    int (*MPI_Rsend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*MPI_Bsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*MPI_Ssend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*MPI_Rsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
     int (*MPI_Buffer_attach)( void*, int);
     int (*MPI_Buffer_detach)( void*, int *);
-    int (*MPI_Isend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*MPI_Ibsend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*MPI_Issend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*MPI_Irsend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*MPI_Isend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*MPI_Ibsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*MPI_Issend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*MPI_Irsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*MPI_Irecv)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*MPI_Wait)(MPI_Request *, MPI_Status *);
     int (*MPI_Test)(MPI_Request *, int *, MPI_Status *);
@@ -167,23 +167,23 @@
     int (*MPI_Iprobe)(int, int, MPI_Comm, int *, MPI_Status *);
     int (*MPI_Probe)(int, int, MPI_Comm, MPI_Status *);
     int (*MPI_Cancel)(MPI_Request *);
-    int (*MPI_Test_cancelled)(MPI_Status *, int *);
-    int (*MPI_Send_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*MPI_Bsend_init)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
-    int (*MPI_Ssend_init)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
-    int (*MPI_Rsend_init)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+    int (*MPI_Test_cancelled)(const MPI_Status *, int *);
+    int (*MPI_Send_init)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*MPI_Bsend_init)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+    int (*MPI_Ssend_init)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
+    int (*MPI_Rsend_init)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
     int (*MPI_Recv_init)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *);
     int (*MPI_Start)(MPI_Request *);
     int (*MPI_Startall)(int, MPI_Request *);
-    int (*MPI_Sendrecv)(void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
+    int (*MPI_Sendrecv)(const void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
     int (*MPI_Sendrecv_replace)(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *);
     int (*MPI_Type_contiguous)(int, MPI_Datatype, MPI_Datatype *);
     int (*MPI_Type_vector)(int, int, int, MPI_Datatype, MPI_Datatype *);
     int (*MPI_Type_hvector)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-    int (*MPI_Type_indexed)(int, int *, int *, MPI_Datatype, MPI_Datatype *);
-    int (*MPI_Type_hindexed)(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *);
-    int (*MPI_Type_struct)(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *);
-    int (*MPI_Address)(void*, MPI_Aint *);
+    int (*MPI_Type_indexed)(int, const int*, const int*, MPI_Datatype, MPI_Datatype*);
+    int (*MPI_Type_hindexed)(int, const int*, const MPI_Aint*, MPI_Datatype, MPI_Datatype*);
+    int (*MPI_Type_struct)(int, const int*, const MPI_Aint*, const MPI_Datatype*, MPI_Datatype*);
+    int (*MPI_Address)(const void*, MPI_Aint *);
     int (*MPI_Type_extent)(MPI_Datatype, MPI_Aint *);
     int (*MPI_Type_size)(MPI_Datatype, int *);
     int (*MPI_Type_lb)(MPI_Datatype, MPI_Aint *);
@@ -191,35 +191,35 @@
     int (*MPI_Type_commit)(MPI_Datatype *);
     int (*MPI_Type_free)(MPI_Datatype *);
     int (*MPI_Get_elements)(MPI_Status *, MPI_Datatype, int *);
-    int (*MPI_Pack)(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
-    int (*MPI_Unpack)(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
+    int (*MPI_Pack)(const void*, int, MPI_Datatype, void*, int, int*,  MPI_Comm);
+    int (*MPI_Unpack)(const void*, int, int*, void*, int, MPI_Datatype, MPI_Comm);
     int (*MPI_Pack_size)(int, MPI_Datatype, MPI_Comm, int *);
     int (*MPI_Barrier)(MPI_Comm );
     int (*MPI_Bcast)(void*, int, MPI_Datatype, int, MPI_Comm );
-    int (*MPI_Gather)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
-    int (*MPI_Gatherv)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm); 
-    int (*MPI_Scatter)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-    int (*MPI_Scatterv)(void* , int *, int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-    int (*MPI_Allgather)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-    int (*MPI_Allgatherv)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-    int (*MPI_Alltoall)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-    int (*MPI_Alltoallv)(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-    int (*MPI_Reduce)(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
+    int (*MPI_Gather)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
+    int (*MPI_Gatherv)(const void* , int, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, int, MPI_Comm);
+    int (*MPI_Scatter)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+    int (*MPI_Scatterv)(const void* , const int*, const int*,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+    int (*MPI_Allgather)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+    int (*MPI_Allgatherv)(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+    int (*MPI_Alltoall)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+    int (*MPI_Alltoallv)(const void* , const int*, const int*, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, MPI_Comm);
+    int (*MPI_Reduce)(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
     int (*MPI_Op_create)(MPI_User_function *, int, MPI_Op *);
     int (*MPI_Op_free)( MPI_Op *);
-    int (*MPI_Allreduce)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
-    int (*MPI_Reduce_scatter)(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm);
-    int (*MPI_Scan)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
+    int (*MPI_Allreduce)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
+    int (*MPI_Reduce_scatter)(const void* , void*, const int*, MPI_Datatype, MPI_Op, MPI_Comm);
+    int (*MPI_Scan)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
     int (*MPI_Group_size)(MPI_Group, int *);
     int (*MPI_Group_rank)(MPI_Group, int *);
-    int (*MPI_Group_translate_ranks )(MPI_Group, int, int *, MPI_Group, int *);
+    int (*MPI_Group_translate_ranks )(MPI_Group, int, const int *, MPI_Group, int *);
     int (*MPI_Group_compare)(MPI_Group, MPI_Group, int *);
     int (*MPI_Comm_group)(MPI_Comm, MPI_Group *);
     int (*MPI_Group_union)(MPI_Group, MPI_Group, MPI_Group *);
     int (*MPI_Group_intersection)(MPI_Group, MPI_Group, MPI_Group *);
     int (*MPI_Group_difference)(MPI_Group, MPI_Group, MPI_Group *);
-    int (*MPI_Group_incl)(MPI_Group, int, int *, MPI_Group *);
-    int (*MPI_Group_excl)(MPI_Group, int, int *, MPI_Group *);
+    int (*MPI_Group_incl)(MPI_Group, int, const int*, MPI_Group*);
+    int (*MPI_Group_excl)(MPI_Group, int, const int*, MPI_Group*);
     int (*MPI_Group_range_incl)(MPI_Group, int, int [][3], MPI_Group *);
     int (*MPI_Group_range_excl)(MPI_Group, int, int [][3], MPI_Group *);
     int (*MPI_Group_free)(MPI_Group *);
@@ -241,21 +241,21 @@
     int (*MPI_Attr_get)(MPI_Comm, int, void *, int *);
     int (*MPI_Attr_delete)(MPI_Comm, int);
     int (*MPI_Topo_test)(MPI_Comm, int *);
-    int (*MPI_Cart_create)(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+    int (*MPI_Cart_create)(MPI_Comm, int, const int*, const int*, int, MPI_Comm*);
     int (*MPI_Dims_create)(int, int, int *);
-    int (*MPI_Graph_create)(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+    int (*MPI_Graph_create)(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
     int (*MPI_Graphdims_get)(MPI_Comm, int *, int *);
     int (*MPI_Graph_get)(MPI_Comm, int, int, int *, int *);
     int (*MPI_Cartdim_get)(MPI_Comm, int *);
     int (*MPI_Cart_get)(MPI_Comm, int, int *, int *, int *);
-    int (*MPI_Cart_rank)(MPI_Comm, int *, int *);
+    int (*MPI_Cart_rank)(MPI_Comm, const int *, int *);
     int (*MPI_Cart_coords)(MPI_Comm, int, int, int *);
     int (*MPI_Graph_neighbors_count)(MPI_Comm, int, int *);
     int (*MPI_Graph_neighbors)(MPI_Comm, int, int, int *);
     int (*MPI_Cart_shift)(MPI_Comm, int, int, int *, int *);
-    int (*MPI_Cart_sub)(MPI_Comm, int *, MPI_Comm *);
-    int (*MPI_Cart_map)(MPI_Comm, int, int *, int *, int *);
-    int (*MPI_Graph_map)(MPI_Comm, int, int *, int *, int *);
+    int (*MPI_Cart_sub)(MPI_Comm, const int *, MPI_Comm *);
+    int (*MPI_Cart_map)(MPI_Comm, int, const int*, const int*, int*);
+    int (*MPI_Graph_map)(MPI_Comm, int, const int *, const int *, int *);
     int (*MPI_Get_processor_name)(char *, int *);
     int (*MPI_Get_version)(int *, int *);
     int (*MPI_Errhandler_create)(MPI_Handler_function *, MPI_Errhandler *);
@@ -272,21 +272,21 @@
     int (*MPI_Abort)(MPI_Comm, int);
     int (*MPI_Pcontrol)(const int, ...);
     int (*MPI_DUP_FN )( MPI_Comm, int, void *, void *, void *, int * );
-    int (*MPI_Close_port)(char *);
-    int (*MPI_Comm_accept)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
-    int (*MPI_Comm_connect)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+    int (*MPI_Close_port)(const char *);
+    int (*MPI_Comm_accept)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+    int (*MPI_Comm_connect)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
     int (*MPI_Comm_disconnect)(MPI_Comm *);
     int (*MPI_Comm_get_parent)(MPI_Comm *);
     int (*MPI_Comm_join)(int, MPI_Comm *);
-    int (*MPI_Comm_spawn)(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []);
-    int (*MPI_Comm_spawn_multiple)(int, char *[], char **[], int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
-    int (*MPI_Lookup_name)(char *, MPI_Info, char *);
+    int (*MPI_Comm_spawn)(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []);
+    int (*MPI_Comm_spawn_multiple)(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
+    int (*MPI_Lookup_name)(const char *, MPI_Info, char *);
     int (*MPI_Open_port)(MPI_Info, char *);
-    int (*MPI_Publish_name)(char *, MPI_Info, char *);
-    int (*MPI_Unpublish_name)(char *, MPI_Info, char *);
-    int (*MPI_Accumulate)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win);
+    int (*MPI_Publish_name)(const char *, MPI_Info, const char *);
+    int (*MPI_Unpublish_name)(const char *, MPI_Info, const char *);
+    int (*MPI_Accumulate)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win);
     int (*MPI_Get)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
-    int (*MPI_Put)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
+    int (*MPI_Put)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
     int (*MPI_Win_complete)(MPI_Win);
     int (*MPI_Win_create)(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *);
     int (*MPI_Win_fence)(int, MPI_Win);
@@ -298,11 +298,11 @@
     int (*MPI_Win_test)(MPI_Win, int *);
     int (*MPI_Win_unlock)(int, MPI_Win);
     int (*MPI_Win_wait)(MPI_Win);
-    int (*MPI_Alltoallw)(void *, int [], int [], MPI_Datatype [], void *, int [], int [], MPI_Datatype [], MPI_Comm);
-    int (*MPI_Exscan)(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm);
+    int (*MPI_Alltoallw)(const void*, const int [], const int [], const MPI_Datatype [], void*, const int [], const int [], const MPI_Datatype [], MPI_Comm);
+    int (*MPI_Exscan)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm);
     int (*MPI_Add_error_class)(int *);
     int (*MPI_Add_error_code)(int, int *);
-    int (*MPI_Add_error_string)(int, char *);
+    int (*MPI_Add_error_string)(int, const char *);
     int (*MPI_Comm_call_errhandler)(MPI_Comm, int);
     int (*MPI_Comm_create_keyval)(MPI_Comm_copy_attr_function *, MPI_Comm_delete_attr_function *, int *, void *);
     int (*MPI_Comm_delete_attr)(MPI_Comm, int);
@@ -310,7 +310,7 @@
     int (*MPI_Comm_get_attr)(MPI_Comm, int, void *, int *);
     int (*MPI_Comm_get_name)(MPI_Comm, char *, int *);
     int (*MPI_Comm_set_attr)(MPI_Comm, int, void *);
-    int (*MPI_Comm_set_name)(MPI_Comm, char *);
+    int (*MPI_Comm_set_name)(MPI_Comm, const char *);
     int (*MPI_File_call_errhandler)(MPI_File, int);
     int (*MPI_Grequest_complete)(MPI_Request);
     int (*MPI_Grequest_start)(MPI_Grequest_query_function *, MPI_Grequest_free_function *, MPI_Grequest_cancel_function *, void *, MPI_Request *);
@@ -328,7 +328,7 @@
     int (*MPI_Type_get_envelope)(MPI_Datatype, int *, int *, int *, int *);
     int (*MPI_Type_get_name)(MPI_Datatype, char *, int *);
     int (*MPI_Type_set_attr)(MPI_Datatype, int, void *);
-    int (*MPI_Type_set_name)(MPI_Datatype, char *);
+    int (*MPI_Type_set_name)(MPI_Datatype, const char *);
     int (*MPI_Type_match_size)( int, int, MPI_Datatype *);
     int (*MPI_Win_call_errhandler)(MPI_Win, int);
     int (*MPI_Win_create_keyval)(MPI_Win_copy_attr_function *, MPI_Win_delete_attr_function *, int *, void *);
@@ -337,7 +337,7 @@
     int (*MPI_Win_get_attr)(MPI_Win, int, void *, int *);
     int (*MPI_Win_get_name)(MPI_Win, char *, int *);
     int (*MPI_Win_set_attr)(MPI_Win, int, void *);
-    int (*MPI_Win_set_name)(MPI_Win, char *);
+    int (*MPI_Win_set_name)(MPI_Win, const char *);
     int (*MPI_Alloc_mem)(MPI_Aint, MPI_Info info, void *baseptr);
     int (*MPI_Comm_create_errhandler)(MPI_Comm_errhandler_fn *, MPI_Errhandler *);
     int (*MPI_Comm_get_errhandler)(MPI_Comm, MPI_Errhandler *);
@@ -347,31 +347,31 @@
     int (*MPI_File_set_errhandler)(MPI_File, MPI_Errhandler);
     int (*MPI_Finalized)(int *);
     int (*MPI_Free_mem)(void *);
-    int (*MPI_Get_address)(void *, MPI_Aint *);
+    int (*MPI_Get_address)(const void *, MPI_Aint *);
     int (*MPI_Info_create)(MPI_Info *);
-    int (*MPI_Info_delete)(MPI_Info, char *);
+    int (*MPI_Info_delete)(MPI_Info, const char *);
     int (*MPI_Info_dup)(MPI_Info, MPI_Info *);
     int (*MPI_Info_free)(MPI_Info *info);
-    int (*MPI_Info_get)(MPI_Info, char *, int, char *, int *);
+    int (*MPI_Info_get)(MPI_Info, const char *, int, char *, int *);
     int (*MPI_Info_get_nkeys)(MPI_Info, int *);
     int (*MPI_Info_get_nthkey)(MPI_Info, int, char *);
-    int (*MPI_Info_get_valuelen)(MPI_Info, char *, int *, int *);
-    int (*MPI_Info_set)(MPI_Info, char *, char *);
-    int (*MPI_Pack_external)(char *, void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *); 
-    int (*MPI_Pack_external_size)(char *, int, MPI_Datatype, MPI_Aint *); 
+    int (*MPI_Info_get_valuelen)(MPI_Info, const char *, int *, int *);
+    int (*MPI_Info_set)(MPI_Info, const char *, const char *);
+    int (*MPI_Pack_external)(const char*, const void*, int, MPI_Datatype, void*, MPI_Aint, MPI_Aint*);
+    int (*MPI_Pack_external_size)(const char*, int, MPI_Datatype, MPI_Aint*); 
     int (*MPI_Request_get_status)(MPI_Request, int *, MPI_Status *);
-    int (*MPI_Status_c2f)(MPI_Status *, MPI_Fint *);
-    int (*MPI_Status_f2c)(MPI_Fint *, MPI_Status *);
-    int (*MPI_Type_create_darray)(int, int, int, int [], int [], int [], int [], int, MPI_Datatype, MPI_Datatype *);
-    int (*MPI_Type_create_hindexed)(int, int [], MPI_Aint [], MPI_Datatype, MPI_Datatype *);
+    int (*MPI_Status_c2f)(const MPI_Status *, MPI_Fint *);
+    int (*MPI_Status_f2c)(const MPI_Fint *, MPI_Status *);
+    int (*MPI_Type_create_darray)(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*);
+    int (*MPI_Type_create_hindexed)(int, const int [], const MPI_Aint [], MPI_Datatype, MPI_Datatype*);
     int (*MPI_Type_create_hvector)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-    int (*MPI_Type_create_indexed_block)(int, int, int [], MPI_Datatype, MPI_Datatype *);
+    int (*MPI_Type_create_indexed_block)(int, int, const int [], MPI_Datatype, MPI_Datatype*);
     int (*MPI_Type_create_resized)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *);
-    int (*MPI_Type_create_struct)(int, int [], MPI_Aint [], MPI_Datatype [], MPI_Datatype *);
-    int (*MPI_Type_create_subarray)(int, int [], int [], int [], int, MPI_Datatype, MPI_Datatype *);
+    int (*MPI_Type_create_struct)(int, const int [], const MPI_Aint [], const MPI_Datatype [], MPI_Datatype*);
+    int (*MPI_Type_create_subarray)(int, const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*);
     int (*MPI_Type_get_extent)(MPI_Datatype, MPI_Aint *, MPI_Aint *);
     int (*MPI_Type_get_true_extent)(MPI_Datatype, MPI_Aint *, MPI_Aint *);
-    int (*MPI_Unpack_external)(char *, void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype); 
+    int (*MPI_Unpack_external)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype); 
     int (*MPI_Win_create_errhandler)(MPI_Win_errhandler_fn *, MPI_Errhandler *);
     int (*MPI_Win_get_errhandler)(MPI_Win, MPI_Errhandler *);
     int (*MPI_Win_set_errhandler)(MPI_Win, MPI_Errhandler);
@@ -395,9 +395,9 @@
     MPI_Op (*PMPI_Op_f2c)(MPI_Fint);
     MPI_Request (*PMPI_Request_f2c)(MPI_Fint);
     MPI_Win (*PMPI_Win_f2c)(MPI_Fint);
-    int (*PMPI_File_open)(MPI_Comm, char *, int, MPI_Info, MPI_File *);
+    int (*PMPI_File_open)(MPI_Comm, const char *, int, MPI_Info, MPI_File *);
     int (*PMPI_File_close)(MPI_File *);
-    int (*PMPI_File_delete)(char *, MPI_Info);
+    int (*PMPI_File_delete)(const char *, MPI_Info);
     int (*PMPI_File_set_size)(MPI_File, MPI_Offset);
     int (*PMPI_File_preallocate)(MPI_File, MPI_Offset);
     int (*PMPI_File_get_size)(MPI_File, MPI_Offset *);
@@ -405,60 +405,60 @@
     int (*PMPI_File_get_amode)(MPI_File, int *);
     int (*PMPI_File_set_info)(MPI_File, MPI_Info);
     int (*PMPI_File_get_info)(MPI_File, MPI_Info *);
-    int (*PMPI_File_set_view)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, char *, MPI_Info);
+    int (*PMPI_File_set_view)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info);
     int (*PMPI_File_get_view)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *);
     int (*PMPI_File_read_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
     int (*PMPI_File_read_at_all)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
-    int (*PMPI_File_write_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
-    int (*PMPI_File_write_at_all)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write_at)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write_at_all)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *);
     int (*PMPI_File_iread_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *);
-    int (*PMPI_File_iwrite_at)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*PMPI_File_iwrite_at)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*PMPI_File_read)(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
     int (*PMPI_File_read_all)(MPI_File, void *, int, MPI_Datatype, MPI_Status *); 
-    int (*PMPI_File_write)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*PMPI_File_write_all)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write_all)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*PMPI_File_iread)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *); 
-    int (*PMPI_File_iwrite)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*PMPI_File_iwrite)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*PMPI_File_seek)(MPI_File, MPI_Offset, int);
     int (*PMPI_File_get_position)(MPI_File, MPI_Offset *);
     int (*PMPI_File_get_byte_offset)(MPI_File, MPI_Offset, MPI_Offset *);
     int (*PMPI_File_read_shared)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*PMPI_File_write_shared)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write_shared)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*PMPI_File_iread_shared)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
-    int (*PMPI_File_iwrite_shared)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *);
+    int (*PMPI_File_iwrite_shared)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *);
     int (*PMPI_File_read_ordered)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
-    int (*PMPI_File_write_ordered)(MPI_File, void *, int, MPI_Datatype, MPI_Status *);
+    int (*PMPI_File_write_ordered)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *);
     int (*PMPI_File_seek_shared)(MPI_File, MPI_Offset, int);
     int (*PMPI_File_get_position_shared)(MPI_File, MPI_Offset *);
     int (*PMPI_File_read_at_all_begin)(MPI_File, MPI_Offset, void *, int, MPI_Datatype);
     int (*PMPI_File_read_at_all_end)(MPI_File, void *, MPI_Status *);
-    int (*PMPI_File_write_at_all_begin)(MPI_File, MPI_Offset, void *, int, MPI_Datatype);
-    int (*PMPI_File_write_at_all_end)(MPI_File, void *, MPI_Status *);
+    int (*PMPI_File_write_at_all_begin)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype);
+    int (*PMPI_File_write_at_all_end)(MPI_File, const void *, MPI_Status *);
     int (*PMPI_File_read_all_begin)(MPI_File, void *, int, MPI_Datatype);
     int (*PMPI_File_read_all_end)(MPI_File, void *, MPI_Status *);
-    int (*PMPI_File_write_all_begin)(MPI_File, void *, int, MPI_Datatype);
-    int (*PMPI_File_write_all_end)(MPI_File, void *, MPI_Status *);
+    int (*PMPI_File_write_all_begin)(MPI_File, const void *, int, MPI_Datatype);
+    int (*PMPI_File_write_all_end)(MPI_File, const void *, MPI_Status *);
     int (*PMPI_File_read_ordered_begin)(MPI_File, void *, int, MPI_Datatype);
     int (*PMPI_File_read_ordered_end)(MPI_File, void *, MPI_Status *);
-    int (*PMPI_File_write_ordered_begin)(MPI_File, void *, int, MPI_Datatype);
-    int (*PMPI_File_write_ordered_end)(MPI_File, void *, MPI_Status *);
+    int (*PMPI_File_write_ordered_begin)(MPI_File, const void *, int, MPI_Datatype);
+    int (*PMPI_File_write_ordered_end)(MPI_File, const void *, MPI_Status *);
     int (*PMPI_File_get_type_extent)(MPI_File, MPI_Datatype, MPI_Aint *);
-    int (*PMPI_Register_datarep)(char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *);
+    int (*PMPI_Register_datarep)(const char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *);
     int (*PMPI_File_set_atomicity)(MPI_File, int);
     int (*PMPI_File_get_atomicity)(MPI_File, int *);
     int (*PMPI_File_sync)(MPI_File);
-    int (*PMPI_Send)(void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*PMPI_Send)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
     int (*PMPI_Recv)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
     int (*PMPI_Get_count)(MPI_Status *, MPI_Datatype, int *);
-    int (*PMPI_Bsend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
-    int (*PMPI_Ssend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
-    int (*PMPI_Rsend)(void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*PMPI_Bsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*PMPI_Ssend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
+    int (*PMPI_Rsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm);
     int (*PMPI_Buffer_attach)( void* buffer, int);
     int (*PMPI_Buffer_detach)( void* buffer, int *);
-    int (*PMPI_Isend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Ibsend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Issend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Irsend)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Isend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Ibsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Issend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Irsend)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*PMPI_Irecv)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*PMPI_Wait)(MPI_Request *, MPI_Status *);
     int (*PMPI_Test)(MPI_Request *, int *, MPI_Status *);
@@ -472,23 +472,23 @@
     int (*PMPI_Iprobe)(int, int, MPI_Comm, int *, MPI_Status *);
     int (*PMPI_Probe)(int, int, MPI_Comm, MPI_Status *);
     int (*PMPI_Cancel)(MPI_Request *);
-    int (*PMPI_Test_cancelled)(MPI_Status *, int *);
-    int (*PMPI_Send_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Bsend_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Ssend_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
-    int (*PMPI_Rsend_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Test_cancelled)(const MPI_Status *, int *);
+    int (*PMPI_Send_init)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Bsend_init)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Ssend_init)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
+    int (*PMPI_Rsend_init)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*PMPI_Recv_init)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *);
     int (*PMPI_Start)(MPI_Request *);
     int (*PMPI_Startall)(int, MPI_Request *);
-    int (*PMPI_Sendrecv)(void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
+    int (*PMPI_Sendrecv)(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *);
     int (*PMPI_Sendrecv_replace)(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *);
     int (*PMPI_Type_contiguous)(int, MPI_Datatype, MPI_Datatype *);
     int (*PMPI_Type_vector)(int, int, int, MPI_Datatype, MPI_Datatype *);
     int (*PMPI_Type_hvector)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-    int (*PMPI_Type_indexed)(int, int *, int *, MPI_Datatype, MPI_Datatype *);
-    int (*PMPI_Type_hindexed)(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *);
-    int (*PMPI_Type_struct)(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *);
-    int (*PMPI_Address)(void*, MPI_Aint *);
+    int (*PMPI_Type_indexed)(int, const int*, const int*, MPI_Datatype, MPI_Datatype*);
+    int (*PMPI_Type_hindexed)(int, const int*, const MPI_Aint*, MPI_Datatype, MPI_Datatype*);
+    int (*PMPI_Type_struct)(int, const int*, const MPI_Aint*, const MPI_Datatype*, MPI_Datatype*);
+    int (*PMPI_Address)(const void*, MPI_Aint *);
     int (*PMPI_Type_extent)(MPI_Datatype, MPI_Aint *);
     int (*PMPI_Type_size)(MPI_Datatype, int *);
     int (*PMPI_Type_lb)(MPI_Datatype, MPI_Aint *);
@@ -496,35 +496,35 @@
     int (*PMPI_Type_commit)(MPI_Datatype *);
     int (*PMPI_Type_free)(MPI_Datatype *);
     int (*PMPI_Get_elements)(MPI_Status *, MPI_Datatype, int *);
-    int (*PMPI_Pack)(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm);
-    int (*PMPI_Unpack)(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm);
+    int (*PMPI_Pack)(const void*, int, MPI_Datatype, void*, int, int*,  MPI_Comm);
+    int (*PMPI_Unpack)(const void*, int, int*, void*, int, MPI_Datatype, MPI_Comm);
     int (*PMPI_Pack_size)(int, MPI_Datatype, MPI_Comm, int *);
     int (*PMPI_Barrier)(MPI_Comm );
     int (*PMPI_Bcast)(void* buffer, int, MPI_Datatype, int, MPI_Comm );
-    int (*PMPI_Gather)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
-    int (*PMPI_Gatherv)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm); 
-    int (*PMPI_Scatter)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-    int (*PMPI_Scatterv)(void* , int *, int *displs, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
-    int (*PMPI_Allgather)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-    int (*PMPI_Allgatherv)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-    int (*PMPI_Alltoall)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
-    int (*PMPI_Alltoallv)(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm);
-    int (*PMPI_Reduce)(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
+    int (*PMPI_Gather)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm); 
+    int (*PMPI_Gatherv)(const void* , int, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, int, MPI_Comm);
+    int (*PMPI_Scatter)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+    int (*PMPI_Scatterv)(const void* , const int*, const int*,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm);
+    int (*PMPI_Allgather)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+    int (*PMPI_Allgatherv)(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm);
+    int (*PMPI_Alltoall)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm);
+    int (*PMPI_Alltoallv)(const void* , const int*, const int*, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, MPI_Comm);
+    int (*PMPI_Reduce)(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm);
     int (*PMPI_Op_create)(MPI_User_function *, int, MPI_Op *);
     int (*PMPI_Op_free)( MPI_Op *);
-    int (*PMPI_Allreduce)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
-    int (*PMPI_Reduce_scatter)(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm);
-    int (*PMPI_Scan)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
+    int (*PMPI_Allreduce)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm);
+    int (*PMPI_Reduce_scatter)(const void* , void*, const int*, MPI_Datatype, MPI_Op, MPI_Comm);
+    int (*PMPI_Scan)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm );
     int (*PMPI_Group_size)(MPI_Group, int *);
     int (*PMPI_Group_rank)(MPI_Group, int *);
-    int (*PMPI_Group_translate_ranks )(MPI_Group, int, int *, MPI_Group, int *);
+    int (*PMPI_Group_translate_ranks )(MPI_Group, int, const int *, MPI_Group, int *);
     int (*PMPI_Group_compare)(MPI_Group, MPI_Group, int *);
     int (*PMPI_Comm_group)(MPI_Comm, MPI_Group *);
     int (*PMPI_Group_union)(MPI_Group, MPI_Group, MPI_Group *);
     int (*PMPI_Group_intersection)(MPI_Group, MPI_Group, MPI_Group *);
     int (*PMPI_Group_difference)(MPI_Group, MPI_Group, MPI_Group *);
-    int (*PMPI_Group_incl)(MPI_Group, int, int *, MPI_Group *);
-    int (*PMPI_Group_excl)(MPI_Group, int, int *, MPI_Group *);
+    int (*PMPI_Group_incl)(MPI_Group, int, const int *, MPI_Group *);
+    int (*PMPI_Group_excl)(MPI_Group, int, const int *, MPI_Group *);
     int (*PMPI_Group_range_incl)(MPI_Group, int, int [][3], MPI_Group *);
     int (*PMPI_Group_range_excl)(MPI_Group, int, int [][3], MPI_Group *);
     int (*PMPI_Group_free)(MPI_Group *);
@@ -546,21 +546,21 @@
     int (*PMPI_Attr_get)(MPI_Comm, int, void *, int *);
     int (*PMPI_Attr_delete)(MPI_Comm, int);
     int (*PMPI_Topo_test)(MPI_Comm, int *);
-    int (*PMPI_Cart_create)(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+    int (*PMPI_Cart_create)(MPI_Comm, int, const int*, const int*, int, MPI_Comm*);
     int (*PMPI_Dims_create)(int, int, int *);
-    int (*PMPI_Graph_create)(MPI_Comm, int, int *, int *, int, MPI_Comm *);
+    int (*PMPI_Graph_create)(MPI_Comm, int, const int *, const int *, int, MPI_Comm *);
     int (*PMPI_Graphdims_get)(MPI_Comm, int *, int *);
     int (*PMPI_Graph_get)(MPI_Comm, int, int, int *, int *);
     int (*PMPI_Cartdim_get)(MPI_Comm, int *);
     int (*PMPI_Cart_get)(MPI_Comm, int, int *, int *, int *);
-    int (*PMPI_Cart_rank)(MPI_Comm, int *, int *);
+    int (*PMPI_Cart_rank)(MPI_Comm, const int *, int *);
     int (*PMPI_Cart_coords)(MPI_Comm, int, int, int *);
     int (*PMPI_Graph_neighbors_count)(MPI_Comm, int, int *);
     int (*PMPI_Graph_neighbors)(MPI_Comm, int, int, int *);
     int (*PMPI_Cart_shift)(MPI_Comm, int, int, int *, int *);
-    int (*PMPI_Cart_sub)(MPI_Comm, int *, MPI_Comm *);
-    int (*PMPI_Cart_map)(MPI_Comm, int, int *, int *, int *);
-    int (*PMPI_Graph_map)(MPI_Comm, int, int *, int *, int *);
+    int (*PMPI_Cart_sub)(MPI_Comm, const int *, MPI_Comm *);
+    int (*PMPI_Cart_map)(MPI_Comm, int, const int*, const int*, int*);
+    int (*PMPI_Graph_map)(MPI_Comm, int, const int *, const int *, int *);
     int (*PMPI_Get_processor_name)(char *, int *);
     int (*PMPI_Get_version)(int *, int *);
     int (*PMPI_Errhandler_create)(MPI_Handler_function *, MPI_Errhandler *);
@@ -574,21 +574,21 @@
     int (*PMPI_Initialized)(int *);
     int (*PMPI_Abort)(MPI_Comm, int);
     int (*PMPI_Pcontrol)(const int, ...);
-    int (*PMPI_Close_port)(char *);
-    int (*PMPI_Comm_accept)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
-    int (*PMPI_Comm_connect)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+    int (*PMPI_Close_port)(const char *);
+    int (*PMPI_Comm_accept)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
+    int (*PMPI_Comm_connect)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *);
     int (*PMPI_Comm_disconnect)(MPI_Comm *);
     int (*PMPI_Comm_get_parent)(MPI_Comm *);
     int (*PMPI_Comm_join)(int, MPI_Comm *);
-    int (*PMPI_Comm_spawn)(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []);
-    int (*PMPI_Comm_spawn_multiple)(int, char *[], char **[], int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
-    int (*PMPI_Lookup_name)(char *, MPI_Info, char *);
+    int (*PMPI_Comm_spawn)(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []);
+    int (*PMPI_Comm_spawn_multiple)(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []); 
+    int (*PMPI_Lookup_name)(const char *, MPI_Info, char *);
     int (*PMPI_Open_port)(MPI_Info, char *);
-    int (*PMPI_Publish_name)(char *, MPI_Info, char *);
-    int (*PMPI_Unpublish_name)(char *, MPI_Info, char *);
-    int (*PMPI_Accumulate)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win);
+    int (*PMPI_Publish_name)(const char *, MPI_Info, const char *);
+    int (*PMPI_Unpublish_name)(const char *, MPI_Info, const char *);
+    int (*PMPI_Accumulate)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win);
     int (*PMPI_Get)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
-    int (*PMPI_Put)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
+    int (*PMPI_Put)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win);
     int (*PMPI_Win_complete)(MPI_Win);
     int (*PMPI_Win_create)(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *);
     int (*PMPI_Win_fence)(int, MPI_Win);
@@ -600,11 +600,11 @@
     int (*PMPI_Win_test)(MPI_Win, int *);
     int (*PMPI_Win_unlock)(int, MPI_Win);
     int (*PMPI_Win_wait)(MPI_Win);
-    int (*PMPI_Alltoallw)(void *, int [], int [], MPI_Datatype [], void *, int [], int [], MPI_Datatype [], MPI_Comm);
-    int (*PMPI_Exscan)(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
+    int (*PMPI_Alltoallw)(const void*, const int [], const int [], const MPI_Datatype [], void*, const int [], const int [], const MPI_Datatype [], MPI_Comm);
+    int (*PMPI_Exscan)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm) ;
     int (*PMPI_Add_error_class)(int *);
     int (*PMPI_Add_error_code)(int, int *);
-    int (*PMPI_Add_error_string)(int, char *);
+    int (*PMPI_Add_error_string)(int, const char *);
     int (*PMPI_Comm_call_errhandler)(MPI_Comm, int);
     int (*PMPI_Comm_create_keyval)(MPI_Comm_copy_attr_function *, MPI_Comm_delete_attr_function *, int *, void *);
     int (*PMPI_Comm_delete_attr)(MPI_Comm, int);
@@ -612,7 +612,7 @@
     int (*PMPI_Comm_get_attr)(MPI_Comm, int, void *, int *);
     int (*PMPI_Comm_get_name)(MPI_Comm, char *, int *);
     int (*PMPI_Comm_set_attr)(MPI_Comm, int, void *);
-    int (*PMPI_Comm_set_name)(MPI_Comm, char *);
+    int (*PMPI_Comm_set_name)(MPI_Comm, const char *);
     int (*PMPI_File_call_errhandler)(MPI_File, int);
     int (*PMPI_Grequest_complete)(MPI_Request);
     int (*PMPI_Grequest_start)(MPI_Grequest_query_function *, MPI_Grequest_free_function *, MPI_Grequest_cancel_function *, void *, MPI_Request *);
@@ -630,7 +630,7 @@
     int (*PMPI_Type_get_envelope)(MPI_Datatype, int *, int *, int *, int *);
     int (*PMPI_Type_get_name)(MPI_Datatype, char *, int *);
     int (*PMPI_Type_set_attr)(MPI_Datatype, int, void *);
-    int (*PMPI_Type_set_name)(MPI_Datatype, char *);
+    int (*PMPI_Type_set_name)(MPI_Datatype, const char *);
     int (*PMPI_Type_match_size)( int, int, MPI_Datatype *);
     int (*PMPI_Win_call_errhandler)(MPI_Win, int);
     int (*PMPI_Win_create_keyval)(MPI_Win_copy_attr_function *, MPI_Win_delete_attr_function *, int *, void *);
@@ -639,7 +639,7 @@
     int (*PMPI_Win_get_attr)(MPI_Win, int, void *, int *);
     int (*PMPI_Win_get_name)(MPI_Win, char *, int *);
     int (*PMPI_Win_set_attr)(MPI_Win, int, void *);
-    int (*PMPI_Win_set_name)(MPI_Win, char *);
+    int (*PMPI_Win_set_name)(MPI_Win, const char *);
     int (*PMPI_Type_create_f90_integer)( int, MPI_Datatype * );
     int (*PMPI_Type_create_f90_real)( int, int, MPI_Datatype * );
     int (*PMPI_Type_create_f90_complex)( int, int, MPI_Datatype * );
@@ -652,31 +652,31 @@
     int (*PMPI_File_set_errhandler)(MPI_File, MPI_Errhandler);
     int (*PMPI_Finalized)(int *);
     int (*PMPI_Free_mem)(void *);
-    int (*PMPI_Get_address)(void *, MPI_Aint *);
+    int (*PMPI_Get_address)(const void *, MPI_Aint *);
     int (*PMPI_Info_create)(MPI_Info *);
-    int (*PMPI_Info_delete)(MPI_Info, char *);
+    int (*PMPI_Info_delete)(MPI_Info, const char *);
     int (*PMPI_Info_dup)(MPI_Info, MPI_Info *);
     int (*PMPI_Info_free)(MPI_Info *info);
-    int (*PMPI_Info_get)(MPI_Info, char *, int, char *, int *);
+    int (*PMPI_Info_get)(MPI_Info, const char *, int, char *, int *);
     int (*PMPI_Info_get_nkeys)(MPI_Info, int *);
     int (*PMPI_Info_get_nthkey)(MPI_Info, int, char *);
-    int (*PMPI_Info_get_valuelen)(MPI_Info, char *, int *, int *);
-    int (*PMPI_Info_set)(MPI_Info, char *, char *);
-    int (*PMPI_Pack_external)(char *, void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *); 
-    int (*PMPI_Pack_external_size)(char *, int, MPI_Datatype, MPI_Aint *); 
+    int (*PMPI_Info_get_valuelen)(MPI_Info, const char *, int *, int *);
+    int (*PMPI_Info_set)(MPI_Info, const char *, const char *);
+    int (*PMPI_Pack_external)(const char*, const void*, int, MPI_Datatype, void*, MPI_Aint, MPI_Aint*);
+    int (*PMPI_Pack_external_size)(const char *, int, MPI_Datatype, MPI_Aint *); 
     int (*PMPI_Request_get_status)(MPI_Request, int *, MPI_Status *);
-    int (*PMPI_Status_c2f)(MPI_Status *, MPI_Fint *);
-    int (*PMPI_Status_f2c)(MPI_Fint *, MPI_Status *);
-    int (*PMPI_Type_create_darray)(int, int, int, int [], int [], int [], int [], int, MPI_Datatype, MPI_Datatype *);
-    int (*PMPI_Type_create_hindexed)(int, int [], MPI_Aint [], MPI_Datatype, MPI_Datatype *);
+    int (*PMPI_Status_c2f)(const MPI_Status *, MPI_Fint *);
+    int (*PMPI_Status_f2c)(const MPI_Fint *, MPI_Status *);
+    int (*PMPI_Type_create_darray)(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*);
+    int (*PMPI_Type_create_hindexed)(int, const int [], const MPI_Aint [], MPI_Datatype, MPI_Datatype*);
     int (*PMPI_Type_create_hvector)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *);
-    int (*PMPI_Type_create_indexed_block)(int, int, int [], MPI_Datatype, MPI_Datatype *);
+    int (*PMPI_Type_create_indexed_block)(int, int, const int [], MPI_Datatype, MPI_Datatype*);
     int (*PMPI_Type_create_resized)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *);
-    int (*PMPI_Type_create_struct)(int, int [], MPI_Aint [], MPI_Datatype [], MPI_Datatype *);
-    int (*PMPI_Type_create_subarray)(int, int [], int [], int [], int, MPI_Datatype, MPI_Datatype *);
+    int (*PMPI_Type_create_struct)(int, const int [], const MPI_Aint [], const MPI_Datatype [], MPI_Datatype*);
+    int (*PMPI_Type_create_subarray)(int, const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*);
     int (*PMPI_Type_get_extent)(MPI_Datatype, MPI_Aint *, MPI_Aint *);
     int (*PMPI_Type_get_true_extent)(MPI_Datatype, MPI_Aint *, MPI_Aint *);
-    int (*PMPI_Unpack_external)(char *, void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype); 
+    int (*PMPI_Unpack_external)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype); 
     int (*PMPI_Win_create_errhandler)(MPI_Win_errhandler_fn *, MPI_Errhandler *);
     int (*PMPI_Win_get_errhandler)(MPI_Win, MPI_Errhandler *);
     int (*PMPI_Win_set_errhandler)(MPI_Win, MPI_Errhandler);
@@ -773,12 +773,12 @@
     if (fn.MPI_Request_f2c == NULL) fn.MPI_Request_f2c = (MPI_Request (*)(MPI_Fint))GetProcAddress(hPMPIModule, "MPI_Request_f2c");
     fn.MPI_Win_f2c = (MPI_Win (*)(MPI_Fint))GetProcAddress(hMPIModule, "MPI_Win_f2c");
     if (fn.MPI_Win_f2c == NULL) fn.MPI_Win_f2c = (MPI_Win (*)(MPI_Fint))GetProcAddress(hPMPIModule, "MPI_Win_f2c");
-    fn.MPI_File_open = (int (*)(MPI_Comm, char *, int, MPI_Info, MPI_File *))GetProcAddress(hMPIModule, "MPI_File_open");
-    if (fn.MPI_File_open == NULL) fn.MPI_File_open = (int (*)(MPI_Comm, char *, int, MPI_Info, MPI_File *))GetProcAddress(hPMPIModule, "MPI_File_open");
+    fn.MPI_File_open = (int (*)(MPI_Comm, const char *, int, MPI_Info, MPI_File *))GetProcAddress(hMPIModule, "MPI_File_open");
+    if (fn.MPI_File_open == NULL) fn.MPI_File_open = (int (*)(MPI_Comm, const char *, int, MPI_Info, MPI_File *))GetProcAddress(hPMPIModule, "MPI_File_open");
     fn.MPI_File_close = (int (*)(MPI_File *))GetProcAddress(hMPIModule, "MPI_File_close");
     if (fn.MPI_File_close == NULL) fn.MPI_File_close = (int (*)(MPI_File *))GetProcAddress(hPMPIModule, "MPI_File_close");
-    fn.MPI_File_delete = (int (*)(char *, MPI_Info))GetProcAddress(hMPIModule, "MPI_File_delete");
-    if (fn.MPI_File_delete == NULL) fn.MPI_File_delete = (int (*)(char *, MPI_Info))GetProcAddress(hPMPIModule, "MPI_File_delete");
+    fn.MPI_File_delete = (int (*)(const char *, MPI_Info))GetProcAddress(hMPIModule, "MPI_File_delete");
+    if (fn.MPI_File_delete == NULL) fn.MPI_File_delete = (int (*)(const char *, MPI_Info))GetProcAddress(hPMPIModule, "MPI_File_delete");
     fn.MPI_File_set_size = (int (*)(MPI_File, MPI_Offset))GetProcAddress(hMPIModule, "MPI_File_set_size");
     if (fn.MPI_File_set_size == NULL) fn.MPI_File_set_size = (int (*)(MPI_File, MPI_Offset))GetProcAddress(hPMPIModule, "MPI_File_set_size");
     fn.MPI_File_preallocate = (int (*)(MPI_File, MPI_Offset))GetProcAddress(hMPIModule, "MPI_File_preallocate");
@@ -793,34 +793,34 @@
     if (fn.MPI_File_set_info == NULL) fn.MPI_File_set_info = (int (*)(MPI_File, MPI_Info))GetProcAddress(hPMPIModule, "MPI_File_set_info");
     fn.MPI_File_get_info = (int (*)(MPI_File, MPI_Info *))GetProcAddress(hMPIModule, "MPI_File_get_info");
     if (fn.MPI_File_get_info == NULL) fn.MPI_File_get_info = (int (*)(MPI_File, MPI_Info *))GetProcAddress(hPMPIModule, "MPI_File_get_info");
-    fn.MPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, char *, MPI_Info))GetProcAddress(hMPIModule, "MPI_File_set_view");
-    if (fn.MPI_File_set_view == NULL) fn.MPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, char *, MPI_Info))GetProcAddress(hPMPIModule, "MPI_File_set_view");
+    fn.MPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info))GetProcAddress(hMPIModule, "MPI_File_set_view");
+    if (fn.MPI_File_set_view == NULL) fn.MPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info))GetProcAddress(hPMPIModule, "MPI_File_set_view");
     fn.MPI_File_get_view = (int (*)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *))GetProcAddress(hMPIModule, "MPI_File_get_view");
     if (fn.MPI_File_get_view == NULL) fn.MPI_File_get_view = (int (*)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *))GetProcAddress(hPMPIModule, "MPI_File_get_view");
     fn.MPI_File_read_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_at");
     if (fn.MPI_File_read_at == NULL) fn.MPI_File_read_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_at");
     fn.MPI_File_read_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_at_all");
     if (fn.MPI_File_read_at_all == NULL) fn.MPI_File_read_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_at_all");
-    fn.MPI_File_write_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at");
-    if (fn.MPI_File_write_at == NULL) fn.MPI_File_write_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at");
-    fn.MPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at_all");
-    if (fn.MPI_File_write_at_all == NULL) fn.MPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at_all");
+    fn.MPI_File_write_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at");
+    if (fn.MPI_File_write_at == NULL) fn.MPI_File_write_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at");
+    fn.MPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at_all");
+    if (fn.MPI_File_write_at_all == NULL) fn.MPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at_all");
     fn.MPI_File_iread_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iread_at");
     if (fn.MPI_File_iread_at == NULL) fn.MPI_File_iread_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iread_at");
-    fn.MPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite_at");
-    if (fn.MPI_File_iwrite_at == NULL) fn.MPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite_at");
+    fn.MPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite_at");
+    if (fn.MPI_File_iwrite_at == NULL) fn.MPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite_at");
     fn.MPI_File_read = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read"); 
     if (fn.MPI_File_read == NULL) fn.MPI_File_read = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read"); 
     fn.MPI_File_read_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_all"); 
     if (fn.MPI_File_read_all == NULL) fn.MPI_File_read_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_all"); 
-    fn.MPI_File_write = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write");
-    if (fn.MPI_File_write == NULL) fn.MPI_File_write = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write");
-    fn.MPI_File_write_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_all");
-    if (fn.MPI_File_write_all == NULL) fn.MPI_File_write_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_all");
+    fn.MPI_File_write = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write");
+    if (fn.MPI_File_write == NULL) fn.MPI_File_write = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write");
+    fn.MPI_File_write_all = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_all");
+    if (fn.MPI_File_write_all == NULL) fn.MPI_File_write_all = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_all");
     fn.MPI_File_iread = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iread"); 
     if (fn.MPI_File_iread == NULL) fn.MPI_File_iread = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iread"); 
-    fn.MPI_File_iwrite = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite");
-    if (fn.MPI_File_iwrite == NULL) fn.MPI_File_iwrite = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite");
+    fn.MPI_File_iwrite = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite");
+    if (fn.MPI_File_iwrite == NULL) fn.MPI_File_iwrite = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite");
     fn.MPI_File_seek = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hMPIModule, "MPI_File_seek");
     if (fn.MPI_File_seek == NULL) fn.MPI_File_seek = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hPMPIModule, "MPI_File_seek");
     fn.MPI_File_get_position = (int (*)(MPI_File, MPI_Offset *))GetProcAddress(hMPIModule, "MPI_File_get_position");
@@ -829,16 +829,16 @@
     if (fn.MPI_File_get_byte_offset == NULL) fn.MPI_File_get_byte_offset = (int (*)(MPI_File, MPI_Offset, MPI_Offset *))GetProcAddress(hPMPIModule, "MPI_File_get_byte_offset");
     fn.MPI_File_read_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_shared");
     if (fn.MPI_File_read_shared == NULL) fn.MPI_File_read_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_shared");
-    fn.MPI_File_write_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_shared");
-    if (fn.MPI_File_write_shared == NULL) fn.MPI_File_write_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_shared");
+    fn.MPI_File_write_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_shared");
+    if (fn.MPI_File_write_shared == NULL) fn.MPI_File_write_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_shared");
     fn.MPI_File_iread_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iread_shared");
     if (fn.MPI_File_iread_shared == NULL) fn.MPI_File_iread_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iread_shared");
-    fn.MPI_File_iwrite_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite_shared");
-    if (fn.MPI_File_iwrite_shared == NULL) fn.MPI_File_iwrite_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite_shared");
+    fn.MPI_File_iwrite_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hMPIModule, "MPI_File_iwrite_shared");
+    if (fn.MPI_File_iwrite_shared == NULL) fn.MPI_File_iwrite_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "MPI_File_iwrite_shared");
     fn.MPI_File_read_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_ordered");
     if (fn.MPI_File_read_ordered == NULL) fn.MPI_File_read_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_ordered");
-    fn.MPI_File_write_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_ordered");
-    if (fn.MPI_File_write_ordered == NULL) fn.MPI_File_write_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_ordered");
+    fn.MPI_File_write_ordered = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_ordered");
+    if (fn.MPI_File_write_ordered == NULL) fn.MPI_File_write_ordered = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_ordered");
     fn.MPI_File_seek_shared = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hMPIModule, "MPI_File_seek_shared");
     if (fn.MPI_File_seek_shared == NULL) fn.MPI_File_seek_shared = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hPMPIModule, "MPI_File_seek_shared");
     fn.MPI_File_get_position_shared = (int (*)(MPI_File, MPI_Offset *))GetProcAddress(hMPIModule, "MPI_File_get_position_shared");
@@ -847,60 +847,60 @@
     if (fn.MPI_File_read_at_all_begin == NULL) fn.MPI_File_read_at_all_begin = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_read_at_all_begin");
     fn.MPI_File_read_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_at_all_end");
     if (fn.MPI_File_read_at_all_end == NULL) fn.MPI_File_read_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_at_all_end");
-    fn.MPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_at_all_begin");
-    if (fn.MPI_File_write_at_all_begin == NULL) fn.MPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_at_all_begin");
-    fn.MPI_File_write_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at_all_end");
-    if (fn.MPI_File_write_at_all_end == NULL) fn.MPI_File_write_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at_all_end");
+    fn.MPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_at_all_begin");
+    if (fn.MPI_File_write_at_all_begin == NULL) fn.MPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_at_all_begin");
+    fn.MPI_File_write_at_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_at_all_end");
+    if (fn.MPI_File_write_at_all_end == NULL) fn.MPI_File_write_at_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_at_all_end");
     fn.MPI_File_read_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_read_all_begin");
     if (fn.MPI_File_read_all_begin == NULL) fn.MPI_File_read_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_read_all_begin");
     fn.MPI_File_read_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_all_end");
     if (fn.MPI_File_read_all_end == NULL) fn.MPI_File_read_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_all_end");
-    fn.MPI_File_write_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_all_begin");
-    if (fn.MPI_File_write_all_begin == NULL) fn.MPI_File_write_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_all_begin");
-    fn.MPI_File_write_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_all_end");
-    if (fn.MPI_File_write_all_end == NULL) fn.MPI_File_write_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_all_end");
+    fn.MPI_File_write_all_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_all_begin");
+    if (fn.MPI_File_write_all_begin == NULL) fn.MPI_File_write_all_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_all_begin");
+    fn.MPI_File_write_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_all_end");
+    if (fn.MPI_File_write_all_end == NULL) fn.MPI_File_write_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_all_end");
     fn.MPI_File_read_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_read_ordered_begin");
     if (fn.MPI_File_read_ordered_begin == NULL) fn.MPI_File_read_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_read_ordered_begin");
     fn.MPI_File_read_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_read_ordered_end");
     if (fn.MPI_File_read_ordered_end == NULL) fn.MPI_File_read_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_read_ordered_end");
-    fn.MPI_File_write_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_ordered_begin");
-    if (fn.MPI_File_write_ordered_begin == NULL) fn.MPI_File_write_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_ordered_begin");
-    fn.MPI_File_write_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_ordered_end");
-    if (fn.MPI_File_write_ordered_end == NULL) fn.MPI_File_write_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_ordered_end");
+    fn.MPI_File_write_ordered_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_File_write_ordered_begin");
+    if (fn.MPI_File_write_ordered_begin == NULL) fn.MPI_File_write_ordered_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_File_write_ordered_begin");
+    fn.MPI_File_write_ordered_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_File_write_ordered_end");
+    if (fn.MPI_File_write_ordered_end == NULL) fn.MPI_File_write_ordered_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_File_write_ordered_end");
     fn.MPI_File_get_type_extent = (int (*)(MPI_File, MPI_Datatype, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_File_get_type_extent");
     if (fn.MPI_File_get_type_extent == NULL) fn.MPI_File_get_type_extent = (int (*)(MPI_File, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_File_get_type_extent");
-    fn.MPI_Register_datarep = (int (*)(char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hMPIModule, "MPI_Register_datarep");
-    if (fn.MPI_Register_datarep == NULL) fn.MPI_Register_datarep = (int (*)(char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hPMPIModule, "MPI_Register_datarep");
+    fn.MPI_Register_datarep = (int (*)(const char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hMPIModule, "MPI_Register_datarep");
+    if (fn.MPI_Register_datarep == NULL) fn.MPI_Register_datarep = (int (*)(const char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hPMPIModule, "MPI_Register_datarep");
     fn.MPI_File_set_atomicity = (int (*)(MPI_File, int))GetProcAddress(hMPIModule, "MPI_File_set_atomicity");
     if (fn.MPI_File_set_atomicity == NULL) fn.MPI_File_set_atomicity = (int (*)(MPI_File, int))GetProcAddress(hPMPIModule, "MPI_File_set_atomicity");
     fn.MPI_File_get_atomicity = (int (*)(MPI_File, int *))GetProcAddress(hMPIModule, "MPI_File_get_atomicity");
     if (fn.MPI_File_get_atomicity == NULL) fn.MPI_File_get_atomicity = (int (*)(MPI_File, int *))GetProcAddress(hPMPIModule, "MPI_File_get_atomicity");
     fn.MPI_File_sync = (int (*)(MPI_File))GetProcAddress(hMPIModule, "MPI_File_sync");
     if (fn.MPI_File_sync == NULL) fn.MPI_File_sync = (int (*)(MPI_File))GetProcAddress(hPMPIModule, "MPI_File_sync");
-    fn.MPI_Send = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Send");
-    if (fn.MPI_Send == NULL) fn.MPI_Send = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Send");
+    fn.MPI_Send = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Send");
+    if (fn.MPI_Send == NULL) fn.MPI_Send = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Send");
     fn.MPI_Recv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Recv");
     if (fn.MPI_Recv == NULL) fn.MPI_Recv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Recv");
     fn.MPI_Get_count = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hMPIModule, "MPI_Get_count");
     if (fn.MPI_Get_count == NULL) fn.MPI_Get_count = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hPMPIModule, "MPI_Get_count");
-    fn.MPI_Bsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Bsend");
-    if (fn.MPI_Bsend == NULL) fn.MPI_Bsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Bsend");
-    fn.MPI_Ssend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Ssend");
-    if (fn.MPI_Ssend == NULL) fn.MPI_Ssend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Ssend");
-    fn.MPI_Rsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Rsend");
-    if (fn.MPI_Rsend == NULL) fn.MPI_Rsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Rsend");
+    fn.MPI_Bsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Bsend");
+    if (fn.MPI_Bsend == NULL) fn.MPI_Bsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Bsend");
+    fn.MPI_Ssend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Ssend");
+    if (fn.MPI_Ssend == NULL) fn.MPI_Ssend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Ssend");
+    fn.MPI_Rsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Rsend");
+    if (fn.MPI_Rsend == NULL) fn.MPI_Rsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Rsend");
     fn.MPI_Buffer_attach = (int (*)( void*, int))GetProcAddress(hMPIModule, "MPI_Buffer_attach");
     if (fn.MPI_Buffer_attach == NULL) fn.MPI_Buffer_attach = (int (*)( void*, int))GetProcAddress(hPMPIModule, "MPI_Buffer_attach");
     fn.MPI_Buffer_detach = (int (*)( void*, int *))GetProcAddress(hMPIModule, "MPI_Buffer_detach");
     if (fn.MPI_Buffer_detach == NULL) fn.MPI_Buffer_detach = (int (*)( void*, int *))GetProcAddress(hPMPIModule, "MPI_Buffer_detach");
-    fn.MPI_Isend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Isend");
-    if (fn.MPI_Isend == NULL) fn.MPI_Isend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Isend");
-    fn.MPI_Ibsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Ibsend");
-    if (fn.MPI_Ibsend == NULL) fn.MPI_Ibsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Ibsend");
-    fn.MPI_Issend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Issend");
-    if (fn.MPI_Issend == NULL) fn.MPI_Issend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Issend");
-    fn.MPI_Irsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Irsend");
-    if (fn.MPI_Irsend == NULL) fn.MPI_Irsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Irsend");
+    fn.MPI_Isend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Isend");
+    if (fn.MPI_Isend == NULL) fn.MPI_Isend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Isend");
+    fn.MPI_Ibsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Ibsend");
+    if (fn.MPI_Ibsend == NULL) fn.MPI_Ibsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Ibsend");
+    fn.MPI_Issend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Issend");
+    if (fn.MPI_Issend == NULL) fn.MPI_Issend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Issend");
+    fn.MPI_Irsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Irsend");
+    if (fn.MPI_Irsend == NULL) fn.MPI_Irsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Irsend");
     fn.MPI_Irecv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Irecv");
     if (fn.MPI_Irecv == NULL) fn.MPI_Irecv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Irecv");
     fn.MPI_Wait = (int (*)(MPI_Request *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Wait");
@@ -927,24 +927,24 @@
     if (fn.MPI_Probe == NULL) fn.MPI_Probe = (int (*)(int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Probe");
     fn.MPI_Cancel = (int (*)(MPI_Request *))GetProcAddress(hMPIModule, "MPI_Cancel");
     if (fn.MPI_Cancel == NULL) fn.MPI_Cancel = (int (*)(MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Cancel");
-    fn.MPI_Test_cancelled = (int (*)(MPI_Status *, int *))GetProcAddress(hMPIModule, "MPI_Test_cancelled");
-    if (fn.MPI_Test_cancelled == NULL) fn.MPI_Test_cancelled = (int (*)(MPI_Status *, int *))GetProcAddress(hPMPIModule, "MPI_Test_cancelled");
-    fn.MPI_Send_init = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Send_init");
-    if (fn.MPI_Send_init == NULL) fn.MPI_Send_init = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Send_init");
-    fn.MPI_Bsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Bsend_init");
-    if (fn.MPI_Bsend_init == NULL) fn.MPI_Bsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Bsend_init");
-    fn.MPI_Ssend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Ssend_init");
-    if (fn.MPI_Ssend_init == NULL) fn.MPI_Ssend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Ssend_init");
-    fn.MPI_Rsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Rsend_init");
-    if (fn.MPI_Rsend_init == NULL) fn.MPI_Rsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Rsend_init");
+    fn.MPI_Test_cancelled = (int (*)(const MPI_Status *, int *))GetProcAddress(hMPIModule, "MPI_Test_cancelled");
+    if (fn.MPI_Test_cancelled == NULL) fn.MPI_Test_cancelled = (int (*)(const MPI_Status *, int *))GetProcAddress(hPMPIModule, "MPI_Test_cancelled");
+    fn.MPI_Send_init = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Send_init");
+    if (fn.MPI_Send_init == NULL) fn.MPI_Send_init = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Send_init");
+    fn.MPI_Bsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Bsend_init");
+    if (fn.MPI_Bsend_init == NULL) fn.MPI_Bsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Bsend_init");
+    fn.MPI_Ssend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Ssend_init");
+    if (fn.MPI_Ssend_init == NULL) fn.MPI_Ssend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Ssend_init");
+    fn.MPI_Rsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Rsend_init");
+    if (fn.MPI_Rsend_init == NULL) fn.MPI_Rsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Rsend_init");
     fn.MPI_Recv_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Recv_init");
     if (fn.MPI_Recv_init == NULL) fn.MPI_Recv_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Recv_init");
     fn.MPI_Start = (int (*)(MPI_Request *))GetProcAddress(hMPIModule, "MPI_Start");
     if (fn.MPI_Start == NULL) fn.MPI_Start = (int (*)(MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Start");
     fn.MPI_Startall = (int (*)(int, MPI_Request *))GetProcAddress(hMPIModule, "MPI_Startall");
     if (fn.MPI_Startall == NULL) fn.MPI_Startall = (int (*)(int, MPI_Request *))GetProcAddress(hPMPIModule, "MPI_Startall");
-    fn.MPI_Sendrecv = (int (*)(void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Sendrecv");
-    if (fn.MPI_Sendrecv == NULL) fn.MPI_Sendrecv = (int (*)(void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Sendrecv");
+    fn.MPI_Sendrecv = (int (*)(const void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Sendrecv");
+    if (fn.MPI_Sendrecv == NULL) fn.MPI_Sendrecv = (int (*)(const void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Sendrecv");
     fn.MPI_Sendrecv_replace = (int (*)(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Sendrecv_replace");
     if (fn.MPI_Sendrecv_replace == NULL) fn.MPI_Sendrecv_replace = (int (*)(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Sendrecv_replace");
     fn.MPI_Type_contiguous = (int (*)(int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_contiguous");
@@ -953,14 +953,14 @@
     if (fn.MPI_Type_vector == NULL) fn.MPI_Type_vector = (int (*)(int, int, int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_vector");
     fn.MPI_Type_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_hvector");
     if (fn.MPI_Type_hvector == NULL) fn.MPI_Type_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_hvector");
-    fn.MPI_Type_indexed = (int (*)(int, int *, int *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_indexed");
-    if (fn.MPI_Type_indexed == NULL) fn.MPI_Type_indexed = (int (*)(int, int *, int *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_indexed");
-    fn.MPI_Type_hindexed = (int (*)(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_hindexed");
-    if (fn.MPI_Type_hindexed == NULL) fn.MPI_Type_hindexed = (int (*)(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_hindexed");
-    fn.MPI_Type_struct = (int (*)(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_struct");
-    if (fn.MPI_Type_struct == NULL) fn.MPI_Type_struct = (int (*)(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_struct");
-    fn.MPI_Address = (int (*)(void*, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Address");
-    if (fn.MPI_Address == NULL) fn.MPI_Address = (int (*)(void*, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Address");
+    fn.MPI_Type_indexed = (int (*)(int, const int*, const int*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_indexed");
+    if (fn.MPI_Type_indexed == NULL) fn.MPI_Type_indexed = (int (*)(int, const int*, const int*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_indexed");
+    fn.MPI_Type_hindexed = (int (*)(int, const int*, const MPI_Aint*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_hindexed");
+    if (fn.MPI_Type_hindexed == NULL) fn.MPI_Type_hindexed = (int (*)(int, const int*, const MPI_Aint*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_hindexed");
+    fn.MPI_Type_struct = (int (*)(int, const int*, const MPI_Aint*, const MPI_Datatype*, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_struct");
+    if (fn.MPI_Type_struct == NULL) fn.MPI_Type_struct = (int (*)(int, const int*, const MPI_Aint*, const MPI_Datatype*, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_struct");
+    fn.MPI_Address = (int (*)(const void*, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Address");
+    if (fn.MPI_Address == NULL) fn.MPI_Address = (int (*)(const void*, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Address");
     fn.MPI_Type_extent = (int (*)(MPI_Datatype, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Type_extent");
     if (fn.MPI_Type_extent == NULL) fn.MPI_Type_extent = (int (*)(MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Type_extent");
     fn.MPI_Type_size = (int (*)(MPI_Datatype, int *))GetProcAddress(hMPIModule, "MPI_Type_size");
@@ -975,50 +975,50 @@
     if (fn.MPI_Type_free == NULL) fn.MPI_Type_free = (int (*)(MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_free");
     fn.MPI_Get_elements = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hMPIModule, "MPI_Get_elements");
     if (fn.MPI_Get_elements == NULL) fn.MPI_Get_elements = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hPMPIModule, "MPI_Get_elements");
-    fn.MPI_Pack = (int (*)(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm))GetProcAddress(hMPIModule, "MPI_Pack");
-    if (fn.MPI_Pack == NULL) fn.MPI_Pack = (int (*)(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Pack");
-    fn.MPI_Unpack = (int (*)(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Unpack");
-    if (fn.MPI_Unpack == NULL) fn.MPI_Unpack = (int (*)(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Unpack");
+    fn.MPI_Pack = (int (*)(const void*, int, MPI_Datatype, void*, int, int*,  MPI_Comm))GetProcAddress(hMPIModule, "MPI_Pack");
+    if (fn.MPI_Pack == NULL) fn.MPI_Pack = (int (*)(const void*, int, MPI_Datatype, void*, int, int*,  MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Pack");
+    fn.MPI_Unpack = (int (*)(const void*, int, int*, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Unpack");
+    if (fn.MPI_Unpack == NULL) fn.MPI_Unpack = (int (*)(const void*, int, int*, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Unpack");
     fn.MPI_Pack_size = (int (*)(int, MPI_Datatype, MPI_Comm, int *))GetProcAddress(hMPIModule, "MPI_Pack_size");
     if (fn.MPI_Pack_size == NULL) fn.MPI_Pack_size = (int (*)(int, MPI_Datatype, MPI_Comm, int *))GetProcAddress(hPMPIModule, "MPI_Pack_size");
     fn.MPI_Barrier = (int (*)(MPI_Comm ))GetProcAddress(hMPIModule, "MPI_Barrier");
     if (fn.MPI_Barrier == NULL) fn.MPI_Barrier = (int (*)(MPI_Comm ))GetProcAddress(hPMPIModule, "MPI_Barrier");
     fn.MPI_Bcast = (int (*)(void*, int, MPI_Datatype, int, MPI_Comm ))GetProcAddress(hMPIModule, "MPI_Bcast");
     if (fn.MPI_Bcast == NULL) fn.MPI_Bcast = (int (*)(void*, int, MPI_Datatype, int, MPI_Comm ))GetProcAddress(hPMPIModule, "MPI_Bcast");
-    fn.MPI_Gather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Gather"); 
-    if (fn.MPI_Gather == NULL) fn.MPI_Gather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Gather"); 
-    fn.MPI_Gatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Gatherv"); 
-    if (fn.MPI_Gatherv == NULL) fn.MPI_Gatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Gatherv"); 
-    fn.MPI_Scatter = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Scatter");
-    if (fn.MPI_Scatter == NULL) fn.MPI_Scatter = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Scatter");
-    fn.MPI_Scatterv = (int (*)(void* , int *, int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Scatterv");
-    if (fn.MPI_Scatterv == NULL) fn.MPI_Scatterv = (int (*)(void* , int *, int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Scatterv");
-    fn.MPI_Allgather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allgather");
-    if (fn.MPI_Allgather == NULL) fn.MPI_Allgather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allgather");
-    fn.MPI_Allgatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allgatherv");
-    if (fn.MPI_Allgatherv == NULL) fn.MPI_Allgatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allgatherv");
-    fn.MPI_Alltoall = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoall");
-    if (fn.MPI_Alltoall == NULL) fn.MPI_Alltoall = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoall");
-    fn.MPI_Alltoallv = (int (*)(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoallv");
-    if (fn.MPI_Alltoallv == NULL) fn.MPI_Alltoallv = (int (*)(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoallv");
-    fn.MPI_Reduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Reduce");
-    if (fn.MPI_Reduce == NULL) fn.MPI_Reduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Reduce");
+    fn.MPI_Gather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Gather"); 
+    if (fn.MPI_Gather == NULL) fn.MPI_Gather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Gather"); 
+    fn.MPI_Gatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Gatherv"); 
+    if (fn.MPI_Gatherv == NULL) fn.MPI_Gatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Gatherv"); 
+    fn.MPI_Scatter = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Scatter");
+    if (fn.MPI_Scatter == NULL) fn.MPI_Scatter = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Scatter");
+    fn.MPI_Scatterv = (int (*)(const void* , const int*, const int*,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Scatterv");
+    if (fn.MPI_Scatterv == NULL) fn.MPI_Scatterv = (int (*)(const void* , const int*, const int*,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Scatterv");
+    fn.MPI_Allgather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allgather");
+    if (fn.MPI_Allgather == NULL) fn.MPI_Allgather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allgather");
+    fn.MPI_Allgatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allgatherv");
+    if (fn.MPI_Allgatherv == NULL) fn.MPI_Allgatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allgatherv");
+    fn.MPI_Alltoall = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoall");
+    if (fn.MPI_Alltoall == NULL) fn.MPI_Alltoall = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoall");
+    fn.MPI_Alltoallv = (int (*)(const void* , const int*, const int*, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoallv");
+    if (fn.MPI_Alltoallv == NULL) fn.MPI_Alltoallv = (int (*)(const void* , const int*, const int*, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoallv");
+    fn.MPI_Reduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Reduce");
+    if (fn.MPI_Reduce == NULL) fn.MPI_Reduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Reduce");
     fn.MPI_Op_create = (int (*)(MPI_User_function *, int, MPI_Op *))GetProcAddress(hMPIModule, "MPI_Op_create");
     if (fn.MPI_Op_create == NULL) fn.MPI_Op_create = (int (*)(MPI_User_function *, int, MPI_Op *))GetProcAddress(hPMPIModule, "MPI_Op_create");
     fn.MPI_Op_free = (int (*)( MPI_Op *))GetProcAddress(hMPIModule, "MPI_Op_free");
     if (fn.MPI_Op_free == NULL) fn.MPI_Op_free = (int (*)( MPI_Op *))GetProcAddress(hPMPIModule, "MPI_Op_free");
-    fn.MPI_Allreduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allreduce");
-    if (fn.MPI_Allreduce == NULL) fn.MPI_Allreduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allreduce");
-    fn.MPI_Reduce_scatter = (int (*)(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Reduce_scatter");
-    if (fn.MPI_Reduce_scatter == NULL) fn.MPI_Reduce_scatter = (int (*)(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Reduce_scatter");
-    fn.MPI_Scan = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hMPIModule, "MPI_Scan");
-    if (fn.MPI_Scan == NULL) fn.MPI_Scan = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hPMPIModule, "MPI_Scan");
+    fn.MPI_Allreduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Allreduce");
+    if (fn.MPI_Allreduce == NULL) fn.MPI_Allreduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Allreduce");
+    fn.MPI_Reduce_scatter = (int (*)(const void* , void*, const int*, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Reduce_scatter");
+    if (fn.MPI_Reduce_scatter == NULL) fn.MPI_Reduce_scatter = (int (*)(const void* , void*, const int*, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Reduce_scatter");
+    fn.MPI_Scan = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hMPIModule, "MPI_Scan");
+    if (fn.MPI_Scan == NULL) fn.MPI_Scan = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hPMPIModule, "MPI_Scan");
     fn.MPI_Group_size = (int (*)(MPI_Group, int *))GetProcAddress(hMPIModule, "MPI_Group_size");
     if (fn.MPI_Group_size == NULL) fn.MPI_Group_size = (int (*)(MPI_Group, int *))GetProcAddress(hPMPIModule, "MPI_Group_size");
     fn.MPI_Group_rank = (int (*)(MPI_Group, int *))GetProcAddress(hMPIModule, "MPI_Group_rank");
     if (fn.MPI_Group_rank == NULL) fn.MPI_Group_rank = (int (*)(MPI_Group, int *))GetProcAddress(hPMPIModule, "MPI_Group_rank");
-    fn.MPI_Group_translate_ranks = (int (* )(MPI_Group, int, int *, MPI_Group, int *))GetProcAddress(hMPIModule, "MPI_Group_translate_ranks");
-    if (fn.MPI_Group_translate_ranks == NULL) fn.MPI_Group_translate_ranks = (int (* )(MPI_Group, int, int *, MPI_Group, int *))GetProcAddress(hPMPIModule, "MPI_Group_translate_ranks");
+    fn.MPI_Group_translate_ranks = (int (* )(MPI_Group, int, const int *, MPI_Group, int *))GetProcAddress(hMPIModule, "MPI_Group_translate_ranks");
+    if (fn.MPI_Group_translate_ranks == NULL) fn.MPI_Group_translate_ranks = (int (* )(MPI_Group, int, const int *, MPI_Group, int *))GetProcAddress(hPMPIModule, "MPI_Group_translate_ranks");
     fn.MPI_Group_compare = (int (*)(MPI_Group, MPI_Group, int *))GetProcAddress(hMPIModule, "MPI_Group_compare");
     if (fn.MPI_Group_compare == NULL) fn.MPI_Group_compare = (int (*)(MPI_Group, MPI_Group, int *))GetProcAddress(hPMPIModule, "MPI_Group_compare");
     fn.MPI_Comm_group = (int (*)(MPI_Comm, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Comm_group");
@@ -1029,10 +1029,10 @@
     if (fn.MPI_Group_intersection == NULL) fn.MPI_Group_intersection = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_intersection");
     fn.MPI_Group_difference = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_difference");
     if (fn.MPI_Group_difference == NULL) fn.MPI_Group_difference = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_difference");
-    fn.MPI_Group_incl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_incl");
-    if (fn.MPI_Group_incl == NULL) fn.MPI_Group_incl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_incl");
-    fn.MPI_Group_excl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_excl");
-    if (fn.MPI_Group_excl == NULL) fn.MPI_Group_excl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_excl");
+    fn.MPI_Group_incl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_incl");
+    if (fn.MPI_Group_incl == NULL) fn.MPI_Group_incl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_incl");
+    fn.MPI_Group_excl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_excl");
+    if (fn.MPI_Group_excl == NULL) fn.MPI_Group_excl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_excl");
     fn.MPI_Group_range_incl = (int (*)(MPI_Group, int, int [][3], MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_range_incl");
     if (fn.MPI_Group_range_incl == NULL) fn.MPI_Group_range_incl = (int (*)(MPI_Group, int, int [][3], MPI_Group *))GetProcAddress(hPMPIModule, "MPI_Group_range_incl");
     fn.MPI_Group_range_excl = (int (*)(MPI_Group, int, int [][3], MPI_Group *))GetProcAddress(hMPIModule, "MPI_Group_range_excl");
@@ -1075,12 +1075,12 @@
     if (fn.MPI_Attr_delete == NULL) fn.MPI_Attr_delete = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "MPI_Attr_delete");
     fn.MPI_Topo_test = (int (*)(MPI_Comm, int *))GetProcAddress(hMPIModule, "MPI_Topo_test");
     if (fn.MPI_Topo_test == NULL) fn.MPI_Topo_test = (int (*)(MPI_Comm, int *))GetProcAddress(hPMPIModule, "MPI_Topo_test");
-    fn.MPI_Cart_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Cart_create");
-    if (fn.MPI_Cart_create == NULL) fn.MPI_Cart_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Cart_create");
+    fn.MPI_Cart_create = (int (*)(MPI_Comm, int, const int*, const int*, int, MPI_Comm*))GetProcAddress(hMPIModule, "MPI_Cart_create");
+    if (fn.MPI_Cart_create == NULL) fn.MPI_Cart_create = (int (*)(MPI_Comm, int, const int*, const int*, int, MPI_Comm*))GetProcAddress(hPMPIModule, "MPI_Cart_create");
     fn.MPI_Dims_create = (int (*)(int, int, int *))GetProcAddress(hMPIModule, "MPI_Dims_create");
     if (fn.MPI_Dims_create == NULL) fn.MPI_Dims_create = (int (*)(int, int, int *))GetProcAddress(hPMPIModule, "MPI_Dims_create");
-    fn.MPI_Graph_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Graph_create");
-    if (fn.MPI_Graph_create == NULL) fn.MPI_Graph_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Graph_create");
+    fn.MPI_Graph_create = (int (*)(MPI_Comm, int, const int *, const int *, int, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Graph_create");
+    if (fn.MPI_Graph_create == NULL) fn.MPI_Graph_create = (int (*)(MPI_Comm, int, const int *, const int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Graph_create");
     fn.MPI_Graphdims_get = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hMPIModule, "MPI_Graphdims_get");
     if (fn.MPI_Graphdims_get == NULL) fn.MPI_Graphdims_get = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hPMPIModule, "MPI_Graphdims_get");
     fn.MPI_Graph_get = (int (*)(MPI_Comm, int, int, int *, int *))GetProcAddress(hMPIModule, "MPI_Graph_get");
@@ -1089,8 +1089,8 @@
     if (fn.MPI_Cartdim_get == NULL) fn.MPI_Cartdim_get = (int (*)(MPI_Comm, int *))GetProcAddress(hPMPIModule, "MPI_Cartdim_get");
     fn.MPI_Cart_get = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hMPIModule, "MPI_Cart_get");
     if (fn.MPI_Cart_get == NULL) fn.MPI_Cart_get = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "MPI_Cart_get");
-    fn.MPI_Cart_rank = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hMPIModule, "MPI_Cart_rank");
-    if (fn.MPI_Cart_rank == NULL) fn.MPI_Cart_rank = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hPMPIModule, "MPI_Cart_rank");
+    fn.MPI_Cart_rank = (int (*)(MPI_Comm, const int *, int *))GetProcAddress(hMPIModule, "MPI_Cart_rank");
+    if (fn.MPI_Cart_rank == NULL) fn.MPI_Cart_rank = (int (*)(MPI_Comm, const int *, int *))GetProcAddress(hPMPIModule, "MPI_Cart_rank");
     fn.MPI_Cart_coords = (int (*)(MPI_Comm, int, int, int *))GetProcAddress(hMPIModule, "MPI_Cart_coords");
     if (fn.MPI_Cart_coords == NULL) fn.MPI_Cart_coords = (int (*)(MPI_Comm, int, int, int *))GetProcAddress(hPMPIModule, "MPI_Cart_coords");
     fn.MPI_Graph_neighbors_count = (int (*)(MPI_Comm, int, int *))GetProcAddress(hMPIModule, "MPI_Graph_neighbors_count");
@@ -1099,12 +1099,12 @@
     if (fn.MPI_Graph_neighbors == NULL) fn.MPI_Graph_neighbors = (int (*)(MPI_Comm, int, int, int *))GetProcAddress(hPMPIModule, "MPI_Graph_neighbors");
     fn.MPI_Cart_shift = (int (*)(MPI_Comm, int, int, int *, int *))GetProcAddress(hMPIModule, "MPI_Cart_shift");
     if (fn.MPI_Cart_shift == NULL) fn.MPI_Cart_shift = (int (*)(MPI_Comm, int, int, int *, int *))GetProcAddress(hPMPIModule, "MPI_Cart_shift");
-    fn.MPI_Cart_sub = (int (*)(MPI_Comm, int *, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Cart_sub");
-    if (fn.MPI_Cart_sub == NULL) fn.MPI_Cart_sub = (int (*)(MPI_Comm, int *, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Cart_sub");
-    fn.MPI_Cart_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hMPIModule, "MPI_Cart_map");
-    if (fn.MPI_Cart_map == NULL) fn.MPI_Cart_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "MPI_Cart_map");
-    fn.MPI_Graph_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hMPIModule, "MPI_Graph_map");
-    if (fn.MPI_Graph_map == NULL) fn.MPI_Graph_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "MPI_Graph_map");
+    fn.MPI_Cart_sub = (int (*)(MPI_Comm, const int *, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Cart_sub");
+    if (fn.MPI_Cart_sub == NULL) fn.MPI_Cart_sub = (int (*)(MPI_Comm, const int *, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Cart_sub");
+    fn.MPI_Cart_map = (int (*)(MPI_Comm, int, const int*, const int*, int*))GetProcAddress(hMPIModule, "MPI_Cart_map");
+    if (fn.MPI_Cart_map == NULL) fn.MPI_Cart_map = (int (*)(MPI_Comm, int, const int*, const int*, int*))GetProcAddress(hPMPIModule, "MPI_Cart_map");
+    fn.MPI_Graph_map = (int (*)(MPI_Comm, int, const int *, const int *, int *))GetProcAddress(hMPIModule, "MPI_Graph_map");
+    if (fn.MPI_Graph_map == NULL) fn.MPI_Graph_map = (int (*)(MPI_Comm, int, const int *, const int *, int *))GetProcAddress(hPMPIModule, "MPI_Graph_map");
     fn.MPI_Get_processor_name = (int (*)(char *, int *))GetProcAddress(hMPIModule, "MPI_Get_processor_name");
     if (fn.MPI_Get_processor_name == NULL) fn.MPI_Get_processor_name = (int (*)(char *, int *))GetProcAddress(hPMPIModule, "MPI_Get_processor_name");
     fn.MPI_Get_version = (int (*)(int *, int *))GetProcAddress(hMPIModule, "MPI_Get_version");
@@ -1138,36 +1138,36 @@
     if (fn.MPI_Pcontrol == NULL) fn.MPI_Pcontrol = (int (*)(const int, ...))GetProcAddress(hPMPIModule, "MPI_Pcontrol");
     fn.MPI_DUP_FN = (int (* )( MPI_Comm, int, void *, void *, void *, int * ))GetProcAddress(hMPIModule, "MPIR_Dup_fn"/*"MPI_DUP_FN"*/);
     if (fn.MPI_DUP_FN == NULL) fn.MPI_DUP_FN = (int (* )( MPI_Comm, int, void *, void *, void *, int * ))GetProcAddress(hPMPIModule, "MPIR_Dup_fn"/*"MPI_DUP_FN"*/);
-    fn.MPI_Close_port = (int (*)(char *))GetProcAddress(hMPIModule, "MPI_Close_port");
-    if (fn.MPI_Close_port == NULL) fn.MPI_Close_port = (int (*)(char *))GetProcAddress(hPMPIModule, "MPI_Close_port");
-    fn.MPI_Comm_accept = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_accept");
-    if (fn.MPI_Comm_accept == NULL) fn.MPI_Comm_accept = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_accept");
-    fn.MPI_Comm_connect = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_connect");
-    if (fn.MPI_Comm_connect == NULL) fn.MPI_Comm_connect = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_connect");
+    fn.MPI_Close_port = (int (*)(const char *))GetProcAddress(hMPIModule, "MPI_Close_port");
+    if (fn.MPI_Close_port == NULL) fn.MPI_Close_port = (int (*)(const char *))GetProcAddress(hPMPIModule, "MPI_Close_port");
+    fn.MPI_Comm_accept = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_accept");
+    if (fn.MPI_Comm_accept == NULL) fn.MPI_Comm_accept = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_accept");
+    fn.MPI_Comm_connect = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_connect");
+    if (fn.MPI_Comm_connect == NULL) fn.MPI_Comm_connect = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_connect");
     fn.MPI_Comm_disconnect = (int (*)(MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_disconnect");
     if (fn.MPI_Comm_disconnect == NULL) fn.MPI_Comm_disconnect = (int (*)(MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_disconnect");
     fn.MPI_Comm_get_parent = (int (*)(MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_get_parent");
     if (fn.MPI_Comm_get_parent == NULL) fn.MPI_Comm_get_parent = (int (*)(MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_get_parent");
     fn.MPI_Comm_join = (int (*)(int, MPI_Comm *))GetProcAddress(hMPIModule, "MPI_Comm_join");
     if (fn.MPI_Comm_join == NULL) fn.MPI_Comm_join = (int (*)(int, MPI_Comm *))GetProcAddress(hPMPIModule, "MPI_Comm_join");
-    fn.MPI_Comm_spawn = (int (*)(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hMPIModule, "MPI_Comm_spawn");
-    if (fn.MPI_Comm_spawn == NULL) fn.MPI_Comm_spawn = (int (*)(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "MPI_Comm_spawn");
-    fn.MPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hMPIModule, "MPI_Comm_spawn_multiple"); 
-    if (fn.MPI_Comm_spawn_multiple == NULL) fn.MPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "MPI_Comm_spawn_multiple"); 
-    fn.MPI_Lookup_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Lookup_name");
-    if (fn.MPI_Lookup_name == NULL) fn.MPI_Lookup_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Lookup_name");
+    fn.MPI_Comm_spawn = (int (*)(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hMPIModule, "MPI_Comm_spawn");
+    if (fn.MPI_Comm_spawn == NULL) fn.MPI_Comm_spawn = (int (*)(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "MPI_Comm_spawn");
+    fn.MPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hMPIModule, "MPI_Comm_spawn_multiple"); 
+    if (fn.MPI_Comm_spawn_multiple == NULL) fn.MPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "MPI_Comm_spawn_multiple"); 
+    fn.MPI_Lookup_name = (int (*)(const char *, MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Lookup_name");
+    if (fn.MPI_Lookup_name == NULL) fn.MPI_Lookup_name = (int (*)(const char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Lookup_name");
     fn.MPI_Open_port = (int (*)(MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Open_port");
     if (fn.MPI_Open_port == NULL) fn.MPI_Open_port = (int (*)(MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Open_port");
-    fn.MPI_Publish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Publish_name");
-    if (fn.MPI_Publish_name == NULL) fn.MPI_Publish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Publish_name");
-    fn.MPI_Unpublish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Unpublish_name");
-    if (fn.MPI_Unpublish_name == NULL) fn.MPI_Unpublish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Unpublish_name");
-    fn.MPI_Accumulate = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hMPIModule, "MPI_Accumulate");
-    if (fn.MPI_Accumulate == NULL) fn.MPI_Accumulate = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Accumulate");
+    fn.MPI_Publish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hMPIModule, "MPI_Publish_name");
+    if (fn.MPI_Publish_name == NULL) fn.MPI_Publish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hPMPIModule, "MPI_Publish_name");
+    fn.MPI_Unpublish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hMPIModule, "MPI_Unpublish_name");
+    if (fn.MPI_Unpublish_name == NULL) fn.MPI_Unpublish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hPMPIModule, "MPI_Unpublish_name");
+    fn.MPI_Accumulate = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hMPIModule, "MPI_Accumulate");
+    if (fn.MPI_Accumulate == NULL) fn.MPI_Accumulate = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Accumulate");
     fn.MPI_Get = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hMPIModule, "MPI_Get");
     if (fn.MPI_Get == NULL) fn.MPI_Get = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Get");
-    fn.MPI_Put = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hMPIModule, "MPI_Put");
-    if (fn.MPI_Put == NULL) fn.MPI_Put = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Put");
+    fn.MPI_Put = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hMPIModule, "MPI_Put");
+    if (fn.MPI_Put == NULL) fn.MPI_Put = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Put");
     fn.MPI_Win_complete = (int (*)(MPI_Win))GetProcAddress(hMPIModule, "MPI_Win_complete");
     if (fn.MPI_Win_complete == NULL) fn.MPI_Win_complete = (int (*)(MPI_Win))GetProcAddress(hPMPIModule, "MPI_Win_complete");
     fn.MPI_Win_create = (int (*)(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *))GetProcAddress(hMPIModule, "MPI_Win_create");
@@ -1190,16 +1190,16 @@
     if (fn.MPI_Win_unlock == NULL) fn.MPI_Win_unlock = (int (*)(int, MPI_Win))GetProcAddress(hPMPIModule, "MPI_Win_unlock");
     fn.MPI_Win_wait = (int (*)(MPI_Win))GetProcAddress(hMPIModule, "MPI_Win_wait");
     if (fn.MPI_Win_wait == NULL) fn.MPI_Win_wait = (int (*)(MPI_Win))GetProcAddress(hPMPIModule, "MPI_Win_wait");
-    fn.MPI_Alltoallw = (int (*)(void *, int [], int [], MPI_Datatype [], void *, int [], int [], MPI_Datatype [], MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoallw");
-    if (fn.MPI_Alltoallw == NULL) fn.MPI_Alltoallw = (int (*)(void *, int [], int [], MPI_Datatype [], void *, int [], int [], MPI_Datatype [], MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoallw");
-    fn.MPI_Exscan = (int (*)(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Exscan");
-    if (fn.MPI_Exscan == NULL) fn.MPI_Exscan = (int (*)(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Exscan");
+    fn.MPI_Alltoallw = (int (*)(const void*, const int [], const int [], const MPI_Datatype [], void*, const int [], const int [], const MPI_Datatype [], MPI_Comm))GetProcAddress(hMPIModule, "MPI_Alltoallw");
+    if (fn.MPI_Alltoallw == NULL) fn.MPI_Alltoallw = (int (*)(const void*, const int [], const int [], const MPI_Datatype [], void*, const int [], const int [], const MPI_Datatype [], MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Alltoallw");
+    fn.MPI_Exscan = (int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hMPIModule, "MPI_Exscan");
+    if (fn.MPI_Exscan == NULL) fn.MPI_Exscan = (int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "MPI_Exscan");
     fn.MPI_Add_error_class = (int (*)(int *))GetProcAddress(hMPIModule, "MPI_Add_error_class");
     if (fn.MPI_Add_error_class == NULL) fn.MPI_Add_error_class = (int (*)(int *))GetProcAddress(hPMPIModule, "MPI_Add_error_class");
     fn.MPI_Add_error_code = (int (*)(int, int *))GetProcAddress(hMPIModule, "MPI_Add_error_code");
     if (fn.MPI_Add_error_code == NULL) fn.MPI_Add_error_code = (int (*)(int, int *))GetProcAddress(hPMPIModule, "MPI_Add_error_code");
-    fn.MPI_Add_error_string = (int (*)(int, char *))GetProcAddress(hMPIModule, "MPI_Add_error_string");
-    if (fn.MPI_Add_error_string == NULL) fn.MPI_Add_error_string = (int (*)(int, char *))GetProcAddress(hPMPIModule, "MPI_Add_error_string");
+    fn.MPI_Add_error_string = (int (*)(int, const char *))GetProcAddress(hMPIModule, "MPI_Add_error_string");
+    if (fn.MPI_Add_error_string == NULL) fn.MPI_Add_error_string = (int (*)(int, const char *))GetProcAddress(hPMPIModule, "MPI_Add_error_string");
     fn.MPI_Comm_call_errhandler = (int (*)(MPI_Comm, int))GetProcAddress(hMPIModule, "MPI_Comm_call_errhandler");
     if (fn.MPI_Comm_call_errhandler == NULL) fn.MPI_Comm_call_errhandler = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "MPI_Comm_call_errhandler");
     fn.MPI_Comm_create_keyval = (int (*)(MPI_Comm_copy_attr_function *, MPI_Comm_delete_attr_function *, int *, void *))GetProcAddress(hMPIModule, "MPI_Comm_create_keyval");
@@ -1214,8 +1214,8 @@
     if (fn.MPI_Comm_get_name == NULL) fn.MPI_Comm_get_name = (int (*)(MPI_Comm, char *, int *))GetProcAddress(hPMPIModule, "MPI_Comm_get_name");
     fn.MPI_Comm_set_attr = (int (*)(MPI_Comm, int, void *))GetProcAddress(hMPIModule, "MPI_Comm_set_attr");
     if (fn.MPI_Comm_set_attr == NULL) fn.MPI_Comm_set_attr = (int (*)(MPI_Comm, int, void *))GetProcAddress(hPMPIModule, "MPI_Comm_set_attr");
-    fn.MPI_Comm_set_name = (int (*)(MPI_Comm, char *))GetProcAddress(hMPIModule, "MPI_Comm_set_name");
-    if (fn.MPI_Comm_set_name == NULL) fn.MPI_Comm_set_name = (int (*)(MPI_Comm, char *))GetProcAddress(hPMPIModule, "MPI_Comm_set_name");
+    fn.MPI_Comm_set_name = (int (*)(MPI_Comm, const char *))GetProcAddress(hMPIModule, "MPI_Comm_set_name");
+    if (fn.MPI_Comm_set_name == NULL) fn.MPI_Comm_set_name = (int (*)(MPI_Comm, const char *))GetProcAddress(hPMPIModule, "MPI_Comm_set_name");
     fn.MPI_File_call_errhandler = (int (*)(MPI_File, int))GetProcAddress(hMPIModule, "MPI_File_call_errhandler");
     if (fn.MPI_File_call_errhandler == NULL) fn.MPI_File_call_errhandler = (int (*)(MPI_File, int))GetProcAddress(hPMPIModule, "MPI_File_call_errhandler");
     fn.MPI_Grequest_complete = (int (*)(MPI_Request))GetProcAddress(hMPIModule, "MPI_Grequest_complete");
@@ -1250,8 +1250,8 @@
     if (fn.MPI_Type_get_name == NULL) fn.MPI_Type_get_name = (int (*)(MPI_Datatype, char *, int *))GetProcAddress(hPMPIModule, "MPI_Type_get_name");
     fn.MPI_Type_set_attr = (int (*)(MPI_Datatype, int, void *))GetProcAddress(hMPIModule, "MPI_Type_set_attr");
     if (fn.MPI_Type_set_attr == NULL) fn.MPI_Type_set_attr = (int (*)(MPI_Datatype, int, void *))GetProcAddress(hPMPIModule, "MPI_Type_set_attr");
-    fn.MPI_Type_set_name = (int (*)(MPI_Datatype, char *))GetProcAddress(hMPIModule, "MPI_Type_set_name");
-    if (fn.MPI_Type_set_name == NULL) fn.MPI_Type_set_name = (int (*)(MPI_Datatype, char *))GetProcAddress(hPMPIModule, "MPI_Type_set_name");
+    fn.MPI_Type_set_name = (int (*)(MPI_Datatype, const char *))GetProcAddress(hMPIModule, "MPI_Type_set_name");
+    if (fn.MPI_Type_set_name == NULL) fn.MPI_Type_set_name = (int (*)(MPI_Datatype, const char *))GetProcAddress(hPMPIModule, "MPI_Type_set_name");
     fn.MPI_Type_match_size = (int (*)( int, int, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_match_size");
     if (fn.MPI_Type_match_size == NULL) fn.MPI_Type_match_size = (int (*)( int, int, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_match_size");
     fn.MPI_Win_call_errhandler = (int (*)(MPI_Win, int))GetProcAddress(hMPIModule, "MPI_Win_call_errhandler");
@@ -1268,8 +1268,8 @@
     if (fn.MPI_Win_get_name == NULL) fn.MPI_Win_get_name = (int (*)(MPI_Win, char *, int *))GetProcAddress(hPMPIModule, "MPI_Win_get_name");
     fn.MPI_Win_set_attr = (int (*)(MPI_Win, int, void *))GetProcAddress(hMPIModule, "MPI_Win_set_attr");
     if (fn.MPI_Win_set_attr == NULL) fn.MPI_Win_set_attr = (int (*)(MPI_Win, int, void *))GetProcAddress(hPMPIModule, "MPI_Win_set_attr");
-    fn.MPI_Win_set_name = (int (*)(MPI_Win, char *))GetProcAddress(hMPIModule, "MPI_Win_set_name");
-    if (fn.MPI_Win_set_name == NULL) fn.MPI_Win_set_name = (int (*)(MPI_Win, char *))GetProcAddress(hPMPIModule, "MPI_Win_set_name");
+    fn.MPI_Win_set_name = (int (*)(MPI_Win, const char *))GetProcAddress(hMPIModule, "MPI_Win_set_name");
+    if (fn.MPI_Win_set_name == NULL) fn.MPI_Win_set_name = (int (*)(MPI_Win, const char *))GetProcAddress(hPMPIModule, "MPI_Win_set_name");
     fn.MPI_Alloc_mem = (int (*)(MPI_Aint, MPI_Info info, void *baseptr))GetProcAddress(hMPIModule, "MPI_Alloc_mem");
     if (fn.MPI_Alloc_mem == NULL) fn.MPI_Alloc_mem = (int (*)(MPI_Aint, MPI_Info info, void *baseptr))GetProcAddress(hPMPIModule, "MPI_Alloc_mem");
     fn.MPI_Comm_create_errhandler = (int (*)(MPI_Comm_errhandler_fn *, MPI_Errhandler *))GetProcAddress(hMPIModule, "MPI_Comm_create_errhandler");
@@ -1288,56 +1288,56 @@
     if (fn.MPI_Finalized == NULL) fn.MPI_Finalized = (int (*)(int *))GetProcAddress(hPMPIModule, "MPI_Finalized");
     fn.MPI_Free_mem = (int (*)(void *))GetProcAddress(hMPIModule, "MPI_Free_mem");
     if (fn.MPI_Free_mem == NULL) fn.MPI_Free_mem = (int (*)(void *))GetProcAddress(hPMPIModule, "MPI_Free_mem");
-    fn.MPI_Get_address = (int (*)(void *, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Get_address");
-    if (fn.MPI_Get_address == NULL) fn.MPI_Get_address = (int (*)(void *, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Get_address");
+    fn.MPI_Get_address = (int (*)(const void *, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Get_address");
+    if (fn.MPI_Get_address == NULL) fn.MPI_Get_address = (int (*)(const void *, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Get_address");
     fn.MPI_Info_create = (int (*)(MPI_Info *))GetProcAddress(hMPIModule, "MPI_Info_create");
     if (fn.MPI_Info_create == NULL) fn.MPI_Info_create = (int (*)(MPI_Info *))GetProcAddress(hPMPIModule, "MPI_Info_create");
-    fn.MPI_Info_delete = (int (*)(MPI_Info, char *))GetProcAddress(hMPIModule, "MPI_Info_delete");
-    if (fn.MPI_Info_delete == NULL) fn.MPI_Info_delete = (int (*)(MPI_Info, char *))GetProcAddress(hPMPIModule, "MPI_Info_delete");
+    fn.MPI_Info_delete = (int (*)(MPI_Info, const char *))GetProcAddress(hMPIModule, "MPI_Info_delete");
+    if (fn.MPI_Info_delete == NULL) fn.MPI_Info_delete = (int (*)(MPI_Info, const char *))GetProcAddress(hPMPIModule, "MPI_Info_delete");
     fn.MPI_Info_dup = (int (*)(MPI_Info, MPI_Info *))GetProcAddress(hMPIModule, "MPI_Info_dup");
     if (fn.MPI_Info_dup == NULL) fn.MPI_Info_dup = (int (*)(MPI_Info, MPI_Info *))GetProcAddress(hPMPIModule, "MPI_Info_dup");
     fn.MPI_Info_free = (int (*)(MPI_Info *info))GetProcAddress(hMPIModule, "MPI_Info_free");
     if (fn.MPI_Info_free == NULL) fn.MPI_Info_free = (int (*)(MPI_Info *info))GetProcAddress(hPMPIModule, "MPI_Info_free");
-    fn.MPI_Info_get = (int (*)(MPI_Info, char *, int, char *, int *))GetProcAddress(hMPIModule, "MPI_Info_get");
-    if (fn.MPI_Info_get == NULL) fn.MPI_Info_get = (int (*)(MPI_Info, char *, int, char *, int *))GetProcAddress(hPMPIModule, "MPI_Info_get");
+    fn.MPI_Info_get = (int (*)(MPI_Info, const char *, int, char *, int *))GetProcAddress(hMPIModule, "MPI_Info_get");
+    if (fn.MPI_Info_get == NULL) fn.MPI_Info_get = (int (*)(MPI_Info, const char *, int, char *, int *))GetProcAddress(hPMPIModule, "MPI_Info_get");
     fn.MPI_Info_get_nkeys = (int (*)(MPI_Info, int *))GetProcAddress(hMPIModule, "MPI_Info_get_nkeys");
     if (fn.MPI_Info_get_nkeys == NULL) fn.MPI_Info_get_nkeys = (int (*)(MPI_Info, int *))GetProcAddress(hPMPIModule, "MPI_Info_get_nkeys");
     fn.MPI_Info_get_nthkey = (int (*)(MPI_Info, int, char *))GetProcAddress(hMPIModule, "MPI_Info_get_nthkey");
     if (fn.MPI_Info_get_nthkey == NULL) fn.MPI_Info_get_nthkey = (int (*)(MPI_Info, int, char *))GetProcAddress(hPMPIModule, "MPI_Info_get_nthkey");
-    fn.MPI_Info_get_valuelen = (int (*)(MPI_Info, char *, int *, int *))GetProcAddress(hMPIModule, "MPI_Info_get_valuelen");
-    if (fn.MPI_Info_get_valuelen == NULL) fn.MPI_Info_get_valuelen = (int (*)(MPI_Info, char *, int *, int *))GetProcAddress(hPMPIModule, "MPI_Info_get_valuelen");
-    fn.MPI_Info_set = (int (*)(MPI_Info, char *, char *))GetProcAddress(hMPIModule, "MPI_Info_set");
-    if (fn.MPI_Info_set == NULL) fn.MPI_Info_set = (int (*)(MPI_Info, char *, char *))GetProcAddress(hPMPIModule, "MPI_Info_set");
-    fn.MPI_Pack_external = (int (*)(char *, void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Pack_external"); 
-    if (fn.MPI_Pack_external == NULL) fn.MPI_Pack_external = (int (*)(char *, void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Pack_external"); 
-    fn.MPI_Pack_external_size = (int (*)(char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Pack_external_size"); 
-    if (fn.MPI_Pack_external_size == NULL) fn.MPI_Pack_external_size = (int (*)(char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Pack_external_size"); 
+    fn.MPI_Info_get_valuelen = (int (*)(MPI_Info, const char *, int *, int *))GetProcAddress(hMPIModule, "MPI_Info_get_valuelen");
+    if (fn.MPI_Info_get_valuelen == NULL) fn.MPI_Info_get_valuelen = (int (*)(MPI_Info, const char *, int *, int *))GetProcAddress(hPMPIModule, "MPI_Info_get_valuelen");
+    fn.MPI_Info_set = (int (*)(MPI_Info, const char *, const char *))GetProcAddress(hMPIModule, "MPI_Info_set");
+    if (fn.MPI_Info_set == NULL) fn.MPI_Info_set = (int (*)(MPI_Info, const char *, const char *))GetProcAddress(hPMPIModule, "MPI_Info_set");
+    fn.MPI_Pack_external = (int (*)(const char*, const void*, int, MPI_Datatype, void*, MPI_Aint, MPI_Aint*))GetProcAddress(hMPIModule, "MPI_Pack_external"); 
+    if (fn.MPI_Pack_external == NULL) fn.MPI_Pack_external = (int (*)(const char*, const void*, int, MPI_Datatype, void*, MPI_Aint, MPI_Aint*))GetProcAddress(hPMPIModule, "MPI_Pack_external"); 
+    fn.MPI_Pack_external_size = (int (*)(const char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Pack_external_size"); 
+    if (fn.MPI_Pack_external_size == NULL) fn.MPI_Pack_external_size = (int (*)(const char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Pack_external_size"); 
     fn.MPI_Request_get_status = (int (*)(MPI_Request, int *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Request_get_status");
     if (fn.MPI_Request_get_status == NULL) fn.MPI_Request_get_status = (int (*)(MPI_Request, int *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Request_get_status");
-    fn.MPI_Status_c2f = (int (*)(MPI_Status *, MPI_Fint *))GetProcAddress(hMPIModule, "MPI_Status_c2f");
-    if (fn.MPI_Status_c2f == NULL) fn.MPI_Status_c2f = (int (*)(MPI_Status *, MPI_Fint *))GetProcAddress(hPMPIModule, "MPI_Status_c2f");
-    fn.MPI_Status_f2c = (int (*)(MPI_Fint *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Status_f2c");
-    if (fn.MPI_Status_f2c == NULL) fn.MPI_Status_f2c = (int (*)(MPI_Fint *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Status_f2c");
-    fn.MPI_Type_create_darray = (int (*)(int, int, int, int [], int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_darray");
-    if (fn.MPI_Type_create_darray == NULL) fn.MPI_Type_create_darray = (int (*)(int, int, int, int [], int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_darray");
-    fn.MPI_Type_create_hindexed = (int (*)(int, int [], MPI_Aint [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_hindexed");
-    if (fn.MPI_Type_create_hindexed == NULL) fn.MPI_Type_create_hindexed = (int (*)(int, int [], MPI_Aint [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_hindexed");
+    fn.MPI_Status_c2f = (int (*)(const MPI_Status *, MPI_Fint *))GetProcAddress(hMPIModule, "MPI_Status_c2f");
+    if (fn.MPI_Status_c2f == NULL) fn.MPI_Status_c2f = (int (*)(const MPI_Status *, MPI_Fint *))GetProcAddress(hPMPIModule, "MPI_Status_c2f");
+    fn.MPI_Status_f2c = (int (*)(const MPI_Fint *, MPI_Status *))GetProcAddress(hMPIModule, "MPI_Status_f2c");
+    if (fn.MPI_Status_f2c == NULL) fn.MPI_Status_f2c = (int (*)(const MPI_Fint *, MPI_Status *))GetProcAddress(hPMPIModule, "MPI_Status_f2c");
+    fn.MPI_Type_create_darray = (int (*)(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_create_darray");
+    if (fn.MPI_Type_create_darray == NULL) fn.MPI_Type_create_darray = (int (*)(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_create_darray");
+    fn.MPI_Type_create_hindexed = (int (*)(int, const int [], const MPI_Aint [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_create_hindexed");
+    if (fn.MPI_Type_create_hindexed == NULL) fn.MPI_Type_create_hindexed = (int (*)(int, const int [], const MPI_Aint [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_create_hindexed");
     fn.MPI_Type_create_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_hvector");
     if (fn.MPI_Type_create_hvector == NULL) fn.MPI_Type_create_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_hvector");
-    fn.MPI_Type_create_indexed_block = (int (*)(int, int, int [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_indexed_block");
-    if (fn.MPI_Type_create_indexed_block == NULL) fn.MPI_Type_create_indexed_block = (int (*)(int, int, int [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_indexed_block");
+    fn.MPI_Type_create_indexed_block = (int (*)(int, int, const int [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_create_indexed_block");
+    if (fn.MPI_Type_create_indexed_block == NULL) fn.MPI_Type_create_indexed_block = (int (*)(int, int, const int [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_create_indexed_block");
     fn.MPI_Type_create_resized = (int (*)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_resized");
     if (fn.MPI_Type_create_resized == NULL) fn.MPI_Type_create_resized = (int (*)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_resized");
-    fn.MPI_Type_create_struct = (int (*)(int, int [], MPI_Aint [], MPI_Datatype [], MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_struct");
-    if (fn.MPI_Type_create_struct == NULL) fn.MPI_Type_create_struct = (int (*)(int, int [], MPI_Aint [], MPI_Datatype [], MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_struct");
-    fn.MPI_Type_create_subarray = (int (*)(int, int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hMPIModule, "MPI_Type_create_subarray");
-    if (fn.MPI_Type_create_subarray == NULL) fn.MPI_Type_create_subarray = (int (*)(int, int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "MPI_Type_create_subarray");
+    fn.MPI_Type_create_struct = (int (*)(int, const int [], const MPI_Aint [], const MPI_Datatype [], MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_create_struct");
+    if (fn.MPI_Type_create_struct == NULL) fn.MPI_Type_create_struct = (int (*)(int, const int [], const MPI_Aint [], const MPI_Datatype [], MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_create_struct");
+    fn.MPI_Type_create_subarray = (int (*)(int, const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hMPIModule, "MPI_Type_create_subarray");
+    if (fn.MPI_Type_create_subarray == NULL) fn.MPI_Type_create_subarray = (int (*)(int, const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "MPI_Type_create_subarray");
     fn.MPI_Type_get_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Type_get_extent");
     if (fn.MPI_Type_get_extent == NULL) fn.MPI_Type_get_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Type_get_extent");
     fn.MPI_Type_get_true_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hMPIModule, "MPI_Type_get_true_extent");
     if (fn.MPI_Type_get_true_extent == NULL) fn.MPI_Type_get_true_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hPMPIModule, "MPI_Type_get_true_extent");
-    fn.MPI_Unpack_external = (int (*)(char *, void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_Unpack_external"); 
-    if (fn.MPI_Unpack_external == NULL) fn.MPI_Unpack_external = (int (*)(char *, void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_Unpack_external"); 
+    fn.MPI_Unpack_external = (int (*)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hMPIModule, "MPI_Unpack_external"); 
+    if (fn.MPI_Unpack_external == NULL) fn.MPI_Unpack_external = (int (*)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "MPI_Unpack_external"); 
     fn.MPI_Win_create_errhandler = (int (*)(MPI_Win_errhandler_fn *, MPI_Errhandler *))GetProcAddress(hMPIModule, "MPI_Win_create_errhandler");
     if (fn.MPI_Win_create_errhandler == NULL) fn.MPI_Win_create_errhandler = (int (*)(MPI_Win_errhandler_fn *, MPI_Errhandler *))GetProcAddress(hPMPIModule, "MPI_Win_create_errhandler");
     fn.MPI_Win_get_errhandler = (int (*)(MPI_Win, MPI_Errhandler *))GetProcAddress(hMPIModule, "MPI_Win_get_errhandler");
@@ -1367,9 +1367,9 @@
     fn.PMPI_Op_f2c = (MPI_Op (*)(MPI_Fint))GetProcAddress(hPMPIModule, "PMPI_Op_f2c");
     fn.PMPI_Request_f2c = (MPI_Request (*)(MPI_Fint))GetProcAddress(hPMPIModule, "PMPI_Request_f2c");
     fn.PMPI_Win_f2c = (MPI_Win (*)(MPI_Fint))GetProcAddress(hPMPIModule, "PMPI_Win_f2c");
-    fn.PMPI_File_open = (int (*)(MPI_Comm, char *, int, MPI_Info, MPI_File *))GetProcAddress(hPMPIModule, "PMPI_File_open");
+    fn.PMPI_File_open = (int (*)(MPI_Comm, const char *, int, MPI_Info, MPI_File *))GetProcAddress(hPMPIModule, "PMPI_File_open");
     fn.PMPI_File_close = (int (*)(MPI_File *))GetProcAddress(hPMPIModule, "PMPI_File_close");
-    fn.PMPI_File_delete = (int (*)(char *, MPI_Info))GetProcAddress(hPMPIModule, "PMPI_File_delete");
+    fn.PMPI_File_delete = (int (*)(const char *, MPI_Info))GetProcAddress(hPMPIModule, "PMPI_File_delete");
     fn.PMPI_File_set_size = (int (*)(MPI_File, MPI_Offset))GetProcAddress(hPMPIModule, "PMPI_File_set_size");
     fn.PMPI_File_preallocate = (int (*)(MPI_File, MPI_Offset))GetProcAddress(hPMPIModule, "PMPI_File_preallocate");
     fn.PMPI_File_get_size = (int (*)(MPI_File, MPI_Offset *))GetProcAddress(hPMPIModule, "PMPI_File_get_size");
@@ -1377,60 +1377,60 @@
     fn.PMPI_File_get_amode = (int (*)(MPI_File, int *))GetProcAddress(hPMPIModule, "PMPI_File_get_amode");
     fn.PMPI_File_set_info = (int (*)(MPI_File, MPI_Info))GetProcAddress(hPMPIModule, "PMPI_File_set_info");
     fn.PMPI_File_get_info = (int (*)(MPI_File, MPI_Info *))GetProcAddress(hPMPIModule, "PMPI_File_get_info");
-    fn.PMPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, char *, MPI_Info))GetProcAddress(hPMPIModule, "PMPI_File_set_view");
+    fn.PMPI_File_set_view = (int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info))GetProcAddress(hPMPIModule, "PMPI_File_set_view");
     fn.PMPI_File_get_view = (int (*)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *))GetProcAddress(hPMPIModule, "PMPI_File_get_view");
     fn.PMPI_File_read_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_at");
     fn.PMPI_File_read_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_at_all");
-    fn.PMPI_File_write_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at");
-    fn.PMPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all");
+    fn.PMPI_File_write_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at");
+    fn.PMPI_File_write_at_all = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all");
     fn.PMPI_File_iread_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iread_at");
-    fn.PMPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite_at");
+    fn.PMPI_File_iwrite_at = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite_at");
     fn.PMPI_File_read = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read"); 
     fn.PMPI_File_read_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_all"); 
-    fn.PMPI_File_write = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write");
-    fn.PMPI_File_write_all = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_all");
+    fn.PMPI_File_write = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write");
+    fn.PMPI_File_write_all = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_all");
     fn.PMPI_File_iread = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iread"); 
-    fn.PMPI_File_iwrite = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite");
+    fn.PMPI_File_iwrite = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite");
     fn.PMPI_File_seek = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hPMPIModule, "PMPI_File_seek");
     fn.PMPI_File_get_position = (int (*)(MPI_File, MPI_Offset *))GetProcAddress(hPMPIModule, "PMPI_File_get_position");
     fn.PMPI_File_get_byte_offset = (int (*)(MPI_File, MPI_Offset, MPI_Offset *))GetProcAddress(hPMPIModule, "PMPI_File_get_byte_offset");
     fn.PMPI_File_read_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_shared");
-    fn.PMPI_File_write_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_shared");
+    fn.PMPI_File_write_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_shared");
     fn.PMPI_File_iread_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iread_shared");
-    fn.PMPI_File_iwrite_shared = (int (*)(MPI_File, void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite_shared");
+    fn.PMPI_File_iwrite_shared = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPIO_Request *))GetProcAddress(hPMPIModule, "PMPI_File_iwrite_shared");
     fn.PMPI_File_read_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_ordered");
-    fn.PMPI_File_write_ordered = (int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered");
+    fn.PMPI_File_write_ordered = (int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered");
     fn.PMPI_File_seek_shared = (int (*)(MPI_File, MPI_Offset, int))GetProcAddress(hPMPIModule, "PMPI_File_seek_shared");
     fn.PMPI_File_get_position_shared = (int (*)(MPI_File, MPI_Offset *))GetProcAddress(hPMPIModule, "PMPI_File_get_position_shared");
     fn.PMPI_File_read_at_all_begin = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_read_at_all_begin");
     fn.PMPI_File_read_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_at_all_end");
-    fn.PMPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all_begin");
-    fn.PMPI_File_write_at_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all_end");
+    fn.PMPI_File_write_at_all_begin = (int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all_begin");
+    fn.PMPI_File_write_at_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_at_all_end");
     fn.PMPI_File_read_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_read_all_begin");
     fn.PMPI_File_read_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_all_end");
-    fn.PMPI_File_write_all_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_all_begin");
-    fn.PMPI_File_write_all_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_all_end");
+    fn.PMPI_File_write_all_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_all_begin");
+    fn.PMPI_File_write_all_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_all_end");
     fn.PMPI_File_read_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_read_ordered_begin");
     fn.PMPI_File_read_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_read_ordered_end");
-    fn.PMPI_File_write_ordered_begin = (int (*)(MPI_File, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered_begin");
-    fn.PMPI_File_write_ordered_end = (int (*)(MPI_File, void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered_end");
+    fn.PMPI_File_write_ordered_begin = (int (*)(MPI_File, const void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered_begin");
+    fn.PMPI_File_write_ordered_end = (int (*)(MPI_File, const void *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_File_write_ordered_end");
     fn.PMPI_File_get_type_extent = (int (*)(MPI_File, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_File_get_type_extent");
-    fn.PMPI_Register_datarep = (int (*)(char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hPMPIModule, "PMPI_Register_datarep");
+    fn.PMPI_Register_datarep = (int (*)(const char *, MPI_Datarep_conversion_function *, MPI_Datarep_conversion_function *, MPI_Datarep_extent_function *, void *))GetProcAddress(hPMPIModule, "PMPI_Register_datarep");
     fn.PMPI_File_set_atomicity = (int (*)(MPI_File, int))GetProcAddress(hPMPIModule, "PMPI_File_set_atomicity");
     fn.PMPI_File_get_atomicity = (int (*)(MPI_File, int *))GetProcAddress(hPMPIModule, "PMPI_File_get_atomicity");
     fn.PMPI_File_sync = (int (*)(MPI_File))GetProcAddress(hPMPIModule, "PMPI_File_sync");
-    fn.PMPI_Send = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Send");
+    fn.PMPI_Send = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Send");
     fn.PMPI_Recv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Recv");
     fn.PMPI_Get_count = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hPMPIModule, "PMPI_Get_count");
-    fn.PMPI_Bsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Bsend");
-    fn.PMPI_Ssend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Ssend");
-    fn.PMPI_Rsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Rsend");
+    fn.PMPI_Bsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Bsend");
+    fn.PMPI_Ssend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Ssend");
+    fn.PMPI_Rsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Rsend");
     fn.PMPI_Buffer_attach = (int (*)( void*, int))GetProcAddress(hPMPIModule, "PMPI_Buffer_attach");
     fn.PMPI_Buffer_detach = (int (*)( void*, int *))GetProcAddress(hPMPIModule, "PMPI_Buffer_detach");
-    fn.PMPI_Isend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Isend");
-    fn.PMPI_Ibsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Ibsend");
-    fn.PMPI_Issend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Issend");
-    fn.PMPI_Irsend = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Irsend");
+    fn.PMPI_Isend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Isend");
+    fn.PMPI_Ibsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Ibsend");
+    fn.PMPI_Issend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Issend");
+    fn.PMPI_Irsend = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Irsend");
     fn.PMPI_Irecv = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Irecv");
     fn.PMPI_Wait = (int (*)(MPI_Request *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Wait");
     fn.PMPI_Test = (int (*)(MPI_Request *, int *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Test");
@@ -1444,23 +1444,23 @@
     fn.PMPI_Iprobe = (int (*)(int, int, MPI_Comm, int *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Iprobe");
     fn.PMPI_Probe = (int (*)(int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Probe");
     fn.PMPI_Cancel = (int (*)(MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Cancel");
-    fn.PMPI_Test_cancelled = (int (*)(MPI_Status *, int *))GetProcAddress(hPMPIModule, "PMPI_Test_cancelled");
-    fn.PMPI_Send_init = (int (*)(void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Send_init");
-    fn.PMPI_Bsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Bsend_init");
-    fn.PMPI_Ssend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Ssend_init");
-    fn.PMPI_Rsend_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Rsend_init");
+    fn.PMPI_Test_cancelled = (int (*)(const MPI_Status *, int *))GetProcAddress(hPMPIModule, "PMPI_Test_cancelled");
+    fn.PMPI_Send_init = (int (*)(const void*, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Send_init");
+    fn.PMPI_Bsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Bsend_init");
+    fn.PMPI_Ssend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Ssend_init");
+    fn.PMPI_Rsend_init = (int (*)(const void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Rsend_init");
     fn.PMPI_Recv_init = (int (*)(void*, int, MPI_Datatype, int,int, MPI_Comm, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Recv_init");
     fn.PMPI_Start = (int (*)(MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Start");
     fn.PMPI_Startall = (int (*)(int, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Startall");
-    fn.PMPI_Sendrecv = (int (*)(void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Sendrecv");
+    fn.PMPI_Sendrecv = (int (*)(const void *, int, MPI_Datatype,int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Sendrecv");
     fn.PMPI_Sendrecv_replace = (int (*)(void*, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Sendrecv_replace");
     fn.PMPI_Type_contiguous = (int (*)(int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_contiguous");
     fn.PMPI_Type_vector = (int (*)(int, int, int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_vector");
     fn.PMPI_Type_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_hvector");
-    fn.PMPI_Type_indexed = (int (*)(int, int *, int *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_indexed");
-    fn.PMPI_Type_hindexed = (int (*)(int, int *, MPI_Aint *, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_hindexed");
-    fn.PMPI_Type_struct = (int (*)(int, int *, MPI_Aint *, MPI_Datatype *, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_struct");
-    fn.PMPI_Address = (int (*)(void*, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Address");
+    fn.PMPI_Type_indexed = (int (*)(int, const int*, const int*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_indexed");
+    fn.PMPI_Type_hindexed = (int (*)(int, const int*, const MPI_Aint*, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_hindexed");
+    fn.PMPI_Type_struct = (int (*)(int, const int*, const MPI_Aint*, const MPI_Datatype*, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_struct");
+    fn.PMPI_Address = (int (*)(const void*, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Address");
     fn.PMPI_Type_extent = (int (*)(MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Type_extent");
     fn.PMPI_Type_size = (int (*)(MPI_Datatype, int *))GetProcAddress(hPMPIModule, "PMPI_Type_size");
     fn.PMPI_Type_lb = (int (*)(MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Type_lb");
@@ -1468,35 +1468,35 @@
     fn.PMPI_Type_commit = (int (*)(MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_commit");
     fn.PMPI_Type_free = (int (*)(MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_free");
     fn.PMPI_Get_elements = (int (*)(MPI_Status *, MPI_Datatype, int *))GetProcAddress(hPMPIModule, "PMPI_Get_elements");
-    fn.PMPI_Pack = (int (*)(void*, int, MPI_Datatype, void *, int, int *,  MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Pack");
-    fn.PMPI_Unpack = (int (*)(void*, int, int *, void *, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Unpack");
+    fn.PMPI_Pack = (int (*)(const void*, int, MPI_Datatype, void*, int, int*,  MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Pack");
+    fn.PMPI_Unpack = (int (*)(const void*, int, int*, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Unpack");
     fn.PMPI_Pack_size = (int (*)(int, MPI_Datatype, MPI_Comm, int *))GetProcAddress(hPMPIModule, "PMPI_Pack_size");
     fn.PMPI_Barrier = (int (*)(MPI_Comm ))GetProcAddress(hPMPIModule, "PMPI_Barrier");
     fn.PMPI_Bcast = (int (*)(void*, int, MPI_Datatype, int, MPI_Comm ))GetProcAddress(hPMPIModule, "PMPI_Bcast");
-    fn.PMPI_Gather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Gather"); 
-    fn.PMPI_Gatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Gatherv"); 
-    fn.PMPI_Scatter = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Scatter");
-    fn.PMPI_Scatterv = (int (*)(void* , int *, int *,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Scatterv");
-    fn.PMPI_Allgather = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allgather");
-    fn.PMPI_Allgatherv = (int (*)(void* , int, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allgatherv");
-    fn.PMPI_Alltoall = (int (*)(void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoall");
-    fn.PMPI_Alltoallv = (int (*)(void* , int *, int *, MPI_Datatype, void*, int *, int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoallv");
-    fn.PMPI_Reduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Reduce");
+    fn.PMPI_Gather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Gather"); 
+    fn.PMPI_Gatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Gatherv"); 
+    fn.PMPI_Scatter = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Scatter");
+    fn.PMPI_Scatterv = (int (*)(const void* , const int*, const int*,  MPI_Datatype, void*, int, MPI_Datatype, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Scatterv");
+    fn.PMPI_Allgather = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allgather");
+    fn.PMPI_Allgatherv = (int (*)(const void* , int, MPI_Datatype, void*, const int *, const int *, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allgatherv");
+    fn.PMPI_Alltoall = (int (*)(const void* , int, MPI_Datatype, void*, int, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoall");
+    fn.PMPI_Alltoallv = (int (*)(const void* , const int*, const int*, MPI_Datatype, void*, const int*, const int*, MPI_Datatype, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoallv");
+    fn.PMPI_Reduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, int, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Reduce");
     fn.PMPI_Op_create = (int (*)(MPI_User_function *, int, MPI_Op *))GetProcAddress(hPMPIModule, "PMPI_Op_create");
     fn.PMPI_Op_free = (int (*)( MPI_Op *))GetProcAddress(hPMPIModule, "PMPI_Op_free");
-    fn.PMPI_Allreduce = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allreduce");
-    fn.PMPI_Reduce_scatter = (int (*)(void* , void*, int *, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Reduce_scatter");
-    fn.PMPI_Scan = (int (*)(void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hPMPIModule, "PMPI_Scan");
+    fn.PMPI_Allreduce = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Allreduce");
+    fn.PMPI_Reduce_scatter = (int (*)(const void* , void*, const int*, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Reduce_scatter");
+    fn.PMPI_Scan = (int (*)(const void* , void*, int, MPI_Datatype, MPI_Op, MPI_Comm ))GetProcAddress(hPMPIModule, "PMPI_Scan");
     fn.PMPI_Group_size = (int (*)(MPI_Group, int *))GetProcAddress(hPMPIModule, "PMPI_Group_size");
     fn.PMPI_Group_rank = (int (*)(MPI_Group, int *))GetProcAddress(hPMPIModule, "PMPI_Group_rank");
-    fn.PMPI_Group_translate_ranks = (int (* )(MPI_Group, int, int *, MPI_Group, int *))GetProcAddress(hPMPIModule, "PMPI_Group_translate_ranks");
+    fn.PMPI_Group_translate_ranks = (int (* )(MPI_Group, int, const int *, MPI_Group, int *))GetProcAddress(hPMPIModule, "PMPI_Group_translate_ranks");
     fn.PMPI_Group_compare = (int (*)(MPI_Group, MPI_Group, int *))GetProcAddress(hPMPIModule, "PMPI_Group_compare");
     fn.PMPI_Comm_group = (int (*)(MPI_Comm, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Comm_group");
     fn.PMPI_Group_union = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_union");
     fn.PMPI_Group_intersection = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_intersection");
     fn.PMPI_Group_difference = (int (*)(MPI_Group, MPI_Group, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_difference");
-    fn.PMPI_Group_incl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_incl");
-    fn.PMPI_Group_excl = (int (*)(MPI_Group, int, int *, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_excl");
+    fn.PMPI_Group_incl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_incl");
+    fn.PMPI_Group_excl = (int (*)(MPI_Group, int, const int *, MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_excl");
     fn.PMPI_Group_range_incl = (int (*)(MPI_Group, int, int [][3], MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_range_incl");
     fn.PMPI_Group_range_excl = (int (*)(MPI_Group, int, int [][3], MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_range_excl");
     fn.PMPI_Group_free = (int (*)(MPI_Group *))GetProcAddress(hPMPIModule, "PMPI_Group_free");
@@ -1518,21 +1518,21 @@
     fn.PMPI_Attr_get = (int (*)(MPI_Comm, int, void *, int *))GetProcAddress(hPMPIModule, "PMPI_Attr_get");
     fn.PMPI_Attr_delete = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "PMPI_Attr_delete");
     fn.PMPI_Topo_test = (int (*)(MPI_Comm, int *))GetProcAddress(hPMPIModule, "PMPI_Topo_test");
-    fn.PMPI_Cart_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Cart_create");
+    fn.PMPI_Cart_create = (int (*)(MPI_Comm, int, const int*, const int*, int, MPI_Comm*))GetProcAddress(hPMPIModule, "PMPI_Cart_create");
     fn.PMPI_Dims_create = (int (*)(int, int, int *))GetProcAddress(hPMPIModule, "PMPI_Dims_create");
-    fn.PMPI_Graph_create = (int (*)(MPI_Comm, int, int *, int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Graph_create");
+    fn.PMPI_Graph_create = (int (*)(MPI_Comm, int, const int *, const int *, int, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Graph_create");
     fn.PMPI_Graphdims_get = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Graphdims_get");
     fn.PMPI_Graph_get = (int (*)(MPI_Comm, int, int, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Graph_get");
     fn.PMPI_Cartdim_get = (int (*)(MPI_Comm, int *))GetProcAddress(hPMPIModule, "PMPI_Cartdim_get");
     fn.PMPI_Cart_get = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_get");
-    fn.PMPI_Cart_rank = (int (*)(MPI_Comm, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_rank");
+    fn.PMPI_Cart_rank = (int (*)(MPI_Comm, const int *, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_rank");
     fn.PMPI_Cart_coords = (int (*)(MPI_Comm, int, int, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_coords");
     fn.PMPI_Graph_neighbors_count = (int (*)(MPI_Comm, int, int *))GetProcAddress(hPMPIModule, "PMPI_Graph_neighbors_count");
     fn.PMPI_Graph_neighbors = (int (*)(MPI_Comm, int, int, int *))GetProcAddress(hPMPIModule, "PMPI_Graph_neighbors");
     fn.PMPI_Cart_shift = (int (*)(MPI_Comm, int, int, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_shift");
-    fn.PMPI_Cart_sub = (int (*)(MPI_Comm, int *, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Cart_sub");
-    fn.PMPI_Cart_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Cart_map");
-    fn.PMPI_Graph_map = (int (*)(MPI_Comm, int, int *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Graph_map");
+    fn.PMPI_Cart_sub = (int (*)(MPI_Comm, const int *, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Cart_sub");
+    fn.PMPI_Cart_map = (int (*)(MPI_Comm, int, const int*, const int*, int*))GetProcAddress(hPMPIModule, "PMPI_Cart_map");
+    fn.PMPI_Graph_map = (int (*)(MPI_Comm, int, const int *, const int *, int *))GetProcAddress(hPMPIModule, "PMPI_Graph_map");
     fn.PMPI_Get_processor_name = (int (*)(char *, int *))GetProcAddress(hPMPIModule, "PMPI_Get_processor_name");
     fn.PMPI_Get_version = (int (*)(int *, int *))GetProcAddress(hPMPIModule, "PMPI_Get_version");
     fn.PMPI_Errhandler_create = (int (*)(MPI_Handler_function *, MPI_Errhandler *))GetProcAddress(hPMPIModule, "PMPI_Errhandler_create");
@@ -1548,21 +1548,21 @@
     fn.PMPI_Initialized = (int (*)(int *))GetProcAddress(hPMPIModule, "PMPI_Initialized");
     fn.PMPI_Abort = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "PMPI_Abort");
     fn.PMPI_Pcontrol = (int (*)(const int, ...))GetProcAddress(hPMPIModule, "PMPI_Pcontrol");
-    fn.PMPI_Close_port = (int (*)(char *))GetProcAddress(hPMPIModule, "PMPI_Close_port");
-    fn.PMPI_Comm_accept = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_accept");
-    fn.PMPI_Comm_connect = (int (*)(char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_connect");
+    fn.PMPI_Close_port = (int (*)(const char *))GetProcAddress(hPMPIModule, "PMPI_Close_port");
+    fn.PMPI_Comm_accept = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_accept");
+    fn.PMPI_Comm_connect = (int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_connect");
     fn.PMPI_Comm_disconnect = (int (*)(MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_disconnect");
     fn.PMPI_Comm_get_parent = (int (*)(MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_get_parent");
     fn.PMPI_Comm_join = (int (*)(int, MPI_Comm *))GetProcAddress(hPMPIModule, "PMPI_Comm_join");
-    fn.PMPI_Comm_spawn = (int (*)(char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "PMPI_Comm_spawn");
-    fn.PMPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "PMPI_Comm_spawn_multiple"); 
-    fn.PMPI_Lookup_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Lookup_name");
+    fn.PMPI_Comm_spawn = (int (*)(const char *, char *[], int, MPI_Info, int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "PMPI_Comm_spawn");
+    fn.PMPI_Comm_spawn_multiple = (int (*)(int, char *[], char **[], const int [], MPI_Info [], int, MPI_Comm, MPI_Comm *, int []))GetProcAddress(hPMPIModule, "PMPI_Comm_spawn_multiple"); 
+    fn.PMPI_Lookup_name = (int (*)(const char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Lookup_name");
     fn.PMPI_Open_port = (int (*)(MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Open_port");
-    fn.PMPI_Publish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Publish_name");
-    fn.PMPI_Unpublish_name = (int (*)(char *, MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Unpublish_name");
-    fn.PMPI_Accumulate = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Accumulate");
+    fn.PMPI_Publish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hPMPIModule, "PMPI_Publish_name");
+    fn.PMPI_Unpublish_name = (int (*)(const char *, MPI_Info, const char *))GetProcAddress(hPMPIModule, "PMPI_Unpublish_name");
+    fn.PMPI_Accumulate = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype,  MPI_Op, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Accumulate");
     fn.PMPI_Get = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Get");
-    fn.PMPI_Put = (int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Put");
+    fn.PMPI_Put = (int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Put");
     fn.PMPI_Win_complete = (int (*)(MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Win_complete");
     fn.PMPI_Win_create = (int (*)(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *))GetProcAddress(hPMPIModule, "PMPI_Win_create");
     fn.PMPI_Win_fence = (int (*)(int, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Win_fence");
@@ -1574,11 +1574,11 @@
     fn.PMPI_Win_test = (int (*)(MPI_Win, int *))GetProcAddress(hPMPIModule, "PMPI_Win_test");
     fn.PMPI_Win_unlock = (int (*)(int, MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Win_unlock");
     fn.PMPI_Win_wait = (int (*)(MPI_Win))GetProcAddress(hPMPIModule, "PMPI_Win_wait");
-    fn.PMPI_Alltoallw = (int (*)(void *, int [], int [], MPI_Datatype [], void *, int [], int [], MPI_Datatype [], MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoallw");
-    fn.PMPI_Exscan = (int (*)(void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Exscan");
+    fn.PMPI_Alltoallw = (int (*)(const void*, const int [], const int [], const MPI_Datatype [], void*, const int [], const int [], const MPI_Datatype [], MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Alltoallw");
+    fn.PMPI_Exscan = (int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))GetProcAddress(hPMPIModule, "PMPI_Exscan");
     fn.PMPI_Add_error_class = (int (*)(int *))GetProcAddress(hPMPIModule, "PMPI_Add_error_class");
     fn.PMPI_Add_error_code = (int (*)(int, int *))GetProcAddress(hPMPIModule, "PMPI_Add_error_code");
-    fn.PMPI_Add_error_string = (int (*)(int, char *))GetProcAddress(hPMPIModule, "PMPI_Add_error_string");
+    fn.PMPI_Add_error_string = (int (*)(int, const char *))GetProcAddress(hPMPIModule, "PMPI_Add_error_string");
     fn.PMPI_Comm_call_errhandler = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "PMPI_Comm_call_errhandler");
     fn.PMPI_Comm_create_keyval = (int (*)(MPI_Comm_copy_attr_function *, MPI_Comm_delete_attr_function *, int *, void *))GetProcAddress(hPMPIModule, "PMPI_Comm_create_keyval");
     fn.PMPI_Comm_delete_attr = (int (*)(MPI_Comm, int))GetProcAddress(hPMPIModule, "PMPI_Comm_delete_attr");
@@ -1586,7 +1586,7 @@
     fn.PMPI_Comm_get_attr = (int (*)(MPI_Comm, int, void *, int *))GetProcAddress(hPMPIModule, "PMPI_Comm_get_attr");
     fn.PMPI_Comm_get_name = (int (*)(MPI_Comm, char *, int *))GetProcAddress(hPMPIModule, "PMPI_Comm_get_name");
     fn.PMPI_Comm_set_attr = (int (*)(MPI_Comm, int, void *))GetProcAddress(hPMPIModule, "PMPI_Comm_set_attr");
-    fn.PMPI_Comm_set_name = (int (*)(MPI_Comm, char *))GetProcAddress(hPMPIModule, "PMPI_Comm_set_name");
+    fn.PMPI_Comm_set_name = (int (*)(MPI_Comm, const char *))GetProcAddress(hPMPIModule, "PMPI_Comm_set_name");
     fn.PMPI_File_call_errhandler = (int (*)(MPI_File, int))GetProcAddress(hPMPIModule, "PMPI_File_call_errhandler");
     fn.PMPI_Grequest_complete = (int (*)(MPI_Request))GetProcAddress(hPMPIModule, "PMPI_Grequest_complete");
     fn.PMPI_Grequest_start = (int (*)(MPI_Grequest_query_function *, MPI_Grequest_free_function *, MPI_Grequest_cancel_function *, void *, MPI_Request *))GetProcAddress(hPMPIModule, "PMPI_Grequest_start");
@@ -1604,7 +1604,7 @@
     fn.PMPI_Type_get_envelope = (int (*)(MPI_Datatype, int *, int *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Type_get_envelope");
     fn.PMPI_Type_get_name = (int (*)(MPI_Datatype, char *, int *))GetProcAddress(hPMPIModule, "PMPI_Type_get_name");
     fn.PMPI_Type_set_attr = (int (*)(MPI_Datatype, int, void *))GetProcAddress(hPMPIModule, "PMPI_Type_set_attr");
-    fn.PMPI_Type_set_name = (int (*)(MPI_Datatype, char *))GetProcAddress(hPMPIModule, "PMPI_Type_set_name");
+    fn.PMPI_Type_set_name = (int (*)(MPI_Datatype, const char *))GetProcAddress(hPMPIModule, "PMPI_Type_set_name");
     fn.PMPI_Type_match_size = (int (*)( int, int, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_match_size");
     fn.PMPI_Win_call_errhandler = (int (*)(MPI_Win, int))GetProcAddress(hPMPIModule, "PMPI_Win_call_errhandler");
     fn.PMPI_Win_create_keyval = (int (*)(MPI_Win_copy_attr_function *, MPI_Win_delete_attr_function *, int *, void *))GetProcAddress(hPMPIModule, "PMPI_Win_create_keyval");
@@ -1613,7 +1613,7 @@
     fn.PMPI_Win_get_attr = (int (*)(MPI_Win, int, void *, int *))GetProcAddress(hPMPIModule, "PMPI_Win_get_attr");
     fn.PMPI_Win_get_name = (int (*)(MPI_Win, char *, int *))GetProcAddress(hPMPIModule, "PMPI_Win_get_name");
     fn.PMPI_Win_set_attr = (int (*)(MPI_Win, int, void *))GetProcAddress(hPMPIModule, "PMPI_Win_set_attr");
-    fn.PMPI_Win_set_name = (int (*)(MPI_Win, char *))GetProcAddress(hPMPIModule, "PMPI_Win_set_name");
+    fn.PMPI_Win_set_name = (int (*)(MPI_Win, const char *))GetProcAddress(hPMPIModule, "PMPI_Win_set_name");
     fn.PMPI_Alloc_mem = (int (*)(MPI_Aint, MPI_Info info, void *baseptr))GetProcAddress(hPMPIModule, "PMPI_Alloc_mem");
     fn.PMPI_Comm_create_errhandler = (int (*)(MPI_Comm_errhandler_fn *, MPI_Errhandler *))GetProcAddress(hPMPIModule, "PMPI_Comm_create_errhandler");
     fn.PMPI_Comm_get_errhandler = (int (*)(MPI_Comm, MPI_Errhandler *))GetProcAddress(hPMPIModule, "PMPI_Comm_get_errhandler");
@@ -1623,31 +1623,31 @@
     fn.PMPI_File_set_errhandler = (int (*)(MPI_File, MPI_Errhandler))GetProcAddress(hPMPIModule, "PMPI_File_set_errhandler");
     fn.PMPI_Finalized = (int (*)(int *))GetProcAddress(hPMPIModule, "PMPI_Finalized");
     fn.PMPI_Free_mem = (int (*)(void *))GetProcAddress(hPMPIModule, "PMPI_Free_mem");
-    fn.PMPI_Get_address = (int (*)(void *, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Get_address");
+    fn.PMPI_Get_address = (int (*)(const void *, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Get_address");
     fn.PMPI_Info_create = (int (*)(MPI_Info *))GetProcAddress(hPMPIModule, "PMPI_Info_create");
-    fn.PMPI_Info_delete = (int (*)(MPI_Info, char *))GetProcAddress(hPMPIModule, "PMPI_Info_delete");
+    fn.PMPI_Info_delete = (int (*)(MPI_Info, const char *))GetProcAddress(hPMPIModule, "PMPI_Info_delete");
     fn.PMPI_Info_dup = (int (*)(MPI_Info, MPI_Info *))GetProcAddress(hPMPIModule, "PMPI_Info_dup");
     fn.PMPI_Info_free = (int (*)(MPI_Info *info))GetProcAddress(hPMPIModule, "PMPI_Info_free");
-    fn.PMPI_Info_get = (int (*)(MPI_Info, char *, int, char *, int *))GetProcAddress(hPMPIModule, "PMPI_Info_get");
+    fn.PMPI_Info_get = (int (*)(MPI_Info, const char *, int, char *, int *))GetProcAddress(hPMPIModule, "PMPI_Info_get");
     fn.PMPI_Info_get_nkeys = (int (*)(MPI_Info, int *))GetProcAddress(hPMPIModule, "PMPI_Info_get_nkeys");
     fn.PMPI_Info_get_nthkey = (int (*)(MPI_Info, int, char *))GetProcAddress(hPMPIModule, "PMPI_Info_get_nthkey");
-    fn.PMPI_Info_get_valuelen = (int (*)(MPI_Info, char *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Info_get_valuelen");
-    fn.PMPI_Info_set = (int (*)(MPI_Info, char *, char *))GetProcAddress(hPMPIModule, "PMPI_Info_set");
-    fn.PMPI_Pack_external = (int (*)(char *, void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Pack_external"); 
-    fn.PMPI_Pack_external_size = (int (*)(char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Pack_external_size"); 
+    fn.PMPI_Info_get_valuelen = (int (*)(MPI_Info, const char *, int *, int *))GetProcAddress(hPMPIModule, "PMPI_Info_get_valuelen");
+    fn.PMPI_Info_set = (int (*)(MPI_Info, const char *, const char *))GetProcAddress(hPMPIModule, "PMPI_Info_set");
+    fn.PMPI_Pack_external = (int (*)(const char*, const void*, int, MPI_Datatype, void*, MPI_Aint, MPI_Aint*))GetProcAddress(hPMPIModule, "PMPI_Pack_external"); 
+    fn.PMPI_Pack_external_size = (int (*)(const char *, int, MPI_Datatype, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Pack_external_size"); 
     fn.PMPI_Request_get_status = (int (*)(MPI_Request, int *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Request_get_status");
-    fn.PMPI_Status_c2f = (int (*)(MPI_Status *, MPI_Fint *))GetProcAddress(hPMPIModule, "PMPI_Status_c2f");
-    fn.PMPI_Status_f2c = (int (*)(MPI_Fint *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Status_f2c");
-    fn.PMPI_Type_create_darray = (int (*)(int, int, int, int [], int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_darray");
-    fn.PMPI_Type_create_hindexed = (int (*)(int, int [], MPI_Aint [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_hindexed");
+    fn.PMPI_Status_c2f = (int (*)(const MPI_Status *, MPI_Fint *))GetProcAddress(hPMPIModule, "PMPI_Status_c2f");
+    fn.PMPI_Status_f2c = (int (*)(const MPI_Fint *, MPI_Status *))GetProcAddress(hPMPIModule, "PMPI_Status_f2c");
+    fn.PMPI_Type_create_darray = (int (*)(int, int, int, const int [], const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_create_darray");
+    fn.PMPI_Type_create_hindexed = (int (*)(int, const int [], const MPI_Aint [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_create_hindexed");
     fn.PMPI_Type_create_hvector = (int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_hvector");
-    fn.PMPI_Type_create_indexed_block = (int (*)(int, int, int [], MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_indexed_block");
+    fn.PMPI_Type_create_indexed_block = (int (*)(int, int, const int [], MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_create_indexed_block");
     fn.PMPI_Type_create_resized = (int (*)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_resized");
-    fn.PMPI_Type_create_struct = (int (*)(int, int [], MPI_Aint [], MPI_Datatype [], MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_struct");
-    fn.PMPI_Type_create_subarray = (int (*)(int, int [], int [], int [], int, MPI_Datatype, MPI_Datatype *))GetProcAddress(hPMPIModule, "PMPI_Type_create_subarray");
+    fn.PMPI_Type_create_struct = (int (*)(int, const int [], const MPI_Aint [], const MPI_Datatype [], MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_create_struct");
+    fn.PMPI_Type_create_subarray = (int (*)(int, const int [], const int [], const int [], int, MPI_Datatype, MPI_Datatype*))GetProcAddress(hPMPIModule, "PMPI_Type_create_subarray");
     fn.PMPI_Type_get_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Type_get_extent");
     fn.PMPI_Type_get_true_extent = (int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))GetProcAddress(hPMPIModule, "PMPI_Type_get_true_extent");
-    fn.PMPI_Unpack_external = (int (*)(char *, void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_Unpack_external"); 
+    fn.PMPI_Unpack_external = (int (*)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))GetProcAddress(hPMPIModule, "PMPI_Unpack_external"); 
     fn.PMPI_Win_create_errhandler = (int (*)(MPI_Win_errhandler_fn *, MPI_Errhandler *))GetProcAddress(hPMPIModule, "PMPI_Win_create_errhandler");
     fn.PMPI_Win_get_errhandler = (int (*)(MPI_Win, MPI_Errhandler *))GetProcAddress(hPMPIModule, "PMPI_Win_get_errhandler");
     fn.PMPI_Win_set_errhandler = (int (*)(MPI_Win, MPI_Errhandler))GetProcAddress(hPMPIModule, "PMPI_Win_set_errhandler");
@@ -1934,7 +1934,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Status_c2f
-int MPI_Status_c2f( MPI_Status *c_status, MPI_Fint *f_status )
+int MPI_Status_c2f( const MPI_Status *c_status, MPI_Fint *f_status )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Status_c2f(c_status, f_status);
@@ -1942,7 +1942,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Status_f2c
-int MPI_Status_f2c( MPI_Fint *f_status, MPI_Status *c_status )
+int MPI_Status_f2c( const MPI_Fint *f_status, MPI_Status *c_status )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Status_f2c(f_status, c_status);
@@ -2119,7 +2119,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Allgather
-int MPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                   void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                   MPI_Comm comm)
 {
@@ -2129,8 +2129,8 @@
 
 #undef FCNAME
 #define FCNAME MPI_Allgatherv
-int MPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
-                   void *recvbuf, int *recvcounts, int *displs, 
+int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+                   void *recvbuf, const int *recvcounts, const int *displs, 
                    MPI_Datatype recvtype, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2139,7 +2139,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Allreduce 
-int MPI_Allreduce ( void *sendbuf, void *recvbuf, int count, 
+int MPI_Allreduce ( const void *sendbuf, void *recvbuf, int count, 
 		    MPI_Datatype datatype, MPI_Op op, MPI_Comm comm )
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2148,7 +2148,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Alltoall
-int MPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                  void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                  MPI_Comm comm)
 {
@@ -2158,9 +2158,9 @@
 
 #undef FCNAME
 #define FCNAME MPI_Alltoallv
-int MPI_Alltoallv(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype sendtype, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
+int MPI_Alltoallv(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  MPI_Datatype sendtype, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Alltoallv(sendbuf, sendcnts, sdispls, sendtype, recvbuf, recvcnts, rdispls, recvtype, comm);
@@ -2168,9 +2168,9 @@
 
 #undef FCNAME
 #define FCNAME MPI_Alltoallw
-int MPI_Alltoallw(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype *sendtypes, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype *recvtypes, MPI_Comm comm)
+int MPI_Alltoallw(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  const MPI_Datatype *sendtypes, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, const MPI_Datatype *recvtypes, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Alltoallw(sendbuf, sendcnts, sdispls, sendtypes, recvbuf, recvcnts, rdispls, recvtypes, comm);
@@ -2195,7 +2195,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Exscan
-int MPI_Exscan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
                MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2204,7 +2204,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Gather
-int MPI_Gather(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPI_Gather(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                int root, MPI_Comm comm)
 {
@@ -2214,8 +2214,8 @@
 
 #undef FCNAME
 #define FCNAME MPI_Gatherv
-int MPI_Gatherv(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
-                void *recvbuf, int *recvcnts, int *displs, 
+int MPI_Gatherv(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+                void *recvbuf, const int *recvcnts, const int *displs, 
                 MPI_Datatype recvtype, int root, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2240,7 +2240,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Reduce
-int MPI_Reduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	       MPI_Op op, int root, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2249,7 +2249,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Reduce_scatter
-int MPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcnts, 
+int MPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int *recvcnts, 
 		       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2258,7 +2258,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Scan
-int MPI_Scan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int MPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	     MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2267,7 +2267,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Scatter
-int MPI_Scatter(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int MPI_Scatter(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
 		void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, 
 		MPI_Comm comm)
 {
@@ -2277,7 +2277,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Scatterv
-int MPI_Scatterv( void *sendbuf, int *sendcnts, int *displs, 
+int MPI_Scatterv( const void *sendbuf, const int *sendcnts, const int *displs, 
 		  MPI_Datatype sendtype, void *recvbuf, int recvcnt,
 		  MPI_Datatype recvtype,
 		  int root, MPI_Comm comm)
@@ -2360,7 +2360,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Comm_set_name
-int MPI_Comm_set_name(MPI_Comm comm, char *comm_name)
+int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Comm_set_name(comm, comm_name);
@@ -2410,7 +2410,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Address
-int MPI_Address( void *location, MPI_Aint *address )
+int MPI_Address( const void *location, MPI_Aint *address )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Address(location, address);
@@ -2418,7 +2418,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Get_address
-int MPI_Get_address(void *location, MPI_Aint *address)
+int MPI_Get_address(const void *location, MPI_Aint *address)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Get_address(location, address);
@@ -2442,7 +2442,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Pack
-int MPI_Pack(void *inbuf,
+int MPI_Pack(const void *inbuf,
 	     int incount,
 	     MPI_Datatype datatype,
 	     void *outbuf, 
@@ -2456,8 +2456,8 @@
 
 #undef FCNAME
 #define FCNAME MPI_Pack_external
-int MPI_Pack_external(char *datarep,
-		      void *inbuf,
+int MPI_Pack_external(const char *datarep,
+		      const void *inbuf,
 		      int incount,
 		      MPI_Datatype datatype,
 		      void *outbuf,
@@ -2470,7 +2470,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Pack_external_size
-int MPI_Pack_external_size(char *datarep,
+int MPI_Pack_external_size(const char *datarep,
 			   int incount,
 			   MPI_Datatype datatype,
 			   MPI_Aint *size)
@@ -2492,7 +2492,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Register_datarep
-int MPI_Register_datarep(char *datarep, 
+int MPI_Register_datarep(const char *datarep, 
 			 MPI_Datarep_conversion_function *read_conversion_fn, 
 			 MPI_Datarep_conversion_function *write_conversion_fn, 
 			 MPI_Datarep_extent_function *dtype_file_extent_fn, 
@@ -2534,10 +2534,10 @@
 int MPI_Type_create_darray(int size,
 			   int rank,
 			   int ndims,
-			   int array_of_gsizes[],
-			   int array_of_distribs[],
-			   int array_of_dargs[],
-			   int array_of_psizes[],
+			   const int array_of_gsizes[],
+			   const int array_of_distribs[],
+			   const int array_of_dargs[],
+			   const int array_of_psizes[],
 			   int order,
 			   MPI_Datatype oldtype,
 			   MPI_Datatype *newtype)
@@ -2549,8 +2549,8 @@
 #undef FCNAME
 #define FCNAME MPI_Type_create_hindexed
 int MPI_Type_create_hindexed(int count,
-			     int blocklengths[],
-			     MPI_Aint displacements[],
+			     const int blocklengths[],
+			     const MPI_Aint displacements[],
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
 {
@@ -2574,7 +2574,7 @@
 #define FCNAME MPI_Type_create_indexed_block
 int MPI_Type_create_indexed_block(int count,
 				  int blocklength,
-				  int array_of_displacements[],
+				  const int array_of_displacements[],
 				  MPI_Datatype oldtype,
 				  MPI_Datatype *newtype)
 {
@@ -2596,9 +2596,9 @@
 #undef FCNAME
 #define FCNAME MPI_Type_create_struct
 int MPI_Type_create_struct(int count,
-			   int array_of_blocklengths[],
-			   MPI_Aint array_of_displacements[],
-			   MPI_Datatype array_of_types[],
+			   const int array_of_blocklengths[],
+			   const MPI_Aint array_of_displacements[],
+			   const MPI_Datatype array_of_types[],
 			   MPI_Datatype *newtype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2608,9 +2608,9 @@
 #undef FCNAME
 #define FCNAME MPI_Type_create_subarray
 int MPI_Type_create_subarray(int ndims,
-			     int array_of_sizes[],
-			     int array_of_subsizes[],
-			     int array_of_starts[],
+			     const int array_of_sizes[],
+			     const int array_of_subsizes[],
+			     const int array_of_starts[],
 			     int order,
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
@@ -2697,8 +2697,8 @@
 #undef FCNAME
 #define FCNAME MPI_Type_hindexed
 int MPI_Type_hindexed(int count,
-		      int blocklens[],
-		      MPI_Aint indices[],
+		      const int blocklens[],
+		      const MPI_Aint indices[],
 		      MPI_Datatype old_type,
 		      MPI_Datatype *newtype)
 {
@@ -2721,8 +2721,8 @@
 #undef FCNAME
 #define FCNAME MPI_Type_indexed
 int MPI_Type_indexed(int count,
-		     int blocklens[],
-		     int indices[],
+		     const int blocklens[],
+		     const int indices[],
 		     MPI_Datatype old_type,
 		     MPI_Datatype *newtype)
 {
@@ -2748,7 +2748,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Type_set_name
-int MPI_Type_set_name(MPI_Datatype type, char *type_name)
+int MPI_Type_set_name(MPI_Datatype type, const char *type_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Type_set_name(type, type_name);
@@ -2765,9 +2765,9 @@
 #undef FCNAME
 #define FCNAME MPI_Type_struct
 int MPI_Type_struct(int count,
-		    int blocklens[],
-		    MPI_Aint indices[],
-		    MPI_Datatype old_types[],
+		    const int blocklens[],
+		    const MPI_Aint indices[],
+		    const MPI_Datatype old_types[],
 		    MPI_Datatype *newtype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -2796,7 +2796,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Unpack
-int MPI_Unpack(void *inbuf,
+int MPI_Unpack(const void *inbuf,
 	       int insize,
 	       int *position,
 	       void *outbuf,
@@ -2810,8 +2810,8 @@
 
 #undef FCNAME
 #define FCNAME MPI_Unpack_external
-int MPI_Unpack_external(char *datarep,
-			void *inbuf,
+int MPI_Unpack_external(const char *datarep,
+			const void *inbuf,
 			MPI_Aint insize,
 			MPI_Aint *position,
 			void *outbuf,
@@ -2840,7 +2840,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Add_error_string
-int MPI_Add_error_string(int errorcode, char *string)
+int MPI_Add_error_string(int errorcode, const char *string)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Add_error_string(errorcode, string);
@@ -3012,7 +3012,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Group_excl
-int MPI_Group_excl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int MPI_Group_excl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Group_excl(group, n, ranks, newgroup);
@@ -3028,7 +3028,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Group_incl
-int MPI_Group_incl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int MPI_Group_incl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Group_incl(group, n, ranks, newgroup);
@@ -3078,7 +3078,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Group_translate_ranks
-int MPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1, MPI_Group group2, int *ranks2)
+int MPI_Group_translate_ranks(MPI_Group group1, int n, const int *ranks1, MPI_Group group2, int *ranks2)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Group_translate_ranks(group1, n, ranks1, group2, ranks2);
@@ -3173,7 +3173,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Bsend
-int MPI_Bsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3182,7 +3182,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Bsend_init
-int MPI_Bsend_init(void *buf, int count, MPI_Datatype datatype, 
+int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, 
                    int dest, int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3234,7 +3234,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Ibsend
-int MPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3261,7 +3261,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Irsend
-int MPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3270,7 +3270,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Isend
-int MPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3279,7 +3279,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Issend
-int MPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3330,7 +3330,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Rsend
-int MPI_Rsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3339,7 +3339,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Rsend_init
-int MPI_Rsend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3348,7 +3348,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Send
-int MPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	     MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3357,7 +3357,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Sendrecv
-int MPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
 		 int dest, int sendtag,
 		 void *recvbuf, int recvcount, MPI_Datatype recvtype, 
 		 int source, int recvtag,
@@ -3379,7 +3379,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Send_init
-int MPI_Send_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		  int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3388,7 +3388,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Ssend
-int MPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3397,7 +3397,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Ssend_init
-int MPI_Ssend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3465,7 +3465,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Test_cancelled
-int MPI_Test_cancelled(MPI_Status *status, int *flag)
+int MPI_Test_cancelled(const MPI_Status *status, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Test_cancelled(status, flag);
@@ -3509,7 +3509,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Accumulate
-int MPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype
+int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype
                    origin_datatype, int target_rank, MPI_Aint
                    target_disp, int target_count, MPI_Datatype
                    target_datatype, MPI_Op op, MPI_Win win)
@@ -3547,7 +3547,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Put
-int MPI_Put(void *origin_addr, int origin_count, MPI_Datatype
+int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype
             origin_datatype, int target_rank, MPI_Aint target_disp,
             int target_count, MPI_Datatype target_datatype, MPI_Win
             win)
@@ -3623,7 +3623,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Win_set_name
-int MPI_Win_set_name(MPI_Win win, char *win_name)
+int MPI_Win_set_name(MPI_Win win, const char *win_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Win_set_name(win, win_name);
@@ -3671,7 +3671,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_delete
-int MPI_File_delete(char *filename, MPI_Info info)
+int MPI_File_delete(const char *filename, MPI_Info info)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_File_delete(filename, info);
@@ -3818,7 +3818,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_iwrite
-int MPI_File_iwrite(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_iwrite(MPI_File mpi_fh, const void *buf, int count, 
 		    MPI_Datatype datatype, MPIO_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3827,7 +3827,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_iwrite_at
-int MPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                        int count, MPI_Datatype datatype, 
                        MPIO_Request *request)
 {
@@ -3837,7 +3837,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_iwrite_shared
-int MPI_File_iwrite_shared(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_iwrite_shared(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPIO_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -3846,7 +3846,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_open
-int MPI_File_open(MPI_Comm comm, char *filename, int amode, 
+int MPI_File_open(MPI_Comm comm, const char *filename, int amode, 
                   MPI_Info info, MPI_File *fh)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4010,7 +4010,7 @@
 #undef FCNAME
 #define FCNAME MPI_File_set_view
 int MPI_File_set_view(MPI_File mpi_fh, MPI_Offset disp, MPI_Datatype etype,
-		      MPI_Datatype filetype, char *datarep, MPI_Info info)
+		      MPI_Datatype filetype, const char *datarep, MPI_Info info)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_File_set_view(mpi_fh, disp, etype, filetype, datarep, info);
@@ -4018,7 +4018,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write
-int MPI_File_write(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write(MPI_File mpi_fh, const void *buf, int count, 
                    MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4027,7 +4027,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_all
-int MPI_File_write_all(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_all(MPI_File mpi_fh, const void *buf, int count, 
                        MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4036,7 +4036,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_all_begin
-int MPI_File_write_all_begin(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_all_begin(MPI_File mpi_fh, const void *buf, int count, 
 			     MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4045,7 +4045,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_all_end
-int MPI_File_write_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_File_write_all_end(mpi_fh, buf, status);
@@ -4053,7 +4053,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_at
-int MPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                       int count, MPI_Datatype datatype, 
                       MPI_Status *status)
 {
@@ -4063,7 +4063,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_at_all
-int MPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                           int count, MPI_Datatype datatype, 
                           MPI_Status *status)
 {
@@ -4073,7 +4073,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_ordered
-int MPI_File_write_ordered(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_ordered(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4082,7 +4082,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_ordered_begin
-int MPI_File_write_ordered_begin(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_ordered_begin(MPI_File mpi_fh, const void *buf, int count, 
 				 MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4091,7 +4091,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_ordered_end
-int MPI_File_write_ordered_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_ordered_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_File_write_ordered_end(mpi_fh, buf, status);
@@ -4099,7 +4099,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_shared
-int MPI_File_write_shared(MPI_File mpi_fh, void *buf, int count, 
+int MPI_File_write_shared(MPI_File mpi_fh, const void *buf, int count, 
                           MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4108,7 +4108,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_at_all_begin
-int MPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int MPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
 				int count, MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4117,7 +4117,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_File_write_at_all_end
-int MPI_File_write_at_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int MPI_File_write_at_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_File_write_at_all_end(mpi_fh, buf, status);
@@ -4133,7 +4133,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Info_delete
-int MPI_Info_delete(MPI_Info info, char *key)
+int MPI_Info_delete(MPI_Info info, const char *key)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Info_delete(info, key);
@@ -4157,7 +4157,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Info_get
-int MPI_Info_get(MPI_Info info, char *key, int valuelen, char *value, int *flag)
+int MPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Info_get(info, key, valuelen, value, flag);
@@ -4181,7 +4181,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Info_get_valuelen
-int MPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, int *flag)
+int MPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Info_get_valuelen(info, key, valuelen, flag);
@@ -4189,7 +4189,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Info_set
-int MPI_Info_set(MPI_Info info, char *key, char *value)
+int MPI_Info_set(MPI_Info info, const char *key, const char *value)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Info_set(info, key, value);
@@ -4197,7 +4197,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Close_port
-int MPI_Close_port(char *port_name)
+int MPI_Close_port(const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Close_port(port_name);
@@ -4205,7 +4205,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Comm_accept
-int MPI_Comm_accept(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int MPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                     MPI_Comm *newcomm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4214,7 +4214,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Comm_connect
-int MPI_Comm_connect(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int MPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                      MPI_Comm *newcomm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4247,7 +4247,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Comm_spawn
-int MPI_Comm_spawn(char *command, char *argv[], int maxprocs, MPI_Info info, 
+int MPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, 
 		   int root, MPI_Comm comm, MPI_Comm *intercomm,
 		   int array_of_errcodes[])
 {
@@ -4257,7 +4257,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Comm_spawn_multiple
-int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char* *array_of_argv[], int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
+int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char* *array_of_argv[], const int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes);
@@ -4265,7 +4265,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Lookup_name
-int MPI_Lookup_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Lookup_name(service_name, info, port_name);
@@ -4281,7 +4281,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Publish_name
-int MPI_Publish_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Publish_name(service_name, info, port_name);
@@ -4289,7 +4289,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Unpublish_name
-int MPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name)
+int MPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Unpublish_name(service_name, info, port_name);
@@ -4313,7 +4313,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Cart_create
-int MPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
+int MPI_Cart_create(MPI_Comm comm_old, int ndims, const int *dims, const int *periods, 
 		    int reorder, MPI_Comm *comm_cart)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4331,7 +4331,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Cart_map
-int MPI_Cart_map(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
+int MPI_Cart_map(MPI_Comm comm_old, int ndims, const int *dims, const int *periods, 
 		 int *newrank)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4340,7 +4340,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Cart_rank
-int MPI_Cart_rank(MPI_Comm comm, int *coords, int *rank)
+int MPI_Cart_rank(MPI_Comm comm, const int *coords, int *rank)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Cart_rank(comm, coords, rank);
@@ -4357,7 +4357,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Cart_sub
-int MPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new)
+int MPI_Cart_sub(MPI_Comm comm, const int *remain_dims, MPI_Comm *comm_new)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.MPI_Cart_sub(comm, remain_dims, comm_new);
@@ -4373,7 +4373,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Graph_create
-int MPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index, int *edges, 
+int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int *index, const int *edges, 
 		     int reorder, MPI_Comm *comm_graph)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4407,7 +4407,7 @@
 
 #undef FCNAME
 #define FCNAME MPI_Graph_map
-int MPI_Graph_map(MPI_Comm comm_old, int nnodes, int *index, int *edges,
+int MPI_Graph_map(MPI_Comm comm_old, int nnodes, const int *index, const int *edges,
                   int *newrank)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4474,7 +4474,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Status_c2f
-int PMPI_Status_c2f( MPI_Status *c_status, MPI_Fint *f_status )
+int PMPI_Status_c2f( const MPI_Status *c_status, MPI_Fint *f_status )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Status_c2f(c_status, f_status);
@@ -4482,7 +4482,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Status_f2c
-int PMPI_Status_f2c( MPI_Fint *f_status, MPI_Status *c_status )
+int PMPI_Status_f2c( const MPI_Fint *f_status, MPI_Status *c_status )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Status_f2c(f_status, c_status);
@@ -4659,7 +4659,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Allgather
-int PMPI_Allgather(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int PMPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                   void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                   MPI_Comm comm)
 {
@@ -4669,8 +4669,8 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Allgatherv
-int PMPI_Allgatherv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
-                   void *recvbuf, int *recvcounts, int *displs, 
+int PMPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+                   void *recvbuf, const int *recvcounts, const int *displs, 
                    MPI_Datatype recvtype, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4679,7 +4679,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Allreduce 
-int PMPI_Allreduce ( void *sendbuf, void *recvbuf, int count, 
+int PMPI_Allreduce ( const void *sendbuf, void *recvbuf, int count, 
 		    MPI_Datatype datatype, MPI_Op op, MPI_Comm comm )
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4688,7 +4688,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Alltoall
-int PMPI_Alltoall(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int PMPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
                  void *recvbuf, int recvcount, MPI_Datatype recvtype, 
                  MPI_Comm comm)
 {
@@ -4698,9 +4698,9 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Alltoallv
-int PMPI_Alltoallv(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype sendtype, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
+int PMPI_Alltoallv(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  MPI_Datatype sendtype, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, MPI_Datatype recvtype, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Alltoallv(sendbuf, sendcnts, sdispls, sendtype, recvbuf, recvcnts, rdispls, recvtype, comm);
@@ -4708,9 +4708,9 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Alltoallw
-int PMPI_Alltoallw(void *sendbuf, int *sendcnts, int *sdispls, 
-                  MPI_Datatype *sendtypes, void *recvbuf, int *recvcnts, 
-                  int *rdispls, MPI_Datatype *recvtypes, MPI_Comm comm)
+int PMPI_Alltoallw(const void *sendbuf, const int *sendcnts, const int *sdispls, 
+                  const MPI_Datatype *sendtypes, void *recvbuf, const int *recvcnts, 
+                  const int *rdispls, const MPI_Datatype *recvtypes, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Alltoallw(sendbuf, sendcnts, sdispls, sendtypes, recvbuf, recvcnts, rdispls, recvtypes, comm);
@@ -4735,7 +4735,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Exscan
-int PMPI_Exscan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int PMPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
                MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4744,7 +4744,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Gather
-int PMPI_Gather(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int PMPI_Gather(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
                void *recvbuf, int recvcnt, MPI_Datatype recvtype, 
                int root, MPI_Comm comm)
 {
@@ -4754,8 +4754,8 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Gatherv
-int PMPI_Gatherv(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
-                void *recvbuf, int *recvcnts, int *displs, 
+int PMPI_Gatherv(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+                void *recvbuf, const int *recvcnts, const int *displs, 
                 MPI_Datatype recvtype, int root, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4780,7 +4780,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Reduce
-int PMPI_Reduce(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int PMPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	       MPI_Op op, int root, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4789,7 +4789,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Reduce_scatter
-int PMPI_Reduce_scatter(void *sendbuf, void *recvbuf, int *recvcnts, 
+int PMPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int *recvcnts, 
 		       MPI_Datatype datatype, MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4798,7 +4798,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Scan
-int PMPI_Scan(void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
+int PMPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, 
 	     MPI_Op op, MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -4807,7 +4807,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Scatter
-int PMPI_Scatter(void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
+int PMPI_Scatter(const void *sendbuf, int sendcnt, MPI_Datatype sendtype, 
 		void *recvbuf, int recvcnt, MPI_Datatype recvtype, int root, 
 		MPI_Comm comm)
 {
@@ -4817,7 +4817,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Scatterv
-int PMPI_Scatterv( void *sendbuf, int *sendcnts, int *displs, 
+int PMPI_Scatterv( const void *sendbuf, const int *sendcnts, const int *displs, 
 		  MPI_Datatype sendtype, void *recvbuf, int recvcnt,
 		  MPI_Datatype recvtype,
 		  int root, MPI_Comm comm)
@@ -4900,7 +4900,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Comm_set_name
-int PMPI_Comm_set_name(MPI_Comm comm, char *comm_name)
+int PMPI_Comm_set_name(MPI_Comm comm, const char *comm_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Comm_set_name(comm, comm_name);
@@ -4950,7 +4950,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Address
-int PMPI_Address( void *location, MPI_Aint *address )
+int PMPI_Address( const void *location, MPI_Aint *address )
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Address(location, address);
@@ -4958,7 +4958,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Get_address
-int PMPI_Get_address(void *location, MPI_Aint *address)
+int PMPI_Get_address(const void *location, MPI_Aint *address)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Get_address(location, address);
@@ -4982,7 +4982,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Pack
-int PMPI_Pack(void *inbuf,
+int PMPI_Pack(const void *inbuf,
 	     int incount,
 	     MPI_Datatype datatype,
 	     void *outbuf, 
@@ -4996,8 +4996,8 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Pack_external
-int PMPI_Pack_external(char *datarep,
-		      void *inbuf,
+int PMPI_Pack_external(const char *datarep,
+		      const void *inbuf,
 		      int incount,
 		      MPI_Datatype datatype,
 		      void *outbuf,
@@ -5010,7 +5010,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Pack_external_size
-int PMPI_Pack_external_size(char *datarep,
+int PMPI_Pack_external_size(const char *datarep,
 			   int incount,
 			   MPI_Datatype datatype,
 			   MPI_Aint *size)
@@ -5032,7 +5032,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Register_datarep
-int PMPI_Register_datarep(char *datarep, 
+int PMPI_Register_datarep(const char *datarep, 
 			 MPI_Datarep_conversion_function *read_conversion_fn, 
 			 MPI_Datarep_conversion_function *write_conversion_fn, 
 			 MPI_Datarep_extent_function *dtype_file_extent_fn, 
@@ -5074,10 +5074,10 @@
 int PMPI_Type_create_darray(int size,
 			   int rank,
 			   int ndims,
-			   int array_of_gsizes[],
-			   int array_of_distribs[],
-			   int array_of_dargs[],
-			   int array_of_psizes[],
+			   const int array_of_gsizes[],
+			   const int array_of_distribs[],
+			   const int array_of_dargs[],
+			   const int array_of_psizes[],
 			   int order,
 			   MPI_Datatype oldtype,
 			   MPI_Datatype *newtype)
@@ -5089,8 +5089,8 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_create_hindexed
 int PMPI_Type_create_hindexed(int count,
-			     int blocklengths[],
-			     MPI_Aint displacements[],
+			     const int blocklengths[],
+			     const MPI_Aint displacements[],
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
 {
@@ -5114,7 +5114,7 @@
 #define FCNAME PMPI_Type_create_indexed_block
 int PMPI_Type_create_indexed_block(int count,
 				  int blocklength,
-				  int array_of_displacements[],
+				  const int array_of_displacements[],
 				  MPI_Datatype oldtype,
 				  MPI_Datatype *newtype)
 {
@@ -5136,9 +5136,9 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_create_struct
 int PMPI_Type_create_struct(int count,
-			   int array_of_blocklengths[],
-			   MPI_Aint array_of_displacements[],
-			   MPI_Datatype array_of_types[],
+			   const int array_of_blocklengths[],
+			   const MPI_Aint array_of_displacements[],
+			   const MPI_Datatype array_of_types[],
 			   MPI_Datatype *newtype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5148,9 +5148,9 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_create_subarray
 int PMPI_Type_create_subarray(int ndims,
-			     int array_of_sizes[],
-			     int array_of_subsizes[],
-			     int array_of_starts[],
+			     const int array_of_sizes[],
+			     const int array_of_subsizes[],
+			     const int array_of_starts[],
 			     int order,
 			     MPI_Datatype oldtype,
 			     MPI_Datatype *newtype)
@@ -5237,8 +5237,8 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_hindexed
 int PMPI_Type_hindexed(int count,
-		      int blocklens[],
-		      MPI_Aint indices[],
+		      const int blocklens[],
+		      const MPI_Aint indices[],
 		      MPI_Datatype old_type,
 		      MPI_Datatype *newtype)
 {
@@ -5261,8 +5261,8 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_indexed
 int PMPI_Type_indexed(int count,
-		     int blocklens[],
-		     int indices[],
+		     const int blocklens[],
+		     const int indices[],
 		     MPI_Datatype old_type,
 		     MPI_Datatype *newtype)
 {
@@ -5288,7 +5288,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Type_set_name
-int PMPI_Type_set_name(MPI_Datatype type, char *type_name)
+int PMPI_Type_set_name(MPI_Datatype type, const char *type_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Type_set_name(type, type_name);
@@ -5305,9 +5305,9 @@
 #undef FCNAME
 #define FCNAME PMPI_Type_struct
 int PMPI_Type_struct(int count,
-		    int blocklens[],
-		    MPI_Aint indices[],
-		    MPI_Datatype old_types[],
+		    const int blocklens[],
+		    const MPI_Aint indices[],
+		    const MPI_Datatype old_types[],
 		    MPI_Datatype *newtype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5336,7 +5336,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Unpack
-int PMPI_Unpack(void *inbuf,
+int PMPI_Unpack(const void *inbuf,
 	       int insize,
 	       int *position,
 	       void *outbuf,
@@ -5350,8 +5350,8 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Unpack_external
-int PMPI_Unpack_external(char *datarep,
-			void *inbuf,
+int PMPI_Unpack_external(const char *datarep,
+			const void *inbuf,
 			MPI_Aint insize,
 			MPI_Aint *position,
 			void *outbuf,
@@ -5380,7 +5380,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Add_error_string
-int PMPI_Add_error_string(int errorcode, char *string)
+int PMPI_Add_error_string(int errorcode, const char *string)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Add_error_string(errorcode, string);
@@ -5552,7 +5552,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Group_excl
-int PMPI_Group_excl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int PMPI_Group_excl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Group_excl(group, n, ranks, newgroup);
@@ -5568,7 +5568,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Group_incl
-int PMPI_Group_incl(MPI_Group group, int n, int *ranks, MPI_Group *newgroup)
+int PMPI_Group_incl(MPI_Group group, int n, const int *ranks, MPI_Group *newgroup)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Group_incl(group, n, ranks, newgroup);
@@ -5618,7 +5618,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Group_translate_ranks
-int PMPI_Group_translate_ranks(MPI_Group group1, int n, int *ranks1, MPI_Group group2, int *ranks2)
+int PMPI_Group_translate_ranks(MPI_Group group1, int n, const int *ranks1, MPI_Group group2, int *ranks2)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Group_translate_ranks(group1, n, ranks1, group2, ranks2);
@@ -5713,7 +5713,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Bsend
-int PMPI_Bsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int PMPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5722,7 +5722,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Bsend_init
-int PMPI_Bsend_init(void *buf, int count, MPI_Datatype datatype, 
+int PMPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, 
                    int dest, int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5774,7 +5774,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Ibsend
-int PMPI_Ibsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
+int PMPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, 
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5801,7 +5801,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Irsend
-int PMPI_Irsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5810,7 +5810,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Isend
-int PMPI_Isend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5819,7 +5819,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Issend
-int PMPI_Issend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	       MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5870,7 +5870,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Rsend
-int PMPI_Rsend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Rsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5879,7 +5879,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Rsend_init
-int PMPI_Rsend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int PMPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5888,7 +5888,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Send
-int PMPI_Send(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	     MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5897,7 +5897,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Sendrecv
-int PMPI_Sendrecv(void *sendbuf, int sendcount, MPI_Datatype sendtype, 
+int PMPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, 
 		 int dest, int sendtag,
 		 void *recvbuf, int recvcount, MPI_Datatype recvtype, 
 		 int source, int recvtag,
@@ -5919,7 +5919,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Send_init
-int PMPI_Send_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int PMPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		  int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5928,7 +5928,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Ssend
-int PMPI_Ssend(void *buf, int count, MPI_Datatype datatype, int dest, int tag,
+int PMPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag,
 	      MPI_Comm comm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -5937,7 +5937,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Ssend_init
-int PMPI_Ssend_init(void *buf, int count, MPI_Datatype datatype, int dest,
+int PMPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest,
 		   int tag, MPI_Comm comm, MPI_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6005,7 +6005,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Test_cancelled
-int PMPI_Test_cancelled(MPI_Status *status, int *flag)
+int PMPI_Test_cancelled(const MPI_Status *status, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Test_cancelled(status, flag);
@@ -6049,7 +6049,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Accumulate
-int PMPI_Accumulate(void *origin_addr, int origin_count, MPI_Datatype
+int PMPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype
                    origin_datatype, int target_rank, MPI_Aint
                    target_disp, int target_count, MPI_Datatype
                    target_datatype, MPI_Op op, MPI_Win win)
@@ -6087,7 +6087,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Put
-int PMPI_Put(void *origin_addr, int origin_count, MPI_Datatype
+int PMPI_Put(const void *origin_addr, int origin_count, MPI_Datatype
             origin_datatype, int target_rank, MPI_Aint target_disp,
             int target_count, MPI_Datatype target_datatype, MPI_Win
             win)
@@ -6163,7 +6163,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Win_set_name
-int PMPI_Win_set_name(MPI_Win win, char *win_name)
+int PMPI_Win_set_name(MPI_Win win, const char *win_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Win_set_name(win, win_name);
@@ -6211,7 +6211,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_delete
-int PMPI_File_delete(char *filename, MPI_Info info)
+int PMPI_File_delete(const char *filename, MPI_Info info)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_File_delete(filename, info);
@@ -6358,7 +6358,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_iwrite
-int PMPI_File_iwrite(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_iwrite(MPI_File mpi_fh, const void *buf, int count, 
 		    MPI_Datatype datatype, MPIO_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6367,7 +6367,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_iwrite_at
-int PMPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int PMPI_File_iwrite_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                        int count, MPI_Datatype datatype, 
                        MPIO_Request *request)
 {
@@ -6377,7 +6377,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_iwrite_shared
-int PMPI_File_iwrite_shared(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_iwrite_shared(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPIO_Request *request)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6386,7 +6386,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_open
-int PMPI_File_open(MPI_Comm comm, char *filename, int amode, 
+int PMPI_File_open(MPI_Comm comm, const char *filename, int amode, 
                   MPI_Info info, MPI_File *fh)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6550,7 +6550,7 @@
 #undef FCNAME
 #define FCNAME PMPI_File_set_view
 int PMPI_File_set_view(MPI_File mpi_fh, MPI_Offset disp, MPI_Datatype etype,
-		      MPI_Datatype filetype, char *datarep, MPI_Info info)
+		      MPI_Datatype filetype, const char *datarep, MPI_Info info)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_File_set_view(mpi_fh, disp, etype, filetype, datarep, info);
@@ -6558,7 +6558,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write
-int PMPI_File_write(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write(MPI_File mpi_fh, const void *buf, int count, 
                    MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6567,7 +6567,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_all
-int PMPI_File_write_all(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write_all(MPI_File mpi_fh, const void *buf, int count, 
                        MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6576,7 +6576,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_all_begin
-int PMPI_File_write_all_begin(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write_all_begin(MPI_File mpi_fh, const void *buf, int count, 
 			     MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6585,7 +6585,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_all_end
-int PMPI_File_write_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int PMPI_File_write_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_File_write_all_end(mpi_fh, buf, status);
@@ -6593,7 +6593,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_at
-int PMPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int PMPI_File_write_at(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                       int count, MPI_Datatype datatype, 
                       MPI_Status *status)
 {
@@ -6603,7 +6603,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_at_all
-int PMPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int PMPI_File_write_at_all(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
                           int count, MPI_Datatype datatype, 
                           MPI_Status *status)
 {
@@ -6613,7 +6613,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_ordered
-int PMPI_File_write_ordered(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write_ordered(MPI_File mpi_fh, const void *buf, int count, 
 			   MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6622,7 +6622,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_ordered_begin
-int PMPI_File_write_ordered_begin(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write_ordered_begin(MPI_File mpi_fh, const void *buf, int count, 
 				 MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6631,7 +6631,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_ordered_end
-int PMPI_File_write_ordered_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int PMPI_File_write_ordered_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_File_write_ordered_end(mpi_fh, buf, status);
@@ -6639,7 +6639,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_shared
-int PMPI_File_write_shared(MPI_File mpi_fh, void *buf, int count, 
+int PMPI_File_write_shared(MPI_File mpi_fh, const void *buf, int count, 
                           MPI_Datatype datatype, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6648,7 +6648,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_at_all_begin
-int PMPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, void *buf,
+int PMPI_File_write_at_all_begin(MPI_File mpi_fh, MPI_Offset offset, const void *buf,
 				int count, MPI_Datatype datatype)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6657,7 +6657,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_File_write_at_all_end
-int PMPI_File_write_at_all_end(MPI_File mpi_fh, void *buf, MPI_Status *status)
+int PMPI_File_write_at_all_end(MPI_File mpi_fh, const void *buf, MPI_Status *status)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_File_write_at_all_end(mpi_fh, buf, status);
@@ -6673,7 +6673,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Info_delete
-int PMPI_Info_delete(MPI_Info info, char *key)
+int PMPI_Info_delete(MPI_Info info, const char *key)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Info_delete(info, key);
@@ -6697,7 +6697,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Info_get
-int PMPI_Info_get(MPI_Info info, char *key, int valuelen, char *value, int *flag)
+int PMPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Info_get(info, key, valuelen, value, flag);
@@ -6721,7 +6721,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Info_get_valuelen
-int PMPI_Info_get_valuelen(MPI_Info info, char *key, int *valuelen, int *flag)
+int PMPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Info_get_valuelen(info, key, valuelen, flag);
@@ -6729,7 +6729,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Info_set
-int PMPI_Info_set(MPI_Info info, char *key, char *value)
+int PMPI_Info_set(MPI_Info info, const char *key, const char *value)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Info_set(info, key, value);
@@ -6737,7 +6737,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Close_port
-int PMPI_Close_port(char *port_name)
+int PMPI_Close_port(const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Close_port(port_name);
@@ -6745,7 +6745,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Comm_accept
-int PMPI_Comm_accept(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int PMPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                     MPI_Comm *newcomm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6754,7 +6754,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Comm_connect
-int PMPI_Comm_connect(char *port_name, MPI_Info info, int root, MPI_Comm comm, 
+int PMPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, 
                      MPI_Comm *newcomm)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6787,7 +6787,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Comm_spawn
-int PMPI_Comm_spawn(char *command, char *argv[], int maxprocs, MPI_Info info, 
+int PMPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, 
 		   int root, MPI_Comm comm, MPI_Comm *intercomm,
 		   int array_of_errcodes[])
 {
@@ -6797,7 +6797,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Comm_spawn_multiple
-int PMPI_Comm_spawn_multiple(int count, char *array_of_commands[], char* *array_of_argv[], int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
+int PMPI_Comm_spawn_multiple(int count, char *array_of_commands[], char* *array_of_argv[], const int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[])
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Comm_spawn_multiple(count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes);
@@ -6805,7 +6805,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Lookup_name
-int PMPI_Lookup_name(char *service_name, MPI_Info info, char *port_name)
+int PMPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Lookup_name(service_name, info, port_name);
@@ -6821,7 +6821,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Publish_name
-int PMPI_Publish_name(char *service_name, MPI_Info info, char *port_name)
+int PMPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Publish_name(service_name, info, port_name);
@@ -6829,7 +6829,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Unpublish_name
-int PMPI_Unpublish_name(char *service_name, MPI_Info info, char *port_name)
+int PMPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Unpublish_name(service_name, info, port_name);
@@ -6853,7 +6853,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Cart_create
-int PMPI_Cart_create(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
+int PMPI_Cart_create(MPI_Comm comm_old, int ndims, const int *dims, const int *periods, 
 		    int reorder, MPI_Comm *comm_cart)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6871,7 +6871,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Cart_map
-int PMPI_Cart_map(MPI_Comm comm_old, int ndims, int *dims, int *periods, 
+int PMPI_Cart_map(MPI_Comm comm_old, int ndims, const int *dims, const int *periods, 
 		 int *newrank)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6880,7 +6880,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Cart_rank
-int PMPI_Cart_rank(MPI_Comm comm, int *coords, int *rank)
+int PMPI_Cart_rank(MPI_Comm comm, const int *coords, int *rank)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Cart_rank(comm, coords, rank);
@@ -6897,7 +6897,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Cart_sub
-int PMPI_Cart_sub(MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new)
+int PMPI_Cart_sub(MPI_Comm comm, const int *remain_dims, MPI_Comm *comm_new)
 {
     MPICH_CHECK_INIT(FCNAME);
     return fn.PMPI_Cart_sub(comm, remain_dims, comm_new);
@@ -6913,7 +6913,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Graph_create
-int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, int *index, int *edges, 
+int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, const int *index, const int *edges, 
 		     int reorder, MPI_Comm *comm_graph)
 {
     MPICH_CHECK_INIT(FCNAME);
@@ -6947,7 +6947,7 @@
 
 #undef FCNAME
 #define FCNAME PMPI_Graph_map
-int PMPI_Graph_map(MPI_Comm comm_old, int nnodes, int *index, int *edges,
+int PMPI_Graph_map(MPI_Comm comm_old, int nnodes, const int *index, const int *edges,
                   int *newrank)
 {
     MPICH_CHECK_INIT(FCNAME);
Index: src/util/info/info_set.c
===================================================================
--- src/util/info/info_set.c	(.../trunk)	(revision 4035)
+++ src/util/info/info_set.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -47,7 +47,7 @@
 .N MPI_ERR_INFO_VALUE
 .N MPI_ERR_EXHAUSTED
 @*/
-int MPI_Info_set( MPI_Info info, char *key, char *value )
+int MPI_Info_set( MPI_Info info, const char *key, const char *value )
 {
     static const char FCNAME[] = "MPI_Info_set";
     int mpi_errno = MPI_SUCCESS;
Index: src/util/info/info_get.c
===================================================================
--- src/util/info/info_get.c	(.../trunk)	(revision 4035)
+++ src/util/info/info_get.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -51,7 +51,7 @@
 .N MPI_ERR_ARG
 .N MPI_ERR_INFO_VALUE
 @*/
-int MPI_Info_get(MPI_Info info, char *key, int valuelen, char *value, 
+int MPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, 
 		 int *flag)
 {
 #ifdef HAVE_ERROR_CHECKING
Index: src/util/info/info_getvallen.c
===================================================================
--- src/util/info/info_getvallen.c	(.../trunk)	(revision 4035)
+++ src/util/info/info_getvallen.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -48,7 +48,7 @@
 .N MPI_ERR_INFO_KEY
 .N MPI_ERR_OTHER
 @*/
-int MPI_Info_get_valuelen( MPI_Info info, char *key, int *valuelen, int *flag )
+int MPI_Info_get_valuelen( MPI_Info info, const char *key, int *valuelen, int *flag )
 {
     MPID_Info *curr_ptr, *info_ptr=0;
 #ifdef HAVE_ERROR_CHECKING
Index: src/util/info/info_delete.c
===================================================================
--- src/util/info/info_delete.c	(.../trunk)	(revision 4035)
+++ src/util/info/info_delete.c	(.../branches/dev/mpi_binding_const)	(revision 4035)
@@ -42,7 +42,7 @@
 .N MPI_SUCCESS
 .N 
 @*/
-int MPI_Info_delete( MPI_Info info, char *key )
+int MPI_Info_delete( MPI_Info info, const char *key )
 {
     static const char FCNAME[] = "MPI_Info_delete";
     int mpi_errno = MPI_SUCCESS;
