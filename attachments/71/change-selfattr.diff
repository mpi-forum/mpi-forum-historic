Index: src/mpi/attr/comm_set_attr.c
===================================================================
--- src/mpi/attr/comm_set_attr.c	(revision 4237)
+++ src/mpi/attr/comm_set_attr.c	(working copy)
@@ -77,10 +77,11 @@
 
     /* ... body of routine ...  */
     
-    /* Look for attribute.  They are ordered by keyval handle.  This uses 
+    /* CHANGE FOR MPI 2.2:  Look for attribute.  They are ordered by when they
+       were added, with the most recent first. This uses 
        a simple linear list algorithm because few applications use more than a 
        handful of attributes */
-
+    
     /* printf( "Setting attr val to %x\n", attribute_val ); */
     old_p = &comm_ptr->attributes;
     p     = comm_ptr->attributes;
@@ -98,23 +99,10 @@
 	    /* Does not change the reference count on the keyval */
 	    break;
 	}
-	else if (p->keyval->handle > keyval_ptr->handle) {
-	    MPID_Attribute *new_p = MPID_Attr_alloc();
-	    MPIU_ERR_CHKANDJUMP(!new_p,mpi_errno,MPI_ERR_OTHER,"**nomem");
-	    new_p->keyval	 = keyval_ptr;
-	    new_p->attrType      = attrType;
-	    new_p->pre_sentinal	 = 0;
-	    new_p->value	 = attribute_val;
-	    new_p->post_sentinal = 0;
-	    new_p->next		 = p->next;
-	    MPIR_Keyval_add_ref( keyval_ptr );
-	    p->next		 = new_p;
-	    /* printf( "Adding attr at %x\n", &p->value ); */
-	    break;
-	}
 	old_p = &p->next;
 	p = p->next;
     }
+    /* CHANGE FOR MPI 2.2: If not found, add at the beginning */
     if (!p) {
 	MPID_Attribute *new_p = MPID_Attr_alloc();
 	MPIU_ERR_CHKANDJUMP(!new_p,mpi_errno,MPI_ERR_OTHER,"**nomem");
@@ -124,9 +112,9 @@
 	new_p->pre_sentinal  = 0;
 	new_p->value	     = attribute_val;
 	new_p->post_sentinal = 0;
-	new_p->next	     = 0;
+	new_p->next	     = comm_ptr->attributes;
 	MPIR_Keyval_add_ref( keyval_ptr );
-	*old_p		     = new_p;
+	comm_ptr->attributes = new_p;
 	/* printf( "Creating attr at %x\n", &new_p->value ); */
     }
     
Index: src/mpi/attr/comm_get_attr.c
===================================================================
--- src/mpi/attr/comm_get_attr.c	(revision 4237)
+++ src/mpi/attr/comm_get_attr.c	(working copy)
@@ -110,10 +110,7 @@
 	   On some 64-bit plaforms, such as Solaris-SPARC, using an MPI_Fint
 	   will cause the value to placed into the high, rather than low,
 	   end of the output value. */
-#if 0
-	MPIR_Pint  *attr_int = (MPIR_Pint *)attribute_val;
 #endif
-#endif
 	*flag = 1;
 
 	/* FIXME : We could initialize some of these here; only tag_ub is 
@@ -192,70 +189,6 @@
 		*attr_val_p = &attr_copy.appnum;
 	    }
 	    break;
-#if 0
-#ifdef HAVE_FORTRAN_BINDING
-	case 2: /* Fortran TAG_UB */
-	    *attr_int = attr_copy.tag_ub;
-	    break;
-	case 4: /* Fortran HOST */
-	    *attr_int = attr_copy.host;
-	    break;
-	case 6: /* Fortran IO */
-	    *attr_int = attr_copy.io;
-	    break;
-	case 8: /* Fortran WTIME */
-	    *attr_int = attr_copy.wtime_is_global;
-	    break;
-	case 10: /* UNIVERSE_SIZE */
-	    /* This is a special case.  If universe is not set, then we
-	       attempt to get it from the device.  If the device is doesn't
-	       supply a value, then we set the flag accordingly */
-	    if (attr_copy.universe >= 0)
-	    { 
-		*attr_int = attr_copy.universe;
-	    }
-	    else if (attr_copy.universe == MPIR_UNIVERSE_SIZE_NOT_AVAILABLE)
-	    {
-		*flag = 0;
-	    }
-	    else
-	    {
-		mpi_errno = MPID_Get_universe_size(&attr_copy.universe);
-		/* --BEGIN ERROR HANDLING-- */
-		if (mpi_errno != MPI_SUCCESS)
-		{
-		    attr_copy.universe = MPIR_UNIVERSE_SIZE_NOT_AVAILABLE;
-		    goto fn_fail;
-		}
-		/* --END ERROR HANDLING-- */
-		
-		if (attr_copy.universe >= 0)
-		{
-		    *attr_int = attr_copy.universe;
-		}
-		else
-		{
-		    attr_copy.universe = MPIR_UNIVERSE_SIZE_NOT_AVAILABLE;
-		    *flag = 0;
-		}
-	    }
-	    break;
-	case 12: /* LASTUSEDCODE */
-	    *attr_int = attr_copy.lastusedcode;
-	    break;
-	case 14: /* APPNUM */
-	    /* This is another special case.  If appnum is negative,
-	       we take that as indicating no value of APPNUM, and set
-	       the flag accordingly */
-	    if (attr_copy.appnum < 0) {
-		*flag = 0;
-	    }
-	    else {
-		*attr_int = attr_copy.appnum;
-	    }
-	    break;
-#endif
-#endif
 	}
 	/* All of the predefined attributes are INTEGER; since we've set 
 	   the output value as the pointer to these, we need to dereference
