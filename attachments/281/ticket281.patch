Index: chap-coll/coll.tex
===================================================================
--- chap-coll/coll.tex	(revision 1036)
+++ chap-coll/coll.tex	(working copy)
@@ -391,15 +391,17 @@
 \mpifunc{MPI\_IREDUCE\_SCATTER\_BLOCK}, }\mpifunc{MPI\_REDUCE\_SCATTER}\MPIupdate{3.0}{109}{,
 \mpifunc{MPI\_IREDUCE\_SCATTER}}.
 \end{itemize}
-In C++, the bindings for these functions are in the \ctype{MPI::Comm} class.
+\MPIdeleteBegin{3.0}{281}
+In C++, the bindings for these functions are in the \mpicpptype{MPI::Comm} class.
 %But
 However,
 since the collective operations do not make
-sense on a C++ \ctype{MPI::Comm}
+sense on a C++ \mpicpptype{MPI::Comm}
 %(since
 (as
 it is neither an intercommunicator nor an intracommunicator),
 the functions are all pure virtual.
+\MPIdeleteEnd{3.0}
 
 %\begin{figure}[htpb]
 %  \centerline{\includegraphics[width=4.0in]{figures/collective-broadcast}}
@@ -2428,7 +2430,7 @@
 \funcarg{\IN}{ comm}{  communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Reduce(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, int~root, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_REDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, ROOT, COMM, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, ROOT, COMM, IERROR}
@@ -3066,7 +3068,7 @@
 \funcarg{\OUT}{op}{ operation (handle) }
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Op}\cdeclmainindex{MPI::Op}%
+\cdeclmainindex{MPI\_Op}%
 \mpibind{MPI\_Op\_create(MPI\_User\_function~*function, int~commute, MPI\_Op~*op)}
 
 \mpifbind{MPI\_OP\_CREATE( FUNCTION, COMMUTE, OP, IERROR) \fargs EXTERNAL FUNCTION \\ LOGICAL COMMUTE \\ INTEGER OP, IERROR}
@@ -3101,8 +3103,10 @@
 
 \mpifsubbind{USER\_FUNCTION(INVEC, INOUTVEC, LEN, TYPE) \fargs <type> INVEC(LEN), INOUTVEC(LEN) \\ INTEGER LEN, TYPE}
 
+\MPIdeleteBegin{3.0}{281}
 The C++ declaration of the user-defined function appears below.
 
+\MPIdeleteEnd{3.0}
 \mpicpptypedefemptybind{MPI::User\_function(const void* invec, void* inoutvec, int len, const Datatype\& datatype)}{void}
 
 The \mpiarg{datatype} argument
@@ -3252,7 +3256,7 @@
 \funcarg{\INOUT}{op}{ operation (handle) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_op\_free(MPI\_Op~*op)}
 
 \mpifbind{MPI\_OP\_FREE(OP, IERROR) \fargs INTEGER OP, IERROR}
@@ -3356,7 +3360,7 @@
 \funcarg{\IN}{comm}{ communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Allreduce(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_ALLREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, COMM, IERROR}
@@ -3460,7 +3464,7 @@
 \funcarg{\IN}{op}{ operation (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Reduce\_local(void*~inbuf, void*~inoutbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op)}
 
 \mpifbind{MPI\_REDUCE\_LOCAL(INBUF, INOUBUF, COUNT, DATATYPE, OP, IERROR) \fargs <type> INBUF(*), INOUTBUF(*) \\ INTEGER COUNT, DATATYPE, OP, IERROR}
@@ -3481,7 +3485,7 @@
 \funcarg{\OUT}{commute}{ {\tt true} if \mpiarg{op} is commutative, {\tt false} otherwise (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Op\_commutative(MPI\_Op~op, int~*commute)}
 
 \mpifbind{MPI\_OP\_COMMUTATIVE(OP, COMMUTE, IERROR) \fargs LOGICAL COMMUTE \\ INTEGER OP, IERROR}
@@ -3511,7 +3515,7 @@
 \funcarg{\IN}{comm}{ communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Reduce\_scatter\_block(void*~sendbuf, void*~recvbuf, int~recvcount, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_REDUCE\_SCATTER\_BLOCK(SENDBUF, RECVBUF, RECVCOUNT, DATATYPE, OP, COMM, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER RECVCOUNT, DATATYPE, OP, COMM, IERROR}
@@ -3578,7 +3582,7 @@
 \funcarg{\IN}{comm}{ communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Reduce\_scatter(void*~sendbuf, void*~recvbuf, int~*recvcounts, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_REDUCE\_SCATTER(SENDBUF, RECVBUF, RECVCOUNTS, DATATYPE, OP, COMM, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER RECVCOUNTS(*), DATATYPE, OP, COMM, IERROR}
@@ -3664,7 +3668,7 @@
 \funcarg{\IN}{comm}{ communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Scan(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_SCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, COMM, IERROR}
@@ -3763,7 +3767,7 @@
 \funcarg{\IN}{comm}{ intracommunicator (handle) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Exscan(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm) }
 
 \mpifbind{MPI\_EXSCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, IERROR) \fargs<type> SENDBUF(*), RECVBUF(*) \\INTEGER COUNT, DATATYPE, OP, COMM, IERROR }
@@ -3800,7 +3804,7 @@
 
 This operation is invalid for intercommunicators.
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 %\discuss{Do we guarentee that the \code{MPI\_Op} is not called on the
 %process with rank 1 (or zero)?  Note that since the operation does not get any
 %information on the rank of the calling process, it can't get any
@@ -4510,7 +4514,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Ireduce(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, int~root, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, ROOT, COMM, REQUEST, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, ROOT, COMM, REQUEST, IERROR}
@@ -4558,7 +4562,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Iallreduce(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IALLREDUCE(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR}
@@ -4588,7 +4592,7 @@
 \funcarg{\OUT}{request}{ communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Ireduce\_scatter\_block(void*~sendbuf, void*~recvbuf, int~recvcount, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IREDUCE\_SCATTER\_BLOCK(SENDBUF, RECVBUF, RECVCOUNT, DATATYPE, OP, COMM, REQUEST, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER RECVCOUNT, DATATYPE, OP, COMM, REQUEST, IERROR}
@@ -4622,7 +4626,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Ireduce\_scatter(void*~sendbuf, void*~recvbuf, int~*recvcounts, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IREDUCE\_SCATTER(SENDBUF, RECVBUF, RECVCOUNTS, DATATYPE, OP, COMM, REQUEST, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER RECVCOUNTS(*), DATATYPE, OP, COMM, REQUEST, IERROR}
@@ -4654,7 +4658,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Iscan(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_ISCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) \fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR}
@@ -4685,7 +4689,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
+\cdeclindex{MPI\_Op}%
 \mpibind{MPI\_Iexscan(void*~sendbuf, void*~recvbuf, int~count, MPI\_Datatype~datatype, MPI\_Op~op, MPI\_Comm~comm, MPI\_Request~*request) }
 
 \mpifbind{MPI\_IEXSCAN(SENDBUF, RECVBUF, COUNT, DATATYPE, OP, COMM, REQUEST, IERROR) \fargs<type> SENDBUF(*), RECVBUF(*) \\INTEGER COUNT, DATATYPE, OP, COMM, REQUEST, IERROR }
Index: chap-changes/changes.tex
===================================================================
--- chap-changes/changes.tex	(revision 1036)
+++ chap-changes/changes.tex	(working copy)
@@ -155,7 +155,7 @@
 
 % --- MPI-2.2 Ticket 33
 \item
-\cdeclindex{MPI::Distgraphcomm}%
+%
 Section~\ref{subsec:topol-distgraph-constructor} on page~\pageref{subsec:topol-distgraph-constructor}. % Sect. 7.5.3a p.247 NEWsection
 \newline
 New functions for a scalable distributed graph topology interface has been added. In this section, the functions \mpifunc{MPI\_DIST\_GRAPH\_CREATE\_ADJACENT} and \mpifunc{MPI\_DIST\_GRAPH\_CREATE}, the constants \const{MPI\_UNWEIGHTED}, and the derived C++ class Distgraphcomm were added.
@@ -231,7 +231,7 @@
 \item
 Annex~\ref{subsec:annexa-const} on page~\pageref{subsec:annexa-const}. % Sect. A.1.1 p.491
 \newline
-Removed type \constskip{MPI::Fint} (compare \consti{MPI\_Fint} in 
+Removed type \mpicppconstskip{MPI::Fint} (compare \consti{MPI\_Fint} in 
 Section~\ref{subsec:annexa-type} on page~\pageref{subsec:annexa-type}). % Sect. A.1.2 p. 499 newlabel
 
 % --- MPI-2.2 Ticket 18
Index: chap-pt2pt/pt2pt.tex
===================================================================
--- chap-pt2pt/pt2pt.tex	(revision 1036)
+++ chap-pt2pt/pt2pt.tex	(working copy)
@@ -101,7 +101,7 @@
 \funcarg{\IN}{comm}{communicator (handle)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Comm}\cdeclmainindex{MPI::Comm}%
+\cdeclmainindex{MPI\_Comm}%
 \mpibind{MPI\_Send(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm)}
 
 \mpifbind{MPI\_SEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, IERROR}
@@ -307,7 +307,7 @@
 % \subsubsection{Unsigned long long Type}
 % 
 % A new type, \type{MPI\_UNSIGNED\_LONG\_LONG} in C and
-% \type{MPI::UNSIGNED\_LONG\_LONG} in C++ is added as an optional
+% \mpicpptype{MPI::UNSIGNED\_LONG\_LONG} in C++ is added as an optional
 % datatype.
 % 
 % \begin{rationale}  The ISO C9X committee has voted to include {\tt long long}
@@ -315,6 +315,7 @@
 % \end{rationale}
 % 
 
+\MPIdeleteBegin{3.0}{281}
 \begin{rationale}
 The datatypes \type{MPI\_C\_BOOL}, \type{MPI\_INT8\_T}, \type{MPI\_INT16\_T}, 
 \type{MPI\_INT32\_T}, \type{MPI\_UINT8\_T}, \type{MPI\_UINT16\_T}, 
@@ -326,6 +327,7 @@
 collisions with the C preprocessor and namespaced C++ names. 
 C++ applications can use the C bindings with no loss of functionality.
 \end{rationale}
+\MPIdeleteEnd{3.0}
 
 The datatypes \type{MPI\_AINT} and \type{MPI\_OFFSET} correspond to the 
 \MPI/-defined C types \type{MPI\_Aint} and \type{MPI\_Offset} and their Fortran 
@@ -434,7 +436,7 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Status}\cdeclmainindex{MPI::Status}%
+\cdeclmainindex{MPI\_Status}%
 \mpibind{MPI\_Recv(void*~buf, int~count, MPI\_Datatype~datatype, int~source, int~tag, MPI\_Comm~comm, MPI\_Status~*status)}
 
 \mpifbind{MPI\_RECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, SOURCE, TAG, COMM, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -562,8 +564,10 @@
 contain, respectively, the source,
 tag and error code of the received message.
  
+\MPIdeleteBegin{3.0}{281}
 In C++, the \mpiarg{status} object is handled through the following methods:
  
+\MPIdeleteEnd{3.0}
 \mpicppemptybind{MPI::Status::Get\_source() const}{int}
 \mpicppemptybind{MPI::Status::Set\_source(int~source)}{void}
 \mpicppemptybind{MPI::Status::Get\_tag() const}{int}
@@ -598,7 +602,7 @@
 \funcarg{\OUT}{count}{number of received entries (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Get\_count(MPI\_Status~*status, MPI\_Datatype~datatype, int~*count)}
 
 \mpifbind{MPI\_GET\_COUNT(STATUS, DATATYPE, COUNT, IERROR)\fargs INTEGER  STATUS(MPI\_STATUS\_SIZE), DATATYPE, COUNT, IERROR}
@@ -737,23 +741,24 @@
 
 
 
-
+\MPIdeleteBegin{3.0}{281}
 There are no C++ bindings for
 \const{MPI\_STATUS\_IGNORE} or \const{MPI\_STATUSES\_IGNORE}. 
 %
-To allow an \gtype{\OUT} or \gtype{\INOUT} \ctype{MPI::Status} argument to be ignored,
-all \MPI/ C++ bindings that have \gtype{\OUT} or \gtype{\INOUT} \ctype{MPI::Status}
+To allow an \gtype{\OUT} or \gtype{\INOUT} \mpicpptype{MPI::Status} argument to be ignored,
+all \MPI/ C++ bindings that have \gtype{\OUT} or \gtype{\INOUT} \mpicpptype{MPI::Status}
 parameters are overloaded with a second version that omits the \gtype{\OUT} or \gtype{\INOUT}
-\ctype{MPI::Status} parameter.
+\mpicpptype{MPI::Status} parameter.
 
 \begin{example}The C++ bindings for \mpifunc{MPI\_PROBE} are:
-\exindex{MPI::Comm::Probe}
+%%% manually prevent inclusion in index... exindex{MPI::Comm::Probe}
 
 {\tt void MPI::Comm::Probe(int source, int tag, MPI::Status\& status)
 const}
 
 {\tt void MPI::Comm::Probe(int source, int tag) const}
 \end{example}
+\MPIdeleteEnd{3.0}
 
 
 \section{Data Type Matching and Data Conversion}
@@ -1108,7 +1113,7 @@
 % \end{implementors}
 \MPI/ requires support for inter-language communication, i.e.,
 if messages are sent
-by a C or C++ process and received by a Fortran process, or vice-versa.
+by a C process and received by a Fortran process, or vice-versa.
 The behavior is defined in 
 Section~\ref{sec:misc-lang-interop} on page~\pageref{sec:misc-lang-interop}.  
 
@@ -1963,7 +1968,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Isend(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_ISEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -1985,7 +1990,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Ibsend(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IBSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -2008,7 +2013,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Issend(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_ISSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -2030,7 +2035,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Irsend(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IRSEND(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -2052,7 +2057,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Irecv(void*~buf, int~count, MPI\_Datatype~datatype, int~source, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_IRECV(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER  COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR}
@@ -2154,8 +2159,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Request}\cdeclmainindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclmainindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Wait(MPI\_Request~*request, MPI\_Status~*status)}
 
 \mpifbind{MPI\_WAIT(REQUEST, STATUS, IERROR)\fargs INTEGER  REQUEST, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -2207,8 +2212,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Test(MPI\_Request~*request, int~*flag, MPI\_Status~*status)}
 
 \mpifbind{MPI\_TEST(REQUEST, FLAG, STATUS, IERROR)\fargs LOGICAL  FLAG \\ INTEGER  REQUEST, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -2288,7 +2293,7 @@
 \funcarg{\INOUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Request\_free(MPI\_Request~*request)}
 
 \mpifbind{MPI\_REQUEST\_FREE(REQUEST, IERROR)\fargs INTEGER  REQUEST, IERROR}
@@ -2490,8 +2495,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Waitany(int~count, MPI\_Request~*array\_of\_requests, int~*index, MPI\_Status~*status)}
 
 \mpifbind{MPI\_WAITANY(COUNT, ARRAY\_OF\_REQUESTS, INDEX, STATUS, IERROR)\fargs INTEGER  COUNT, ARRAY\_OF\_REQUESTS(*), INDEX, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -2539,8 +2544,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Testany(int~count, MPI\_Request~*array\_of\_requests, int~*index, int~*flag, MPI\_Status~*status)}
 
 \mpifbind{MPI\_TESTANY(COUNT, ARRAY\_OF\_REQUESTS, INDEX, FLAG, STATUS, IERROR)\fargs LOGICAL  FLAG \\ INTEGER  COUNT, ARRAY\_OF\_REQUESTS(*), INDEX, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -2588,8 +2593,8 @@
 \funcarg{\OUT}{array\_of\_statuses}{array of status objects (array of Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Waitall(int~count, MPI\_Request~*array\_of\_requests, MPI\_Status~*array\_of\_statuses)}
 
 \mpifbind{MPI\_WAITALL(COUNT, ARRAY\_OF\_REQUESTS, ARRAY\_OF\_STATUSES, IERROR)\fargs INTEGER  COUNT, ARRAY\_OF\_REQUESTS(*) \\ INTEGER  ARRAY\_OF\_STATUSES(MPI\_STATUS\_SIZE,*), IERROR}
@@ -2651,8 +2656,8 @@
 \funcarg{\OUT}{array\_of\_statuses}{array of status objects (array of Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Testall(int~count, MPI\_Request~*array\_of\_requests, int~*flag, MPI\_Status~*array\_of\_statuses)}
 
 \mpifbind{MPI\_TESTALL(COUNT, ARRAY\_OF\_REQUESTS, FLAG, ARRAY\_OF\_STATUSES, IERROR)\fargs LOGICAL  FLAG \\ INTEGER  COUNT, ARRAY\_OF\_REQUESTS(*), ARRAY\_OF\_STATUSES(MPI\_STATUS\_SIZE,*), IERROR}
@@ -2693,8 +2698,8 @@
     operations that completed (array of Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Waitsome(int~incount, MPI\_Request~*array\_of\_requests, int~*outcount, int~*array\_of\_indices, MPI\_Status~*array\_of\_statuses)}
 
 \mpifbind{MPI\_WAITSOME(INCOUNT, ARRAY\_OF\_REQUESTS, OUTCOUNT, ARRAY\_OF\_INDICES, ARRAY\_OF\_STATUSES, IERROR)\fargs INTEGER INCOUNT, ARRAY\_OF\_REQUESTS(*), OUTCOUNT, ARRAY\_OF\_INDICES(*), ARRAY\_OF\_STATUSES(MPI\_STATUS\_SIZE,*), IERROR}
@@ -2746,8 +2751,8 @@
     operations that completed (array of Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Testsome(int~incount, MPI\_Request~*array\_of\_requests, int~*outcount, int~*array\_of\_indices, MPI\_Status~*array\_of\_statuses)}
 
 \mpifbind{MPI\_TESTSOME(INCOUNT, ARRAY\_OF\_REQUESTS, OUTCOUNT, ARRAY\_OF\_INDICES, ARRAY\_OF\_STATUSES, IERROR)\fargs INTEGER INCOUNT, ARRAY\_OF\_REQUESTS(*), OUTCOUNT, ARRAY\_OF\_INDICES(*), ARRAY\_OF\_STATUSES(MPI\_STATUS\_SIZE,*), IERROR}
@@ -2903,8 +2908,8 @@
 \funcarg{\OUT}{status}{\mpiarg{MPI\_STATUS} object if flag is true (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Request\_get\_status(MPI\_Request~request, int~*flag, MPI\_Status~*status)}
 
 \mpifbind{MPI\_REQUEST\_GET\_STATUS( REQUEST, FLAG, STATUS, IERROR) \fargs INTEGER REQUEST, STATUS(MPI\_STATUS\_SIZE), IERROR\\LOGICAL FLAG}
@@ -2951,7 +2956,7 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Iprobe(int~source, int~tag, MPI\_Comm~comm, int~*flag, MPI\_Status~*status)}
 
 \mpifbind{MPI\_IPROBE(SOURCE, TAG, COMM, FLAG, STATUS, IERROR)\fargs LOGICAL  FLAG \\ INTEGER  SOURCE, TAG, COMM, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -3005,7 +3010,7 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Probe(int~source, int~tag, MPI\_Comm~comm, MPI\_Status~*status)}
 
 \mpifbind{MPI\_PROBE(SOURCE, TAG, COMM, STATUS, IERROR)\fargs INTEGER SOURCE, TAG, COMM, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -3146,7 +3151,7 @@
 \funcarg{\IN}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Cancel(MPI\_Request~*request)}
 
 \mpifbind{MPI\_CANCEL(REQUEST, IERROR)\fargs INTEGER  REQUEST, IERROR}
@@ -3213,7 +3218,7 @@
 \funcarg{\OUT}{flag}{(logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Test\_cancelled(MPI\_Status~*status, int~*flag)}
 
 \mpifbind{MPI\_TEST\_CANCELLED(STATUS, FLAG, IERROR)\fargs LOGICAL FLAG \\ INTEGER  STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -3289,11 +3294,11 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Send\_init(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_SEND\_INIT(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER  REQUEST, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
-\cdeclmainindex{MPI::Prequest}%
+%
 \mpicppemptybind{MPI::Comm::Send\_init(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Prequest}
 
 Creates a persistent communication request
@@ -3315,7 +3320,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Bsend\_init(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_BSEND\_INIT(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER  REQUEST, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -3339,7 +3344,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Ssend\_init(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_SSEND\_INIT(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -3363,7 +3368,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Rsend\_init(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_RSEND\_INIT(BUF, COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER  COUNT, DATATYPE, DEST, TAG, COMM, REQUEST, IERROR}
@@ -3387,7 +3392,7 @@
 \funcarg{\OUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Recv\_init(void*~buf, int~count, MPI\_Datatype~datatype, int~source, int~tag, MPI\_Comm~comm, MPI\_Request~*request)}
 
 \mpifbind{MPI\_RECV\_INIT(BUF, COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER  COUNT, DATATYPE, SOURCE, TAG, COMM, REQUEST, IERROR}
@@ -3408,7 +3413,7 @@
 \funcarg{\INOUT}{request}{communication request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Start(MPI\_Request~*request)}
 
 \mpifbind{MPI\_START(REQUEST, IERROR)\fargs INTEGER  REQUEST, IERROR}
@@ -3447,7 +3452,7 @@
 \funcarg{\INOUT}{array\_of\_requests}{array of requests (array of handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Startall(int~count, MPI\_Request~*array\_of\_requests)}
 
 \mpifbind{MPI\_STARTALL(COUNT, ARRAY\_OF\_REQUESTS, IERROR)\fargs INTEGER  COUNT, ARRAY\_OF\_REQUESTS(*), IERROR}
@@ -3563,7 +3568,7 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Sendrecv(void~*sendbuf, int~sendcount, MPI\_Datatype~sendtype, int~dest, int~sendtag, void~*recvbuf, int~recvcount, MPI\_Datatype~recvtype, int~source, int~recvtag, MPI\_Comm~comm, MPI\_Status~*status)}
 
 \mpifbind{MPI\_SENDRECV(SENDBUF, SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVBUF, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM, STATUS, IERROR)\fargs <type> SENDBUF(*), RECVBUF(*) \\ INTEGER  SENDCOUNT, SENDTYPE, DEST, SENDTAG, RECVCOUNT, RECVTYPE, SOURCE, RECVTAG, COMM, STATUS(MPI\_STATUS\_SIZE), IERROR}
@@ -3597,7 +3602,7 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Sendrecv\_replace(void*~buf, int~count, MPI\_Datatype~datatype, int~dest, int~sendtag, int~source, int~recvtag, MPI\_Comm~comm, MPI\_Status~*status)}
 
 \mpifbind{MPI\_SENDRECV\_REPLACE(BUF, COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER COUNT, DATATYPE, DEST, SENDTAG, SOURCE, RECVTAG, COMM, STATUS(MPI\_STATUS\_SIZE), IERROR}
Index: appLang-C++.tex
===================================================================
--- appLang-C++.tex	(revision 1036)
+++ appLang-C++.tex	(working copy)
@@ -1,5 +0,0 @@
-\section{C++ Bindings (removed)} 
-\label{app:annex-c++-bindings} 
- 
-The C++ bindings have been removed.
-See Chapter~\ref{chap:removed} for more information.
Index: chap-dynamic/dynamic-2.tex
===================================================================
--- chap-dynamic/dynamic-2.tex	(revision 1036)
+++ chap-dynamic/dynamic-2.tex	(working copy)
@@ -332,7 +332,7 @@
 newly spawned group (handle)}
 \funcarg{\OUT}{array\_of\_errcodes}{one code per process (array of integer)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Comm\_spawn(char~*command, char~*argv[], int~maxprocs, MPI\_Info info, int~root, MPI\_Comm~comm, MPI\_Comm~*intercomm, int~array\_of\_errcodes[])}
 \mpifbind{MPI\_COMM\_SPAWN(COMMAND, ARGV, MAXPROCS, INFO, ROOT, COMM, INTERCOMM, ARRAY\_OF\_ERRCODES, IERROR)\fargs CHARACTER*(*) COMMAND, ARGV(*) \\INTEGER INFO, MAXPROCS, ROOT, COMM, INTERCOMM, ARRAY\_OF\_ERRCODES(*), IERROR}
 \mpicppemptybind{MPI::Intracomm::Spawn(const~char*~command, const~char*~argv[], int~maxprocs, const~MPI::Info\&~info, int~root, int~array\_of\_errcodes[]) const}{MPI::Intercomm}
@@ -551,9 +551,9 @@
 \paragraph{The \mpiarg{info} argument}
 
 The \mpiarg{info} argument to all of the routines in this
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
-chapter is an opaque handle of type \type{MPI\_Info} in C, 
-\type{MPI::Info} in C++ and
+\cdeclindex{MPI\_Info}%
+chapter is an opaque handle of type \type{MPI\_Info}
+in C \MPIdelete{3.0}{281}{, \mpicpptype{MPI::Info} in C++} and
 \ftype{INTEGER} in Fortran.  It is a container for a number of user-specified
 (\mpiarg{key},\mpiarg{value}) pairs. \mpiarg{key} and \mpiarg{value} are strings (null-terminated {\tt char*} in
 C, {\tt character*(*)} in Fortran). Routines to create and manipulate
@@ -688,7 +688,7 @@
 \funcarg{\OUT}{array\_of\_errcodes}{one error code per process
 (array of integer)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Comm\_spawn\_multiple(int~count, char~*array\_of\_commands[], char~**array\_of\_argv[], int~array\_of\_maxprocs[], MPI\_Info~array\_of\_info[], int~root, MPI\_Comm~comm, MPI\_Comm~*intercomm, int~array\_of\_errcodes[])} 
 \mpifbind{MPI\_COMM\_SPAWN\_MULTIPLE(COUNT, ARRAY\_OF\_COMMANDS, ARRAY\_OF\_ARGV, ARRAY\_OF\_MAXPROCS, ARRAY\_OF\_INFO, ROOT, COMM, INTERCOMM, ARRAY\_OF\_ERRCODES, IERROR)\fargs INTEGER COUNT, ARRAY\_OF\_INFO(*), ARRAY\_OF\_MAXPROCS(*), ROOT, COMM, INTERCOMM, ARRAY\_OF\_ERRCODES(*), IERROR \\CHARACTER*(*) ARRAY\_OF\_COMMANDS(*), ARRAY\_OF\_ARGV(COUNT, *)}
 \mpicppemptybind{MPI::Intracomm::Spawn\_multiple(int~count, const~char*~array\_of\_commands[], const~char**~array\_of\_argv[], const~int~array\_of\_maxprocs[], const~MPI::Info~array\_of\_info[], int~root, int~array\_of\_errcodes[])}{MPI::Intercomm}
@@ -1120,7 +1120,7 @@
 information on how to establish an address (handle)}
 \funcarg{\OUT}{port\_name}{newly established port (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Open\_port(MPI\_Info~info, char~*port\_name)}
 \mpifbind{MPI\_OPEN\_PORT(INFO, PORT\_NAME, IERROR)\fargs CHARACTER*(*) PORT\_NAME \\INTEGER INFO, IERROR}
 \mpicppemptybind{MPI::Open\_port(const~MPI::Info\&~info, char*~port\_name)}{void}
@@ -1195,7 +1195,7 @@
 \funcarg{\OUT}{newcomm}{intercommunicator with client as remote group
 (handle)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Comm\_accept(char~*port\_name, MPI\_Info~info, int~root, MPI\_Comm~comm, MPI\_Comm~*newcomm)}
 \mpifbind{MPI\_COMM\_ACCEPT(PORT\_NAME, INFO, ROOT, COMM, NEWCOMM, IERROR)\fargs CHARACTER*(*) PORT\_NAME \\INTEGER INFO, ROOT, COMM, NEWCOMM, IERROR}
 \mpicppemptybind{MPI::Intracomm::Accept(const~char*~port\_name, const~MPI::Info\&~info, int~root) const}{MPI::Intercomm}
@@ -1230,7 +1230,7 @@
 \funcarg{\OUT}{newcomm}{intercommunicator with server as remote group
 (handle)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Comm\_connect(char~*port\_name, MPI\_Info~info, int~root, MPI\_Comm~comm, MPI\_Comm~*newcomm)}
 \mpifbind{MPI\_COMM\_CONNECT(PORT\_NAME, INFO, ROOT, COMM, NEWCOMM, IERROR)\fargs CHARACTER*(*) PORT\_NAME \\INTEGER INFO, ROOT, COMM, NEWCOMM, IERROR}
 \mpicppemptybind{MPI::Intracomm::Connect(const~char*~port\_name, const~MPI::Info\&~info, int~root) const}{MPI::Intercomm}
@@ -1301,7 +1301,7 @@
 \funcarg{\IN}{info}{implementation-specific information (handle)}
 \funcarg{\IN}{port\_name}{a port name (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Publish\_name(char~*service\_name, MPI\_Info~info, char~*port\_name)}
 \mpifbind{MPI\_PUBLISH\_NAME(SERVICE\_NAME, INFO, PORT\_NAME, IERROR)\fargs INTEGER INFO, IERROR \\CHARACTER*(*) SERVICE\_NAME, PORT\_NAME}
 \mpicppemptybind{MPI::Publish\_name(const~char*~service\_name, const~MPI::Info\&~info, const~char*~port\_name)}{void}
@@ -1375,7 +1375,7 @@
 \funcarg{\IN}{info}{implementation-specific information (handle)}
 \funcarg{\IN}{port\_name}{a port name (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Unpublish\_name(char~*service\_name, MPI\_Info~info, char~*port\_name)}
 \mpifbind{MPI\_UNPUBLISH\_NAME(SERVICE\_NAME, INFO, PORT\_NAME, IERROR)\fargs INTEGER INFO, IERROR \\CHARACTER*(*) SERVICE\_NAME, PORT\_NAME}
 \mpicppemptybind{MPI::Unpublish\_name(const~char*~service\_name, const~MPI::Info\&~info, const~char*~port\_name)}{void}
@@ -1405,7 +1405,7 @@
 \funcarg{\IN}{info}{implementation-specific information (handle)}
 \funcarg{\OUT}{port\_name}{a port name (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Lookup\_name(char~*service\_name, MPI\_Info~info, char~*port\_name)}
 \mpifbind{MPI\_LOOKUP\_NAME(SERVICE\_NAME, INFO, PORT\_NAME, IERROR)\fargs CHARACTER*(*) SERVICE\_NAME, PORT\_NAME \\INTEGER INFO, IERROR}
 \mpicppemptybind{MPI::Lookup\_name(const~char*~service\_name, const~MPI::Info\&~info, char*~port\_name)}{void}
Index: chap-misc/misc-2.tex
===================================================================
--- chap-misc/misc-2.tex	(revision 1036)
+++ chap-misc/misc-2.tex	(working copy)
@@ -18,8 +18,8 @@
 \MPI/ 
 take an argument
 \mpiarg{info}. \mpiarg{info} is an opaque object with a handle of type
-\cdeclmainindex{MPI\_Info}\cdeclmainindex{MPI::Info}%
-\type{MPI\_Info} in C, \type{MPI::Info} in C++, and \ftype{INTEGER} in Fortran. 
+\cdeclmainindex{MPI\_Info}%
+\type{MPI\_Info} in C \MPIdelete{3.0}{281}{, \mpicpptype{MPI::Info} in C++,} and \ftype{INTEGER} in Fortran. 
 % It consists of
 It stores an unordered set of
 (\mpiarg{key},\mpiarg{value}) pairs (both \mpiarg{key} and
@@ -100,7 +100,7 @@
 \begin{funcdef}{MPI\_INFO\_CREATE(info)}
 \funcarg{\OUT}{info}{info object created (handle)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_create(MPI\_Info *info)}
 \mpifbind{MPI\_INFO\_CREATE(INFO, IERROR)\fargs INTEGER INFO, IERROR}
 \mpicppemptybind{MPI::Info::Create()}{static MPI::Info}
@@ -113,7 +113,7 @@
 \funcarg{\IN}{key}{key (string)}
 \funcarg{\IN}{value}{value (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_set(MPI\_Info~info, \MPIupdate{3.0}{140}{const }char~*key, \MPIupdate{3.0}{140}{const }char~*value)}
 \mpifbind{MPI\_INFO\_SET(INFO, KEY, VALUE, IERROR)\fargs INTEGER INFO, IERROR \\CHARACTER*(*) KEY, VALUE}
 \mpicppemptybind{MPI::Info::Set(const~char*~key, const~char*~value)}{void}
@@ -129,7 +129,7 @@
 \funcarg{\INOUT}{info}{info object (handle)}
 \funcarg{\IN}{key}{key (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_delete(MPI\_Info~info, \MPIupdate{3.0}{140}{const }char~*key)}
 \mpifbind{MPI\_INFO\_DELETE(INFO, KEY, IERROR)\fargs INTEGER INFO, IERROR \\CHARACTER*(*) KEY}
 \mpicppemptybind{MPI::Info::Delete(const~char*~key)}{void}
@@ -145,7 +145,7 @@
 \funcarg{\OUT}{value}{value (string)}
 \funcarg{\OUT}{flag}{ \constskip{true} if key defined, \constskip{false} if not (boolean)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_get(MPI\_Info~info, \MPIupdate{3.0}{140}{const }char~*key, int~valuelen, char~*value, int~*flag)}
 \mpifbind{MPI\_INFO\_GET(INFO, KEY, VALUELEN, VALUE, FLAG, IERROR)\fargs INTEGER INFO, VALUELEN, IERROR \\CHARACTER*(*) KEY, VALUE \\LOGICAL FLAG}
 \mpicppemptybind{MPI::Info::Get(const~char*~key, int~valuelen, char*~value) const}{bool}
@@ -171,7 +171,7 @@
 \funcarg{\OUT}{valuelen}{length of value arg (integer)}
 \funcarg{\OUT}{flag}{ \constskip{true} if key defined, \constskip{false} if not (boolean)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_get\_valuelen(MPI\_Info~info, \MPIupdate{3.0}{140}{const }char~*key, int~*valuelen, int~*flag)}
 \mpifbind{MPI\_INFO\_GET\_VALUELEN(INFO, KEY, VALUELEN, FLAG, IERROR)\fargs INTEGER INFO, VALUELEN, IERROR \\LOGICAL FLAG \\CHARACTER*(*) KEY}
 \mpicppemptybind{MPI::Info::Get\_valuelen(const~char*~key, int\&~valuelen) const}{bool}
@@ -190,7 +190,7 @@
 \funcarg{\IN}{info}{info object (handle)}
 \funcarg{\OUT}{nkeys}{number of defined keys (integer)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_get\_nkeys(MPI\_Info~info, int~*nkeys)}
 \mpifbind{MPI\_INFO\_GET\_NKEYS(INFO, NKEYS, IERROR)\fargs INTEGER INFO, NKEYS, IERROR}
 \mpicppemptybind{MPI::Info::Get\_nkeys() const}{int}
@@ -203,7 +203,7 @@
 \funcarg{\IN}{n}{key number (integer)}
 \funcarg{\OUT}{key}{key (string)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_get\_nthkey(MPI\_Info~info, int~n, char~*key)}
 \mpifbind{MPI\_INFO\_GET\_NTHKEY(INFO, N, KEY, IERROR)\fargs INTEGER INFO, N, IERROR \\CHARACTER*(*) KEY}
 \mpicppemptybind{MPI::Info::Get\_nthkey(int~n, char*~key) const}{void}
@@ -221,7 +221,7 @@
 \funcarg{\IN}{info}{info object (handle)}
 \funcarg{\OUT}{newinfo}{info object (handle)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_dup(MPI\_Info info, MPI\_Info *newinfo)}
 \mpifbind{MPI\_INFO\_DUP(INFO, NEWINFO, IERROR)\fargs INTEGER INFO, NEWINFO, IERROR}
 \mpicppemptybind{MPI::Info::Dup() const}{MPI::Info}
@@ -232,7 +232,7 @@
 \begin{funcdef}{MPI\_INFO\_FREE(info)}
 \funcarg{\INOUT}{info}{info object (handle)}
 \end{funcdef}
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Info\_free(MPI\_Info *info)}
 \mpifbind{MPI\_INFO\_FREE(INFO, IERROR) \fargs INTEGER INFO, IERROR}
 \mpicppemptybind{MPI::Info::Free()}{void}
Index: chap-ei/ei-2.tex
===================================================================
--- chap-ei/ei-2.tex	(revision 1036)
+++ chap-ei/ei-2.tex	(working copy)
@@ -88,19 +88,23 @@
 \funcarg{\OUT}{request}{generalized request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Grequest\_start(MPI\_Grequest\_query\_function *query\_fn, MPI\_Grequest\_free\_function *free\_fn, MPI\_Grequest\_cancel\_function *cancel\_fn, void *extra\_state, MPI\_Request *request)}
 
 \mpifbind{MPI\_GREQUEST\_START(QUERY\_FN, FREE\_FN, CANCEL\_FN, EXTRA\_STATE, REQUEST, IERROR)\fargs INTEGER REQUEST, IERROR\\EXTERNAL QUERY\_FN, FREE\_FN, CANCEL\_FN\\INTEGER (KIND=MPI\_ADDRESS\_KIND) EXTRA\_STATE}
 
 \mpicppemptybind{MPI::Grequest::Start(const~MPI::Grequest::Query\_function* query\_fn, const~MPI::Grequest::Free\_function* free\_fn, const~MPI::Grequest::Cancel\_function*~cancel\_fn, void~*extra\_state)}{static MPI::Grequest}
 
-\cdeclmainindex{MPI::Grequest}%
+%
 
 \begin{users}
-Note that a generalized request belongs, in C++, to the class
-\type{MPI::Grequest}, which is a derived class of \type{MPI::Request}.
-It is of the same type as regular requests, in C and Fortran.
+Note that a generalized request
+\MPIdeleteBegin{3.0}{281}
+belongs, in C++, to the class
+\mpicpptype{MPI::Grequest}, which is a derived class of \mpicpptype{MPI::Request}.
+It
+\MPIdeleteEnd{3.0}
+is of the same type as regular requests, in C and Fortran.
 \end{users}
 
 The call starts a generalized request and returns a handle to it in
@@ -116,7 +120,7 @@
 C, the query function is
 \medskip
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpitypedefbind{MPI\_Grequest\_query\_function(void *extra\_state, MPI\_Status~*status)} 
 
 \par\noindent
@@ -127,10 +131,11 @@
 \mpifsubbind{GREQUEST\_QUERY\_FUNCTION(EXTRA\_STATE, STATUS, IERROR)\fargs INTEGER STATUS(MPI\_STATUS\_SIZE), IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) EXTRA\_STATE}
 
 \par\noindent
+\MPIdeleteBegin{3.0}{281}
 and in C++
 
 \medskip
-
+\MPIdeleteEnd{3.0}
 \mpicpptypedefemptybind{MPI::Grequest::Query\_function(void* extra\_state, MPI::Status\&~status)}{int}
 
 \MPIreplace{3.0}{0}{\mpifunc{query\_fn}}{The \mpifunc{query\_fn}} function computes the status
@@ -329,7 +334,7 @@
 \funcarg{\INOUT}{request}{generalized request (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
+\cdeclindex{MPI\_Request}%
 \mpibind{MPI\_Grequest\_complete(MPI\_Request request)}
 
 \mpifbind{MPI\_GREQUEST\_COMPLETE(REQUEST, IERROR)\fargs INTEGER REQUEST, IERROR}
@@ -555,7 +560,7 @@
 \funcarg{\IN}{count}{number of elements to associate with status (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Status\_set\_elements(MPI\_Status *status, MPI\_Datatype datatype, int~count)}
 
 \mpifbind{MPI\_STATUS\_SET\_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)\fargs INTEGER STATUS(MPI\_STATUS\_SIZE), DATATYPE, COUNT, IERROR}
@@ -574,7 +579,7 @@
 \funcarg{\IN}{count}{number of elements to associate with status (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Status\_set\_elements\_x(MPI\_Status *status, MPI\_Datatype datatype, MPI\_Count~count)}
 
 \mpifbind{MPI\_STATUS\_SET\_ELEMENTS\_X(STATUS, DATATYPE, COUNT, IERROR)\fargs INTEGER STATUS(MPI\_STATUS\_SIZE), DATATYPE, IERROR\\INTEGER (KIND=MPI\_COUNT\_KIND) COUNT}
@@ -626,7 +631,7 @@
 \funcarg{\IN}{flag}{if true indicates request was cancelled (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Status\_set\_cancelled(MPI\_Status *status, int flag)}
 
 \mpifbind{MPI\_STATUS\_SET\_CANCELLED(STATUS, FLAG, IERROR)\fargs INTEGER STATUS(MPI\_STATUS\_SIZE), IERROR\\LOGICAL FLAG}
Index: chap-removed/removed.tex
===================================================================
--- chap-removed/removed.tex	(revision 1036)
+++ chap-removed/removed.tex	(working copy)
@@ -7,1026 +7,11 @@
 \section{C++ Bindings Removed}
 \label{sec:rm-cpp}
 
-\subsection{Overview}
-\label{subsec:rm-cpp-intro}
+C++ bindings were deprecated as of \texorpdfstring{\MPIIIDOTII/}{MPI-2.2}.
+C++ bindings are removed in \texorpdfstring{\MPIIIIDOTO/}{MPI-3.0}.
+The namespace is still reserved, however,
+and bindings may only be provided by an implementation
+as described in
+the \texorpdfstring{\MPIIIDOTII/}{MPI-2.2} standard.
 
-C++ bindings were DEPRECATED as of MPI-2.2.
-C++ bindings are REMOVED in MPI-3.0.
-The namespaces are still reserved, however, and may only be provided by an implementation
-(for backwards compatability) as described here.
-
-Where an MPI-3.0 interface does not have a corresponding C++ interface,
-the C interface should be used.
-
-\subsection{Removed C++ Functions}
-\label{subsec:rm-cpp-func}
-
-\subsubsection{Language Bindings}
-
-\mpicppbind{MPI::Datatype::Create\_f90\_real(int~p, int~r)}{static MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_f90\_complex(int~p, int~r)}{static MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_f90\_integer(int~r)}{static MPI::Datatype}
-\mpicppbind{MPI::Datatype::Match\_size(int~typeclass, int~size)}{static MPI::Datatype}
-
-
-\subsubsection{Collective Communication}
-
-\mpicppbind{MPI::Comm::Barrier() const~=~0}{void}
-\mpicppbind{MPI::Comm::Bcast(void*~buffer, int~count, const~MPI::Datatype\&~datatype, int~root) const~=~0}{void}
-\mpicppbind{MPI::Comm::Gather(const void*~sendbuf, int~sendcount,  const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount,  const~MPI::Datatype\&~recvtype, int~root) const~=~0}{void}
-\mpicppbind{MPI::Comm::Gatherv(const void*~sendbuf, int~sendcount,  const MPI::Datatype\&~sendtype, void*~recvbuf, const~int~recvcounts[], const~int~displs[], const~MPI::Datatype\&~recvtype, int~root) const~=~0}{void}
-\mpicppbind{MPI::Comm::Scatter(const void*~sendbuf, int~sendcount,  const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount,  const~MPI::Datatype\&~recvtype, int~root) const~=~0}{void}
-\mpicppbind{MPI::Comm::Scatterv(const void*~sendbuf, const~int~sendcounts[], const~int~displs[], const~MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~root) const~=~0}{void}
-\mpicppbind{MPI::Comm::Allgather(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype) const~=~0}{void}
-\mpicppbind{MPI::Comm::Allgatherv(const void*~sendbuf, int~sendcount,  const MPI::Datatype\&~sendtype, void*~recvbuf,  const~int~recvcounts[], const~int~displs[],  const~MPI::Datatype\&~recvtype) const~=~0}{void}
-\mpicppbind{MPI::Comm::Alltoall(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype) const~=~0}{void}
-\mpicppbind{MPI::Comm::Alltoallv(const void*~sendbuf,  const~int~sendcounts[], const~int~sdispls[],  const~MPI::Datatype\&~sendtype, void*~recvbuf,  const~int~recvcounts[], const~int~rdispls[],  const~MPI::Datatype\&~recvtype) const~=~0}{void}
-\mpicppbind{MPI::Comm::Alltoallw(const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const~=~0}{void}
-\mpicppbind{MPI::Comm::Reduce(const void*~sendbuf, void*~recvbuf,  int~count, const~MPI::Datatype\&~datatype, const~MPI::Op\&~op,  int~root) const~=~0}{void}
-\mpicppbind{MPI::Op::Init(MPI::User\_function~*function, bool~commute)}{void}
-\mpicppbind{MPI::Op::Free()}{void}
-\mpicppbind{MPI::Comm::Allreduce(const void*~sendbuf, void*~recvbuf,  int~count, const MPI::Datatype\&~datatype, const~MPI::Op\&~op) const~=~0}{void}
-\mpicppbind{MPI::Op::Reduce\_local(const void*~inbuf, void*~inoutbuf, int~count, const MPI::Datatype\&~datatype) const}{void}
-\mpicppbind{MPI::Op::Is\_commutative() const}{bool}
-\mpicppbind{MPI::Comm::Reduce\_scatter\_block(const void*~sendbuf,  void*~recvbuf, int~recvcount, const~MPI::Datatype\&~datatype,  const~MPI::Op\&~op) const~=~0}{void}
-\mpicppbind{MPI::Comm::Reduce\_scatter(const void*~sendbuf,  void*~recvbuf, int~recvcounts[], const~MPI::Datatype\&~datatype,  const~MPI::Op\&~op) const~=~0}{void}
-\mpicppbind{MPI::Intracomm::Scan(const void*~sendbuf, void*~recvbuf, int~count, const MPI::Datatype\&~datatype, const~MPI::Op\&~op) const}{void}
-\mpicppbind{MPI::Intracomm::Exscan(const void* sendbuf, void* recvbuf, int count, const MPI::Datatype\& datatype, const MPI::Op\& op) const}{void}
-\mpicppbind{MPI::Comm::Ibarrier() const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ibcast(void*~buffer, int~count, const~MPI::Datatype\&~datatype, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Igather(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Igatherv(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, const~int~recvcounts[], const~int~displs[], const~MPI::Datatype\&~recvtype, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Iscatter(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Iscatterv(const void*~sendbuf, const~int~sendcounts[], const~int~displs[], const~MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Iallgather(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Iallgatherv(const void*~sendbuf, int~sendcount,  const MPI::Datatype\&~sendtype, void*~recvbuf, const~int~recvcounts[], const~int~displs[], const~MPI::Datatype\&~recvtype) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ialltoall(const void*~sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ialltoallv(const void*~sendbuf, const~int~sendcounts[], const~int~sdispls[], const~MPI::Datatype\&~sendtype, void*~recvbuf,  const~int~recvcounts[], const~int~rdispls[],  const~MPI::Datatype\&~recvtype) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ialltoallw(const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI::Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI::Datatype recvtypes[]) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ireduce(const void*~sendbuf, void*~recvbuf, int~count, const~MPI::Datatype\&~datatype, const~MPI::Op\&~op, int~root) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Iallreduce(const void*~sendbuf, void*~recvbuf,  int~count, const MPI::Datatype\&~datatype, const~MPI::Op\&~op) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ireduce\_scatter\_block(const void*~sendbuf, void*~recvbuf, int~recvcount, const~MPI::Datatype\&~datatype, const~MPI::Op\&~op) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Comm::Ireduce\_scatter(const void*~sendbuf, void*~recvbuf, int~recvcounts[], const~MPI::Datatype\&~datatype, const~MPI::Op\&~op) const~=~0}{MPI::Request}
-\mpicppbind{MPI::Intracomm::Iscan(const void*~sendbuf, void*~recvbuf, int~count, const MPI::Datatype\&~datatype, const~MPI::Op\&~op) const}{MPI::Request}
-\mpicppbind{MPI::Intracomm::Iexscan(const void* sendbuf, void* recvbuf, int count, const MPI::Datatype\& datatype, const MPI::Op\& op) const}{MPI::Request}
-\mpicpptypedefbind{MPI::User\_function(const void* invec, void* inoutvec, int len, const Datatype\& datatype)}{void}
-
-
-\subsubsection{Groups, Contexts, Communicators, and Caching}
-
-\mpicppbind{MPI::Group::Get\_size() const}{int}
-\mpicppbind{MPI::Group::Get\_rank() const}{int}
-\mpicppbind{MPI::Group::Translate\_ranks (const~MPI::Group\&~group1, int~n, const~int~ranks1[], const~MPI::Group\&~group2, int~ranks2[])}{static void}
-\mpicppbind{MPI::Group::Compare(const~MPI::Group\&~group1, const~MPI::Group\&~group2)}{static int}
-\mpicppbind{MPI::Comm::Get\_group() const}{MPI::Group}
-\mpicppbind{MPI::Group::Union(const~MPI::Group\&~group1, const~MPI::Group\&~group2)}{static MPI::Group}
-\mpicppbind{MPI::Group::Intersect(const~MPI::Group\&~group1, const~MPI::Group\&~group2)}{static MPI::Group}
-\mpicppbind{MPI::Group::Difference(const~MPI::Group\&~group1, const~MPI::Group\&~group2)}{static MPI::Group}
-\mpicppbind{MPI::Group::Incl(int~n, const~int~ranks[]) const}{MPI::Group}
-\mpicppbind{MPI::Group::Excl(int~n, const~int~ranks[]) const}{MPI::Group}
-\mpicppbind{MPI::Group::Range\_incl(int~n, const~int~ranges[][3]) const}{MPI::Group}
-\mpicppbind{MPI::Group::Range\_excl(int~n, const~int~ranges[][3]) const}{MPI::Group}
-\mpicppbind{MPI::Group::Free()}{void}
-\mpicppbind{MPI::Comm::Get\_size() const}{int}
-\mpicppbind{MPI::Comm::Get\_rank() const}{int}
-\mpicppbind{MPI::Comm::Compare(const~MPI::Comm\&~comm1, const~MPI::Comm\&~comm2)}{static int}
-\mpicppbind{MPI::Intracomm::Dup() const}{MPI::Intracomm}
-\mpicppbind{MPI::Intercomm::Dup() const}{MPI::Intercomm}
-\mpicppbind{MPI::Cartcomm::Dup() const}{MPI::Cartcomm}
-\mpicppbind{MPI::Graphcomm::Dup() const}{MPI::Graphcomm}
-\mpicppbind{MPI::Distgraphcomm::Dup() const}{MPI::Distgraphcomm}
-\mpicppbind{MPI::Comm::Clone() const = 0}{MPI::Comm\&}
-\mpicppbind{MPI::Intracomm::Clone() const}{MPI::Intracomm\&}
-\mpicppbind{MPI::Intercomm::Clone() const}{MPI::Intercomm\&}
-\mpicppbind{MPI::Cartcomm::Clone() const}{MPI::Cartcomm\&}
-\mpicppbind{MPI::Graphcomm::Clone() const}{MPI::Graphcomm\&}
-\mpicppbind{MPI::Distgraphcomm::Clone() const}{MPI::Distgraphcomm\&}
-\mpicppbind{MPI::Intercomm::Create(const MPI::Group\&~group) const}{MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Create(const MPI::Group\& group) const}{MPI::Intracomm}
-\mpicppbind{MPI::Intercomm::Split(int color, int key) const}{MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Split(int color, int key) const}{MPI::Intracomm}
-\mpicppbind{MPI::Comm::Free()}{void}
-\mpicppbind{MPI::Comm::Is\_inter() const}{bool}
-\mpicppbind{MPI::Intercomm::Get\_remote\_size() const}{int}
-\mpicppbind{MPI::Intercomm::Get\_remote\_group() const}{MPI::Group}
-\mpicppbind{MPI::Intracomm::Create\_intercomm(int~local\_leader, const MPI::Comm\&~peer\_comm, int~remote\_leader, int~tag) const}{MPI::Intercomm}
-\mpicppbind{MPI::Intercomm::Merge(bool~high) const}{MPI::Intracomm}
-\mpicppbind{MPI::Comm::Create\_keyval(MPI::Comm::Copy\_attr\_function* comm\_copy\_attr\_fn, MPI::Comm::Delete\_attr\_function*~comm\_delete\_attr\_fn, void*~extra\_state)}{static int}
-\mpicppbind{MPI::Comm::Free\_keyval(int\& comm\_keyval)}{static void}
-\mpicppbind{MPI::Comm::Set\_attr(int comm\_keyval, const void* attribute\_val) const}{void}
-\mpicppbind{MPI::Comm::Get\_attr(int comm\_keyval, void* attribute\_val) const}{bool}
-\mpicppbind{MPI::Comm::Delete\_attr(int comm\_keyval)}{void}
-\mpicppbind{MPI::Win::Create\_keyval(MPI::Win::Copy\_attr\_function* win\_copy\_attr\_fn, MPI::Win::Delete\_attr\_function*~win\_delete\_attr\_fn, void*~extra\_state)}{static int}
-\mpicppbind{MPI::Win::Free\_keyval(int\& win\_keyval)}{static void}
-\mpicppbind{MPI::Win::Set\_attr(int win\_keyval, const void* attribute\_val)}{void}
-\mpicppbind{MPI::Win::Get\_attr(int~win\_keyval, void*~attribute\_val) const}{bool}
-\mpicppbind{MPI::Win::Delete\_attr(int win\_keyval)}{void}
-\mpicppbind{MPI::Datatype::Create\_keyval(MPI::Datatype::Copy\_attr\_function* type\_copy\_attr\_fn, MPI::Datatype::Delete\_attr\_function* type\_delete\_attr\_fn, void*~extra\_state)}{static int}
-\mpicppbind{MPI::Datatype::Free\_keyval(int\& type\_keyval)}{static void}
-\mpicppbind{MPI::Datatype::Set\_attr(int type\_keyval, const void* attribute\_val)}{void}
-\mpicppbind{MPI::Datatype::Get\_attr(int type\_keyval, void* attribute\_val) const}{bool}
-\mpicppbind{MPI::Datatype::Delete\_attr(int type\_keyval)}{void}
-\mpicppbind{MPI::Comm::Set\_name(const char* comm\_name)}{void}
-\mpicppbind{MPI::Comm::Get\_name(char* comm\_name, int\& resultlen) const}{void}
-\mpicppbind{MPI::Datatype::Set\_name(const char* type\_name)}{void}
-\mpicppbind{MPI::Datatype::Get\_name(char* type\_name, int\& resultlen) const}{void}
-\mpicppbind{MPI::Win::Set\_name(const char* win\_name)}{void}
-\mpicppbind{MPI::Win::Get\_name(char* win\_name, int\& resultlen) const}{void}
-\mpicpptypedefbind{MPI::Comm::Copy\_attr\_function(const~MPI::Comm\&~oldcomm, int~comm\_keyval, void*~extra\_state, void*~attribute\_val\_in, void*~attribute\_val\_out, bool\&~flag)}{int}
-\mpicpptypedefbind{MPI::Comm::Delete\_attr\_function(MPI::Comm\&~comm, int~comm\_keyval, void*~attribute\_val, void*~extra\_state)}{int}
-\mpicpptypedefbind{MPI::Win::Copy\_attr\_function(const~MPI::Win\&~oldwin, int~win\_keyval, void*~extra\_state, void*~attribute\_val\_in, void*~attribute\_val\_out, bool\&~flag)}{int}
-\mpicpptypedefbind{MPI::Win::Delete\_attr\_function(MPI::Win\&~win, int~win\_keyval, void*~attribute\_val, void*~extra\_state)}{int}
-\mpicpptypedefbind{MPI::Datatype::Copy\_attr\_function(const~MPI::Datatype\&~oldtype, int~type\_keyval, void*~extra\_state, const~void*~attribute\_val\_in, void*~attribute\_val\_out, bool\&~flag)}{int}
-\mpicpptypedefbind{MPI::Datatype::Delete\_attr\_function(MPI::Datatype\&~type, int~type\_keyval, void*~attribute\_val, void*~extra\_state)}{int}
-
-
-\subsubsection{Datatypes}
-
-\mpicppbind{MPI::Datatype::Create\_contiguous(int~count) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_vector(int~count, int~blocklength, int~stride) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_hvector(int count, int blocklength, MPI::Aint stride) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_indexed(int~count, const~int~array\_of\_blocklengths[], const~int~array\_of\_displacements[]) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_hindexed(int count, const~int~array\_of\_blocklengths[], const~MPI::Aint~array\_of\_displacements[]) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_indexed\_block(int~count, int~blocklength, const~int~array\_of\_displacements[])~const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_struct(int count, const~int~array\_of\_blocklengths[], const~MPI::Aint array\_of\_displacements[], const~MPI::Datatype~array\_of\_types[])}{static MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_subarray(int~ndims, const~int~array\_of\_sizes[], const~int~array\_of\_subsizes[], const~int~array\_of\_starts[], int~order) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Create\_darray(int~size, int~rank, int~ndims, const~int~array\_of\_gsizes[], const~int~array\_of\_distribs[], const~int~array\_of\_dargs[], const~int~array\_of\_psizes[], int~order) const}{MPI::Datatype}
-\mpicppbind{MPI::Get\_address(void* location)}{MPI::Aint}
-\mpicppbind{MPI::Datatype::Get\_size() const}{int}
-\mpicppbind{MPI::Datatype::Get\_extent(MPI::Aint\& lb, MPI::Aint\& extent) const}{void}
-\mpicppbind{MPI::Datatype::Create\_resized(const~MPI::Aint~lb, const~MPI::Aint~extent) const}{MPI::Datatype}
-\mpicppbind{MPI::Datatype::Get\_true\_extent(MPI::Aint\& true\_lb, MPI::Aint\&~true\_extent) const}{void}
-\mpicppbind{MPI::Datatype::Commit()}{void}
-\mpicppbind{MPI::Datatype::Free()}{void}
-\mpicppbind{MPI::Datatype::Dup() const}{MPI::Datatype}
-\mpicppbind{MPI::Status::Get\_elements(const~MPI::Datatype\&~datatype) const}{int}
-\mpicppbind{MPI::Datatype::Get\_envelope(int\&~num\_integers, int\&~num\_addresses, int\&~num\_datatypes, int\&~combiner) const}{void}
-\mpicppbind{MPI::Datatype::Get\_contents(int~max\_integers, int~max\_addresses, int~max\_datatypes, int~array\_of\_integers[], MPI::Aint~array\_of\_addresses[], MPI::Datatype~array\_of\_datatypes[]) const}{void}
-\mpicppbind{MPI::Datatype::Pack(const void*~inbuf, int~incount, void~*outbuf, int~outsize, int\&~position, const~MPI::Comm~\&comm) const}{void}
-\mpicppbind{MPI::Datatype::Unpack(const void*~inbuf, int~insize, void~*outbuf, int~outcount, int\&~position, const~MPI::Comm\&~comm) const}{void}
-\mpicppbind{MPI::Datatype::Pack\_size(int~incount, const MPI::Comm\&~comm) const}{int}
-\mpicppbind{MPI::Datatype::Pack\_external(const~char*~datarep, const void*~inbuf, int~incount, void*~outbuf, MPI::Aint~outsize, MPI::Aint\&~position) const}{void}
-\mpicppbind{MPI::Datatype::Unpack\_external(const~char*~datarep, const~void*~inbuf, MPI::Aint~insize, MPI::Aint\&~position, void*~outbuf, int~outcount) const }{void}
-\mpicppbind{MPI::Datatype::Pack\_external\_size(const~char*~datarep, int~incount) const}{MPI::Aint}
-
-
-\subsubsection{Process Creation and Management}
-
-\mpicppbind{MPI::Intracomm::Spawn(const~char*~command, const~char*~argv[], int~maxprocs, const~MPI::Info\&~info, int~root, int~array\_of\_errcodes[]) const}{MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Spawn(const~char*~command, const~char*~argv[], int~maxprocs, const~MPI::Info\&~info, int~root) const}{MPI::Intercomm}
-\mpicppbind{MPI::Comm::Get\_parent()}{static MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Spawn\_multiple(int~count, const~char*~array\_of\_commands[], const~char**~array\_of\_argv[], const~int~array\_of\_maxprocs[], const~MPI::Info~array\_of\_info[], int~root, int~array\_of\_errcodes[])}{MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Spawn\_multiple(int~count, const~char*~array\_of\_commands[], const~char**~array\_of\_argv[], const~int~array\_of\_maxprocs[], const~MPI::Info~array\_of\_info[], int~root)}{MPI::Intercomm}
-\mpicppbind{MPI::Open\_port(const~MPI::Info\&~info, char*~port\_name)}{void}
-\mpicppbind{MPI::Close\_port(const~char*~port\_name)}{void}
-\mpicppbind{MPI::Intracomm::Accept(const~char*~port\_name, const~MPI::Info\&~info, int~root) const}{MPI::Intercomm}
-\mpicppbind{MPI::Intracomm::Connect(const~char*~port\_name, const~MPI::Info\&~info, int~root) const}{MPI::Intercomm}
-\mpicppbind{MPI::Publish\_name(const~char*~service\_name, const~MPI::Info\&~info, const~char*~port\_name)}{void}
-\mpicppbind{MPI::Unpublish\_name(const~char*~service\_name, const~MPI::Info\&~info, const~char*~port\_name)}{void}
-\mpicppbind{MPI::Lookup\_name(const~char*~service\_name, const~MPI::Info\&~info, char*~port\_name)}{void}
-\mpicppbind{MPI::Comm::Disconnect()}{void}
-\mpicppbind{MPI::Comm::Join(const~int~fd)}{static MPI::Intercomm}
-
-
-\subsubsection{External Interfaces}
-
-\mpicppbind{MPI::Grequest::Start(const~MPI::Grequest::Query\_function* query\_fn, const~MPI::Grequest::Free\_function* free\_fn, const~MPI::Grequest::Cancel\_function*~cancel\_fn, void~*extra\_state)}{static MPI::Grequest}
-\mpicppbind{MPI::Grequest::Complete()}{void}
-\mpicppbind{MPI::Status::Set\_elements(const MPI::Datatype\& datatype, int count)}{void}
-\mpicppbind{MPI::Status::Set\_cancelled(bool flag)}{void}
-\mpicppbind{MPI::Init\_thread(int\& argc, char**\& argv, int required)}{int}
-\mpicppbind{MPI::Init\_thread(int required)}{int}
-\mpicppbind{MPI::Query\_thread()}{int}
-\mpicppbind{MPI::Is\_thread\_main()}{bool}
-\mpicpptypedefbind{MPI::Grequest::Query\_function(void* extra\_state, MPI::Status\&~status)}{int}
-\mpicpptypedefbind{MPI::Grequest::Free\_function(void* extra\_state)}{int}
-\mpicpptypedefbind{MPI::Grequest::Cancel\_function(void* extra\_state, bool~complete)}{int}
-
-
-\subsubsection{MPI Environmental Management}
-
-\mpicppbind{MPI::Get\_version(int\& version, int\& subversion)}{void}
-\mpicppbind{MPI::Get\_processor\_name(char*~name, int\&~resultlen)}{void}
-\mpicppbind{MPI::Alloc\_mem(MPI::Aint size, const MPI::Info\& info)}{void*}
-\mpicppbind{MPI::Free\_mem(void *base)}{void}
-\mpicppbind{MPI::Comm::Create\_errhandler(MPI::Comm::Errhandler\_function* function)}{static MPI::Errhandler}
-\mpicppbind{MPI::Comm::Set\_errhandler(const MPI::Errhandler\& errhandler)}{void}
-\mpicppbind{MPI::Comm::Get\_errhandler() const}{MPI::Errhandler}
-\mpicppbind{MPI::Win::Create\_errhandler(MPI::Win::Errhandler\_function* function)}{static MPI::Errhandler}
-\mpicppbind{MPI::Win::Set\_errhandler(const MPI::Errhandler\& errhandler)}{void}
-\mpicppbind{MPI::Win::Get\_errhandler() const}{MPI::Errhandler}
-\mpicppbind{MPI::File::Create\_errhandler(MPI::File::Errhandler\_function* function)}{static MPI::Errhandler}
-\mpicppbind{MPI::File::Set\_errhandler(const MPI::Errhandler\& errhandler)}{void}
-\mpicppbind{MPI::File::Get\_errhandler() const}{MPI::Errhandler}
-\mpicppbind{MPI::Errhandler::Free()}{void}
-\mpicppbind{MPI::Get\_error\_string(int~errorcode, char*~name, int\&~resultlen)}{void}
-\mpicppbind{MPI::Get\_error\_class(int~errorcode)}{int}
-\mpicppbind{MPI::Add\_error\_class()}{int}
-\mpicppbind{MPI::Add\_error\_code(int errorclass)}{int}
-\mpicppbind{MPI::Add\_error\_string(int errorcode, const char* string)}{void}
-\mpicppbind{MPI::Comm::Call\_errhandler(int errorcode) const}{void}
-\mpicppbind{MPI::Win::Call\_errhandler(int errorcode) const}{void}
-\mpicppbind{MPI::File::Call\_errhandler(int errorcode) const}{void}
-\mpicppbind{MPI::Wtime()}{double}
-\mpicppbind{MPI::Wtick()}{double}
-\mpicppbind{MPI::Init(int\&~argc, char**\&~argv)}{void}
-\mpicppbind{MPI::Init()}{void}
-\mpicppbind{MPI::Finalize()}{void}
-\mpicppbind{MPI::Is\_initialized()}{bool}
-\mpicppbind{MPI::Comm::Abort(int~errorcode)}{void}
-\mpicppbind{MPI::Is\_finalized()}{bool}
-\mpicpptypedefbind{MPI::Comm::Errhandler\_function(MPI::Comm \&, int *, \ldots )}{void}
-\mpicpptypedefbind{MPI::Win::Errhandler\_function(MPI::Win \&, int *, \ldots )}{void}
-\mpicpptypedefbind{MPI::File::Errhandler\_function(MPI::File \&, int *, \ldots )}{void}
-
-
-\subsubsection{I/O}
-
-\mpicppbind{MPI::File::Open(const~MPI::Intracomm\&~comm, const~char*~filename, int~amode, const~MPI::Info\&~info)}{static MPI::File}
-\mpicppbind{MPI::File::Close()}{void}
-\mpicppbind{MPI::File::Delete(const~char*~filename, const~MPI::Info\&~info)}{static void}
-\mpicppbind{MPI::File::Set\_size(MPI::Offset~size)}{void}
-\mpicppbind{MPI::File::Preallocate(MPI::Offset~size)}{void}
-\mpicppbind{MPI::File::Get\_size() const}{MPI::Offset}
-\mpicppbind{MPI::File::Get\_group() const}{MPI::Group}
-\mpicppbind{MPI::File::Get\_amode() const}{int}
-\mpicppbind{MPI::File::Set\_info(const~MPI::Info\&~info)}{void}
-\mpicppbind{MPI::File::Get\_info() const}{MPI::Info}
-\mpicppbind{MPI::File::Set\_view(MPI::Offset~disp, const~MPI::Datatype\&~etype, const~MPI::Datatype\&~filetype, const~char*~datarep, const~MPI::Info\&~info)}{void}
-\mpicppbind{MPI::File::Get\_view(MPI::Offset\&~disp, MPI::Datatype\&~etype, MPI::Datatype\&~filetype, char*~datarep) const}{void}
-\mpicppbind{MPI::File::Read\_at(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_at(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Read\_at\_all(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_at\_all(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_at(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_at(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_at\_all(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_at\_all(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Iread\_at(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Iwrite\_at(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Read(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\& status)}{void}
-\mpicppbind{MPI::File::Read(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Read\_all(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_all(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_all(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_all(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Iread(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Iwrite(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Seek(MPI::Offset~offset, int~whence)}{void}
-\mpicppbind{MPI::File::Get\_position() const}{MPI::Offset}
-\mpicppbind{MPI::File::Get\_byte\_offset(const~MPI::Offset~disp) const}{MPI::Offset}
-\mpicppbind{MPI::File::Read\_shared(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_shared(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_shared(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_shared(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Iread\_shared(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Iwrite\_shared(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
-\mpicppbind{MPI::File::Read\_ordered(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_ordered(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_ordered(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_ordered(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Seek\_shared(MPI::Offset~offset, int~whence)}{void}
-\mpicppbind{MPI::File::Get\_position\_shared() const}{MPI::Offset}
-\mpicppbind{MPI::File::Read\_at\_all\_begin(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Read\_at\_all\_end(void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_at\_all\_end(void*~buf)}{void}
-\mpicppbind{MPI::File::Write\_at\_all\_begin(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_at\_all\_end(const~void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_at\_all\_end(const~void*~buf)}{void}
-\mpicppbind{MPI::File::Read\_all\_begin(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Read\_all\_end(void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_all\_end(void*~buf)}{void}
-\mpicppbind{MPI::File::Write\_all\_begin(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_all\_end(const~void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_all\_end(const~void*~buf)}{void}
-\mpicppbind{MPI::File::Read\_ordered\_begin(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Read\_ordered\_end(void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Read\_ordered\_end(void*~buf)}{void}
-\mpicppbind{MPI::File::Write\_ordered\_begin(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
-\mpicppbind{MPI::File::Write\_ordered\_end(const~void*~buf, MPI::Status\&~status)}{void}
-\mpicppbind{MPI::File::Write\_ordered\_end(const~void*~buf)}{void}
-\mpicppbind{MPI::File::Get\_type\_extent(const~MPI::Datatype\&~datatype) const}{MPI::Aint}
-\mpicppbind{MPI::Register\_datarep(const~char*~datarep, MPI::Datarep\_conversion\_function*~read\_conversion\_fn, MPI::Datarep\_conversion\_function*~write\_conversion\_fn, MPI::Datarep\_extent\_function*~dtype\_file\_extent\_fn, void*~extra\_state)}{void}
-\mpicppbind{MPI::File::Set\_atomicity(bool~flag)}{void}
-\mpicppbind{MPI::File::Get\_atomicity() const}{bool}
-\mpicppbind{MPI::File::Sync()}{void}
-\mpicpptypedefbind{MPI::Datarep\_extent\_function(const~MPI::Datatype\&~datatype, MPI::Aint\&~file\_extent, void*~extra\_state)}{void}
-\mpicpptypedefbind{MPI::Datarep\_conversion\_function(void*~userbuf, MPI::Datatype\&~datatype, int~count, void*~filebuf, MPI::Offset~position, void*~extra\_state)}{void}
-% \mpicpptypedefbind{MPI::Datarep\_extent\_function(const~MPI::Datatype\&~datatype, MPI::Aint\&~file\_extent, void*~extra\_state)}
-% \mpicpptypedefbind{MPI::Datarep\_conversion\_function(void*~userbuf, MPI::Datatype\&~datatype, int~count, void*~filebuf, MPI::Offset~position, void*~extra\_state)}
-
-
-\subsubsection{Info Object}
-
-\mpicppbind{MPI::Info::Create()}{static MPI::Info}
-\mpicppbind{MPI::Info::Set(const~char*~key, const~char*~value)}{void}
-\mpicppbind{MPI::Info::Delete(const~char*~key)}{void}
-\mpicppbind{MPI::Info::Get(const~char*~key, int~valuelen, char*~value) const}{bool}
-\mpicppbind{MPI::Info::Get\_valuelen(const~char*~key, int\&~valuelen) const}{bool}
-\mpicppbind{MPI::Info::Get\_nkeys() const}{int}
-\mpicppbind{MPI::Info::Get\_nthkey(int~n, char*~key) const}{void}
-\mpicppbind{MPI::Info::Dup() const}{MPI::Info}
-\mpicppbind{MPI::Info::Free()}{void}
-
-
-\subsubsection{One-Sided Communications}
-
-\mpicppbind{MPI::Win::Create(const void* base, MPI::Aint size, int disp\_unit, const MPI::Info\& info, const MPI::Intracomm\& comm)}{static MPI::Win}
-\mpicppbind{MPI::Win::Free()}{void}
-\mpicppbind{MPI::Win::Get\_group() const}{MPI::Group}
-\mpicppbind{MPI::Win::Put(const void* origin\_addr, int origin\_count, const MPI::Datatype\& origin\_datatype, int  target\_rank, MPI::Aint target\_disp, int target\_count, const  MPI::Datatype\& target\_datatype) const}{void}
-% \mpicppbind{MPI::Win::Get(const void *origin\_addr, int origin\_count, const MPI::Datatype\& origin\_datatype, int target\_rank, MPI::Aint target\_disp, int target\_count, const MPI::Datatype\& target\_datatype) const}{void}
-\mpicppbind{MPI::Win::Get(void *origin\_addr, int origin\_count, const MPI::Datatype\& origin\_datatype, int target\_rank, MPI::Aint target\_disp, int target\_count, const MPI::Datatype\& target\_datatype) const}{void}
-\mpicppbind{MPI::Win::Accumulate(const void* origin\_addr, int origin\_count, const MPI::Datatype\& origin\_datatype, int target\_rank, MPI::Aint target\_disp, int target\_count, const MPI::Datatype\& target\_datatype, const MPI::Op\& op) const}{void}
-\mpicppbind{MPI::Win::Fence(int assert) const}{void}
-\mpicppbind{MPI::Win::Start(const MPI::Group\& group, int assert) const}{void}
-\mpicppbind{MPI::Win::Complete() const}{void}
-\mpicppbind{MPI::Win::Post(const MPI::Group\& group, int assert) const}{void}
-\mpicppbind{MPI::Win::Wait() const}{void}
-\mpicppbind{MPI::Win::Test() const}{bool}
-\mpicppbind{MPI::Win::Lock(int lock\_type, int rank, int assert) const}{void}
-\mpicppbind{MPI::Win::Unlock(int rank) const}{void}
-
-
-\subsubsection{Profiling Interface}
-
-\mpicppbind{MPI::Pcontrol(const int~level, \ldots)}{void}
-
-
-\subsubsection{Point-to-Point Communication}
-
-\mpicppbind{MPI::Comm::Send(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{void}
-\mpicppbind{MPI::Comm::Recv(void*~buf, int~count, const~MPI::Datatype\&~datatype, int~source, int~tag, MPI::Status\&~status) const}{void}
-\mpicppbind{MPI::Comm::Recv(void*~buf, int~count, const~MPI::Datatype\&~datatype, int~source, int~tag) const}{void}
-\mpicppbind{MPI::Status::Get\_source() const}{int}
-\mpicppbind{MPI::Status::Set\_source(int~source)}{void}
-\mpicppbind{MPI::Status::Get\_tag() const}{int}
-\mpicppbind{MPI::Status::Set\_tag(int~tag)}{void}
-\mpicppbind{MPI::Status::Get\_error() const}{int}
-\mpicppbind{MPI::Status::Set\_error(int~error)}{void}
-\mpicppbind{MPI::Status::Get\_count(const~MPI::Datatype\&~datatype) const}{int}
-\mpicppbind{MPI::Comm::Bsend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{void}
-\mpicppbind{MPI::Comm::Ssend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{void}
-\mpicppbind{MPI::Comm::Rsend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{void}
-\mpicppbind{MPI::Attach\_buffer(void*~buffer, int~size)}{void}
-\mpicppbind{MPI::Detach\_buffer(void*\&~buffer)}{int}
-\mpicppbind{MPI::Comm::Isend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Request}
-\mpicppbind{MPI::Comm::Ibsend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Request}
-\mpicppbind{MPI::Comm::Issend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Request}
-\mpicppbind{MPI::Comm::Irsend(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Request}
-\mpicppbind{MPI::Comm::Irecv(void*~buf, int~count, const MPI::Datatype\&~datatype, int~source, int~tag) const}{MPI::Request}
-\mpicppbind{MPI::Request::Wait(MPI::Status\&~status)}{void}
-\mpicppbind{MPI::Request::Wait()}{void}
-\mpicppbind{MPI::Request::Test(MPI::Status\&~status)}{bool}
-\mpicppbind{MPI::Request::Test()}{bool}
-\mpicppbind{MPI::Request::Free()}{void}
-\mpicppbind{MPI::Request::Waitany(int~count, MPI::Request~array\_of\_requests[], MPI::Status\&~status)}{static int}
-\mpicppbind{MPI::Request::Waitany(int~count, MPI::Request~array\_of\_requests[])}{static int}
-\mpicppbind{MPI::Request::Testany(int~count, MPI::Request~array\_of\_requests[], int\&~index, MPI::Status\&~status)}{static bool}
-\mpicppbind{MPI::Request::Testany(int~count, MPI::Request~array\_of\_requests[], int\&~index)}{static bool}
-\mpicppbind{MPI::Request::Waitall(int~count, MPI::Request~array\_of\_requests[], MPI::Status~array\_of\_statuses[])}{static void}
-\mpicppbind{MPI::Request::Waitall(int~count, MPI::Request~array\_of\_requests[])}{static void}
-\mpicppbind{MPI::Request::Testall(int~count, MPI::Request~array\_of\_requests[], MPI::Status~array\_of\_statuses[])}{static bool}
-\mpicppbind{MPI::Request::Testall(int~count, MPI::Request~array\_of\_requests[])}{static bool}
-\mpicppbind{MPI::Request::Waitsome(int~incount, MPI::Request~array\_of\_requests[], int~array\_of\_indices[], MPI::Status~array\_of\_statuses[])}{static int}
-\mpicppbind{MPI::Request::Waitsome(int~incount, MPI::Request~array\_of\_requests[], int~array\_of\_indices[])}{static int}
-\mpicppbind{MPI::Request::Testsome(int~incount, MPI::Request~array\_of\_requests[], int~array\_of\_indices[], MPI::Status~array\_of\_statuses[])}{static int}
-\mpicppbind{MPI::Request::Testsome(int~incount, MPI::Request~array\_of\_requests[], int~array\_of\_indices[])}{static int}
-\mpicppbind{MPI::Request::Get\_status(MPI::Status\& status) const}{bool}
-\mpicppbind{MPI::Request::Get\_status() const}{bool}
-\mpicppbind{MPI::Comm::Iprobe(int~source, int~tag, MPI::Status\&~status) const}{bool}
-\mpicppbind{MPI::Comm::Iprobe(int~source, int~tag) const}{bool}
-\mpicppbind{MPI::Comm::Probe(int~source, int~tag, MPI::Status\&~status) const}{void}
-\mpicppbind{MPI::Comm::Probe(int~source, int~tag) const}{void}
-\mpicppbind{MPI::Request::Cancel() const}{void}
-\mpicppbind{MPI::Status::Is\_cancelled() const}{bool}
-\mpicppbind{MPI::Comm::Send\_init(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Prequest}
-\mpicppbind{MPI::Comm::Bsend\_init(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Prequest}
-\mpicppbind{MPI::Comm::Ssend\_init(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Prequest}
-\mpicppbind{MPI::Comm::Rsend\_init(const void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~tag) const}{MPI::Prequest}
-\mpicppbind{MPI::Comm::Recv\_init(void*~buf, int~count, const MPI::Datatype\&~datatype, int~source, int~tag) const}{MPI::Prequest}
-\mpicppbind{MPI::Prequest::Start()}{void}
-\mpicppbind{MPI::Prequest::Startall(int~count, MPI::Prequest~array\_of\_requests[])}{static void}
-\mpicppbind{MPI::Comm::Sendrecv(const void~*sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, int~dest, int~sendtag, void~*recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~source, int~recvtag, MPI::Status\&~status) const}{void}
-\mpicppbind{MPI::Comm::Sendrecv(const void~*sendbuf, int~sendcount, const MPI::Datatype\&~sendtype, int~dest, int~sendtag, void~*recvbuf, int~recvcount, const~MPI::Datatype\&~recvtype, int~source, int~recvtag) const}{void}
-\mpicppbind{MPI::Comm::Sendrecv\_replace(void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~sendtag, int~source, int~recvtag, MPI::Status\&~status) const}{void}
-\mpicppbind{MPI::Comm::Sendrecv\_replace(void*~buf, int~count, const MPI::Datatype\&~datatype, int~dest, int~sendtag, int~source, int~recvtag) const}{void}
-
-
-\subsubsection{Process Topologies}
-
-\mpicppbind{MPI::Intracomm::Create\_cart(int~ndims, const~int~dims[], const~bool~periods[], bool~reorder) const}{MPI::Cartcomm}
-\mpicppbind{MPI::Compute\_dims(int~nnodes, int~ndims, int~dims[])}{void}
-\mpicppbind{MPI::Intracomm::Create\_graph(int~nnodes, const~int~index[], const~int~edges[], bool~reorder) const}{MPI::Graphcomm}
-\mpicppbind{MPI::Intracomm::Dist\_graph\_create\_adjacent(int indegree, const~int~sources[], const~int~sourceweights[], int~outdegree, const~int~destinations[], const~int~destweights[], const~MPI::Info\&~info, bool~reorder) const}{MPI::Distgraphcomm}
-\mpicppbind{MPI::Intracomm::Dist\_graph\_create\_adjacent(int~indegree, const~int~sources[], int~outdegree, const~int~destinations[], const MPI::Info\&~info, bool~reorder) const}{MPI::Distgraphcomm}
-\mpicppbind{MPI::Intracomm::Dist\_graph\_create(int~n, const~int~sources[], const~int~degrees[], const~int destinations[], const~int~weights[], const~MPI::Info\&~info, bool~reorder) const}{MPI::Distgraphcomm}
-\mpicppbind{MPI::Intracomm::Dist\_graph\_create(int~n, const~int~sources[], const~int~degrees[], const~int~destinations[], const~MPI::Info\&~info, bool~reorder) const}{MPI::Distgraphcomm}
-\mpicppbind{MPI::Comm::Get\_topology() const}{int}
-\mpicppbind{MPI::Graphcomm::Get\_dims(int~nnodes[], int~nedges[]) const}{void}
-\mpicppbind{MPI::Graphcomm::Get\_topo(int~maxindex, int~maxedges, int~index[], int~edges[]) const}{void}
-\mpicppbind{MPI::Cartcomm::Get\_dim() const}{int}
-\mpicppbind{MPI::Cartcomm::Get\_topo(int~maxdims, int~dims[], bool~periods[], int~coords[]) const}{void}
-\mpicppbind{MPI::Cartcomm::Get\_cart\_rank(const~int~coords[]) const}{int}
-\mpicppbind{MPI::Cartcomm::Get\_coords(int~rank, int~maxdims, int~coords[]) const}{void}
-\mpicppbind{MPI::Graphcomm::Get\_neighbors\_count(int~rank) const}{int}
-\mpicppbind{MPI::Graphcomm::Get\_neighbors(int~rank, int~maxneighbors, int neighbors[]) const}{void}
-\mpicppbind{MPI::Distgraphcomm::Get\_dist\_neighbors\_count(int~rank, int~indegree[], int~outdegree[], bool\&~weighted) const}{void}
-\mpicppbind{MPI::Distgraphcomm::Get\_dist\_neighbors(int~maxindegree, int~sources[], int~sourceweights[], int~maxoutdegree, int~destinations[], int~destweights[])}{void}
-\mpicppbind{MPI::Cartcomm::Shift(int~direction, int~disp, int\&~rank\_source, int\&~rank\_dest) const}{void}
-\mpicppbind{MPI::Cartcomm::Sub(const~bool~remain\_dims[]) const}{MPI::Cartcomm}
-\mpicppbind{MPI::Cartcomm::Map(int~ndims, const~int~dims[], const~bool~periods[]) const}{int}
-\mpicppbind{MPI::Graphcomm::Map(int~nnodes, const~int~index[], const~int~edges[]) const}{int}
-
-\subsection{Removed C++ Constants}
-\label{subsec:rm-cpp-const}
-
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Return Codes} \\ 
-\hline
-{\small C++ type: \code{const int}} \\
-{\small (or unnamed \code{enum})} \\
-\hline
-
-\const{MPI::SUCCESS} \\
-\const{MPI::ERR\_BUFFER} \\
-\const{MPI::ERR\_COUNT} \\
-\const{MPI::ERR\_TYPE} \\
-\const{MPI::ERR\_TAG} \\
-\const{MPI::ERR\_COMM} \\
-\const{MPI::ERR\_RANK} \\
-\const{MPI::ERR\_REQUEST} \\
-\const{MPI::ERR\_ROOT} \\
-\const{MPI::ERR\_GROUP} \\
-\const{MPI::ERR\_OP} \\
-\const{MPI::ERR\_TOPOLOGY} \\
-\const{MPI::ERR\_DIMS} \\
-\const{MPI::ERR\_ARG} \\
-\const{MPI::ERR\_UNKNOWN} \\
-\const{MPI::ERR\_TRUNCATE} \\
-\const{MPI::ERR\_OTHER} \\
-\const{MPI::ERR\_INTERN} \\
-\const{MPI::ERR\_PENDING} \\
-\const{MPI::ERR\_IN\_STATUS} \\
-\error{MPI::ERR\_ACCESS} \\
-\error{MPI::ERR\_AMODE} \\
-\error{MPI::ERR\_ASSERT} \\
-\error{MPI::ERR\_BAD\_FILE} \\
-\error{MPI::ERR\_BASE} \\
-\error{MPI::ERR\_CONVERSION} \\
-\error{MPI::ERR\_DISP} \\
-\error{MPI::ERR\_DUP\_DATAREP} \\
-\error{MPI::ERR\_FILE\_EXISTS} \\
-\error{MPI::ERR\_FILE\_IN\_USE} \\
-\error{MPI::ERR\_FILE} \\
-\error{MPI::ERR\_INFO\_VALUE} \\
-\error{MPI::ERR\_INFO\_NOKEY} \\
-\error{MPI::ERR\_INFO\_KEY} \\
-\error{MPI::ERR\_INFO} \\
-\error{MPI::ERR\_IO} \\
-\error{MPI::ERR\_KEYVAL}\\
-\error{MPI::ERR\_LOCKTYPE} \\
-\error{MPI::ERR\_NAME} \\
-\hline
-\multicolumn{1}{r}{\bf  (Continued on next page) }
- 
-\end{tabular}
-\end{center}
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Return Codes (continued)} \\ 
-\hline
-\error{MPI::ERR\_NO\_MEM} \\
-\error{MPI::ERR\_NOT\_SAME} \\
-\error{MPI::ERR\_NO\_SPACE} \\
-\error{MPI::ERR\_NO\_SUCH\_FILE} \\
-\error{MPI::ERR\_PORT} \\
-\error{MPI::ERR\_QUOTA} \\
-\error{MPI::ERR\_READ\_ONLY} \\
-\error{MPI::ERR\_RMA\_CONFLICT} \\
-\error{MPI::ERR\_RMA\_SYNC} \\
-\error{MPI::ERR\_SERVICE} \\
-\error{MPI::ERR\_SIZE} \\
-\error{MPI::ERR\_SPAWN} \\
-\error{MPI::ERR\_UNSUPPORTED\_DATAREP} \\
-\error{MPI::ERR\_UNSUPPORTED\_OPERATION} \\
-\error{MPI::ERR\_WIN} \\
-\const{MPI::ERR\_LASTCODE} \\
-\hline
-\end{tabular}
-\end{center}
- 
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Buffer Address Constants} \\ 
-\hline
-{\small C++ type: } \\
-\ctype{void * const} \\
-\hline
-\const{MPI::BOTTOM}           \\
-\const{MPI::IN\_PLACE}     \\
-\hline
-\end{tabular}
-\end{center}
- 
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Assorted Constants} \\ 
-\hline
-% 
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::PROC\_NULL}    
-% 
-\\
-\const{MPI::ANY\_SOURCE} 
-% 
-\\
-\const{MPI::ANY\_TAG} \\
-\const{MPI::UNDEFINED} \\
-\const{MPI::BSEND\_OVERHEAD} \\
-\const{MPI::KEYVAL\_INVALID} \\
-% 
-\const{MPI::LOCK\_EXCLUSIVE} \\
-\const{MPI::LOCK\_SHARED} \\
-\const{MPI::ROOT} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Error-handling specifiers} \\
-\hline
-{\small C++ type: \code{MPI::Errhandler}} \\
-\hline
-\const{MPI::ERRORS\_ARE\_FATAL} \\
-\const{MPI::ERRORS\_RETURN} \\
-\const{MPI::ERRORS\_THROW\_EXCEPTIONS} \\ 
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Maximum Sizes for Strings} \\ 
-\hline
-%
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::MAX\_PROCESSOR\_NAME} 
-% 
-\\
-\const{MPI::MAX\_ERROR\_STRING}     
-% 
-\\
-% 
-\const{MPI::MAX\_DATAREP\_STRING} \\
-\const{MPI::MAX\_INFO\_KEY} \\
-\const{MPI::MAX\_INFO\_VAL} \\
-\const{MPI::MAX\_OBJECT\_NAME} \\
-\const{MPI::MAX\_PORT\_NAME} \\
-\hline
-\end{tabular}
-\end{center}
- 
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{l|l}
-\multicolumn{1}{c|}{\bf Named Predefined Datatypes} & \bf C++ types\\
-\hline
-{\small C++ type: \code{MPI::Datatype}} & \\
-\hline
-\const{MPI::CHAR} & \ctype{char} \\
-                 & {(treated as printable}\\
-                 & character)\\
-\const{MPI::SHORT} & \ctype{signed short int} \\
-\const{MPI::INT} & \ctype{signed int} \\
-\const{MPI::LONG} & \ctype{signed long} \\
-\const{MPI::LONG\_LONG\_INT} & \ctype{signed long long} \\
-\const{MPI::LONG\_LONG} & \ctype{long long} (synonym)\\
-\const{MPI::SIGNED\_CHAR} & \ctype{signed char} \\
-                           & {(treated as integral value)} \\
-\const{MPI::UNSIGNED\_CHAR} & \ctype{unsigned char} \\
-                           & {(treated as integral value)} \\
-\const{MPI::UNSIGNED\_SHORT} & \ctype{unsigned short} \\
-\const{MPI::UNSIGNED} & \ctype{unsigned int} \\
-\const{MPI::UNSIGNED\_LONG} & \ctype{unsigned long} \\
-\const{MPI::UNSIGNED\_LONG\_LONG} & \ctype{unsigned long long} \\
-\const{MPI::FLOAT} & \ctype{float} \\
-\const{MPI::DOUBLE} & \ctype{double} \\
-\const{MPI::LONG\_DOUBLE} & \ctype{long double} \\
-\const{MPI::WCHAR} & \ctype{wchar\_t} \\
-                  & (defined in {\tt <stddef.h>}) \\
-                  &  {(treated as printable} \\
-                  &  character)\\
-\const{MPI::BYTE} &  (any C/C++ type) \\ 
-\const{MPI::PACKED} &  (any C/C++ type) \\ 
-\hline
-\end{tabular}
-\end{center}
-
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{l|l}
-\bf C++-Only Named Predefined Datatypes & \bf C++ types\\
-\hline
-{\small C++ type: \code{MPI::Datatype}} & \\
-\hline
-\type{MPI::BOOL} & \ctype{bool} \\
-\type{MPI::COMPLEX} & \ctype{Complex<float>} \\
-\type{MPI::DOUBLE\_COMPLEX} & \ctype{Complex<double>} \\
-\type{MPI::LONG\_DOUBLE\_COMPLEX} & \ctype{Complex<long double>} \\
-\hline
-\end{tabular}
-\end{center}
- 
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{l|l}
-\multicolumn{1}{c|}{\bf Optional datatypes (Fortran)} & \bf Fortran types \\
-\hline
-{\small C++ type: \code{MPI::Datatype}} & \\
-\hline
-\const{MPI::F\_DOUBLE\_COMPLEX} & \ctype{DOUBLE COMPLEX} \\
-\const{MPI::INTEGER1} & \ctype{INTEGER*1} \\
-\const{MPI::INTEGER2} & \ctype{INTEGER*8} \\
-\const{MPI::INTEGER4} & \ctype{INTEGER*4} \\
-\const{MPI::INTEGER8} & \ctype{INTEGER*8} \\
-\const{MPI::REAL2} & \ctype{REAL*2} \\
-\const{MPI::REAL4} & \ctype{REAL*4} \\
-\const{MPI::REAL8} & \ctype{REAL*8} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Datatypes for reduction functions } \\
-\hline
-{\small C++ type: \code{MPI::Datatype}} \\
-\hline
-\const{MPI::FLOAT\_INT} \\
-\const{MPI::DOUBLE\_INT} \\
-\const{MPI::LONG\_INT} \\
-\const{MPI::TWOINT} \\ 
-\const{MPI::SHORT\_INT} \\
-\const{MPI::LONG\_DOUBLE\_INT} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Datatypes for reduction functions (Fortran)} \\
-\hline
-{\small C++ type: \code{MPI::Datatype}} \\
-\hline
-\const{MPI::TWOREAL} \\ 
-\const{MPI::TWODOUBLE\_PRECISION} \\ 
-\const{MPI::TWOINTEGER} \\ 
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{@{\hspace{4mm}}l@{\hspace{9mm}}l@{\hspace{1mm}}}
-\multicolumn{2}{c}{\bf Special datatypes for constructing derived datatypes} \\
-\hline
-{\small C++ type: \code{MPI::Datatype}} \\
-\hline
-\const{MPI::UB} \\
-\const{MPI::LB} \\
-\hline
-\end{tabular}
-\end{center}
- 
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Reserved communicators} \\
-\hline
-{\small C++ type: \code{MPI::Intracomm}}  \\
-\hline
-\const{MPI::COMM\_WORLD} \\
-\const{MPI::COMM\_SELF} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll} % MPI-2.1 - review item 33.i
-\multicolumn{2}{c}{\bf Results of communicator and group comparisons} \\
-\hline
-{\small C++ type: \code{const int}} \\
-{\small (or unnamed \code{enum})} \\
-\hline
-\const{MPI::IDENT} \\
-\const{MPI::CONGRUENT} \\
-\const{MPI::SIMILAR} \\
-\const{MPI::UNEQUAL} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Environmental inquiry keys} \\
-\hline
-{\small C++ type: \code{const int}} \\
-{\small (or unnamed \code{enum})} \\
-\hline
-\const{MPI::TAG\_UB} \\
-\const{MPI::IO} \\
-\const{MPI::HOST} \\
-\const{MPI::WTIME\_IS\_GLOBAL} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Collective Operations} \\ 
-\hline
-{\small C++ type: \code{const MPI::Op}} \\
-\hline
-\const{MPI::MAX} \\
-\const{MPI::MIN} \\
-\const{MPI::SUM} \\
-\const{MPI::PROD} \\
-\const{MPI::MAXLOC} \\
-\const{MPI::MINLOC} \\
-\const{MPI::BAND} \\
-\const{MPI::BOR} \\
-\const{MPI::BXOR} \\
-\const{MPI::LAND} \\
-\const{MPI::LOR} \\
-\const{MPI::LXOR} \\
-\const{MPI::REPLACE} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Null Handles} \\ 
-\hline
-{C++ name} & {\small C++ type} \\ 
-\hline
-\const{MPI::GROUP\_NULL}   & \ctype{\small \ctype{const MPI::Group}} \\
-\const{MPI::COMM\_NULL}    & {$^1$)} \\
-\const{MPI::DATATYPE\_NULL} & \ctype{\small \ctype{const MPI::Datatype}} \\
-\const{MPI::REQUEST\_NULL}  & \ctype{\small \ctype{const MPI::Request}} \\
-\const{MPI::OP\_NULL}       & \ctype{\small \ctype{const MPI::Op}} \\
-\const{MPI::ERRHANDLER\_NULL} & \ctype{\ctype{const MPI::Errhandler}} \\
-\const{MPI::FILE\_NULL}     &  \\
-\const{MPI::INFO\_NULL}     & {\small \ctype{const MPI::Info}} \\
-\const{MPI::WIN\_NULL}      &  \\
-\hline
-\multicolumn{1}{l}{{$^1$)        C++ type: See Section~\ref{c++comm-class} on page~\pageref{c++comm-class} regarding}} \\ 
-\multicolumn{2}{l}{{\hspace{1em} class hierarchy and the specific type of \const{MPI::COMM\_NULL}}} \\ 
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Empty group} \\
-\hline
-{\small C++ type: \code{const MPI::Group}} \\
-\hline
-\const{MPI::GROUP\_EMPTY} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Topologies} \\
-\hline
-{\small C++ type: \code{const int}} \\
-{\small (or unnamed \code{enum})} \\
-\hline
-\const{MPI::GRAPH} \\
-\const{MPI::CART} \\
-\const{MPI::DIST\_GRAPH} \\
-\hline
-\end{tabular}
-\end{center}
-
-% 
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Predefined Attribute Keys} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::APPNUM} \\
-\const{MPI::LASTUSEDCODE} \\
-\const{MPI::UNIVERSE\_SIZE} \\
-\const{MPI::WIN\_BASE} \\
-\const{MPI::WIN\_DISP\_UNIT} \\
-\const{MPI::WIN\_SIZE} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Mode Constants} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::MODE\_APPEND} \\
-\const{MPI::MODE\_CREATE} \\
-\const{MPI::MODE\_DELETE\_ON\_CLOSE} \\
-\const{MPI::MODE\_EXCL} \\
-\const{MPI::MODE\_NOCHECK} \\
-\const{MPI::MODE\_NOPRECEDE} \\
-\const{MPI::MODE\_NOPUT} \\
-\const{MPI::MODE\_NOSTORE} \\
-\const{MPI::MODE\_NOSUCCEED} \\
-\const{MPI::MODE\_RDONLY} \\
-\const{MPI::MODE\_RDWR} \\
-\const{MPI::MODE\_SEQUENTIAL} \\
-\const{MPI::MODE\_UNIQUE\_OPEN} \\
-\const{MPI::MODE\_WRONLY} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Datatype Decoding Constants} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::COMBINER\_CONTIGUOUS} \\
-\const{MPI::COMBINER\_DARRAY} \\
-\const{MPI::COMBINER\_DUP} \\
-\const{MPI::COMBINER\_F90\_COMPLEX} \\
-\const{MPI::COMBINER\_F90\_INTEGER} \\
-\const{MPI::COMBINER\_F90\_REAL} \\
-\const{MPI::COMBINER\_HINDEXED\_INTEGER} \\
-\const{MPI::COMBINER\_HINDEXED} \\
-\const{MPI::COMBINER\_HVECTOR\_INTEGER} \\
-\const{MPI::COMBINER\_HVECTOR} \\
-\const{MPI::COMBINER\_INDEXED\_BLOCK} \\
-\const{MPI::COMBINER\_INDEXED} \\
-\const{MPI::COMBINER\_NAMED} \\
-\const{MPI::COMBINER\_RESIZED} \\
-\const{MPI::COMBINER\_STRUCT\_INTEGER} \\
-\const{MPI::COMBINER\_STRUCT} \\
-\const{MPI::COMBINER\_SUBARRAY} \\
-\const{MPI::COMBINER\_VECTOR} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf Threads Constants} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::THREAD\_FUNNELED} \\
-\const{MPI::THREAD\_MULTIPLE} \\
-\const{MPI::THREAD\_SERIALIZED} \\
-\const{MPI::THREAD\_SINGLE} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf File Operation Constants, Part 1} \\ 
-\hline
-{\small C++ type:} \\
-{\small \code{const MPI::Offset} (or unnamed \code{enum})} \\
-\hline
-\const{MPI::DISPLACEMENT\_CURRENT} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf File Operation Constants, Part 2} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::DISTRIBUTE\_BLOCK} \\
-\const{MPI::DISTRIBUTE\_CYCLIC} \\
-\const{MPI::DISTRIBUTE\_DFLT\_DARG} \\
-\const{MPI::DISTRIBUTE\_NONE} \\
-\const{MPI::ORDER\_C} \\
-\const{MPI::ORDER\_FORTRAN} \\
-\const{MPI::SEEK\_CUR} \\
-\const{MPI::SEEK\_END} \\
-\const{MPI::SEEK\_SET} \\
-\hline
-\end{tabular}
-\end{center}
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{1}{c}{\bf F90 Datatype Matching Constants} \\ 
-\hline
-{\small C++ type:} \\
-{\small \ctype{const int} (or unnamed \ctype{enum})} \\
-\hline
-\const{MPI::TYPECLASS\_COMPLEX} \\
-\const{MPI::TYPECLASS\_INTEGER} \\
-\const{MPI::TYPECLASS\_REAL} \\
-\hline
-\end{tabular}
-\end{center}
- 
-
-\vskip 0.2truein
-\begin{center}
-\begin{tabular}{ll}
-\multicolumn{2}{c}{\bf Constants Specifying Empty or Ignored Input} \\ 
-\hline
-C++ name & {\small C++ type} \\ 
-\hline
-\const{MPI::ARGVS\_NULL} & {\small\ctype{const char ***}} \\
-\const{MPI::ARGV\_NULL} & {\small\ctype{const char **}} \\
-\hline
-\end{tabular}
-\end{center}
-
-
-\subsection{Removed C++ Types}
-\label{subsec:rm-cpp-types}
-
-The following are defined C++ type definitions, included in the file
-{\tt mpi.h}.
-\\[6pt]
-%%HEADER
-%%SKIP
-%%ENDHEADER
-%\begin{verbatim}
-%: Environment changed from verbatim to text lines with macros for correct indexing 
-\code{// C++ opaque types (all within the MPI namespace)} \\
-\const{MPI::Aint} \\
-\const{MPI::Offset} \\
-\const{MPI::Status} \\
-\code{ } \\
-\code{// C++ handles to assorted structures (classes,} \\
-\code{// all within the MPI namespace)} \\
-\const{MPI::Comm} \\
-\const{MPI::Intracomm} \\
-\const{MPI::Graphcomm} \\
-\const{MPI::Distgraphcomm} \\
-\const{MPI::Cartcomm} \\
-\const{MPI::Intercomm} \\
-\const{MPI::Datatype} \\
-\const{MPI::Errhandler} \\
-\const{MPI::Exception} \\
-\const{MPI::File} \\
-\const{MPI::Group} \\
-\const{MPI::Info} \\
-\const{MPI::Op} \\
-\const{MPI::Request} \\
-\const{MPI::Prequest} \\
-\const{MPI::Grequest} \\
-\const{MPI::Win} \\
-% \end{verbatim}
-
-
 \MPIupdateEnd{3.0}
Index: chap-one-side/one-side-2.tex
===================================================================
--- chap-one-side/one-side-2.tex	(revision 1036)
+++ chap-one-side/one-side-2.tex	(working copy)
@@ -96,8 +96,8 @@
 \funcarg{\OUT}{win}{window object returned by the call (handle)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Win}\cdeclmainindex{MPI::Win}%
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclmainindex{MPI\_Win}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Win\_create(void~*base, MPI\_Aint~size, int~disp\_unit, MPI\_Info info, MPI\_Comm~comm, MPI\_Win~*win)}
 
 \mpifbind{MPI\_WIN\_CREATE(BASE, SIZE, DISP\_UNIT, INFO, COMM, WIN, IERROR)\fargs  <type> BASE(*) \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) SIZE  \\INTEGER DISP\_UNIT, INFO, COMM, WIN, IERROR}
@@ -198,7 +198,7 @@
 \funcarg{\INOUT}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_free(MPI\_Win *win)}
 
 \mpifbind{MPI\_WIN\_FREE(WIN, IERROR)\fargs INTEGER WIN, IERROR}
@@ -269,8 +269,8 @@
 \funcarg{\OUT}{group}{group of processes which share access to the window (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Group}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_get\_group(MPI\_Win~win, MPI\_Group~*group)}
 \mpifbind{MPI\_WIN\_GET\_GROUP(WIN, GROUP, IERROR)\fargs INTEGER WIN, GROUP, IERROR}
 \mpicppemptybind{MPI::Win::Get\_group() const}{MPI::Group}
@@ -371,8 +371,8 @@
 \end{funcdef}
 
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Win}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Put(\MPIupdate{3.0}{140}{const }void *origin\_addr, int origin\_count, MPI\_Datatype origin\_datatype, int target\_rank, MPI\_Aint target\_disp, int target\_count, MPI\_Datatype target\_datatype, MPI\_Win win)}
 
 
@@ -478,8 +478,8 @@
 \funcarg{\IN}{win}{window object used for communication (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Win}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Get(void *origin\_addr, int origin\_count, MPI\_Datatype origin\_datatype, int target\_rank, MPI\_Aint target\_disp, int target\_count, MPI\_Datatype target\_datatype, MPI\_Win win)}
 
 \mpifbind{MPI\_GET(ORIGIN\_ADDR, ORIGIN\_COUNT, ORIGIN\_DATATYPE, TARGET\_RANK, TARGET\_DISP, TARGET\_COUNT, TARGET\_DATATYPE, WIN, IERROR)\fargs <type> ORIGIN\_ADDR(*) \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) TARGET\_DISP \\ INTEGER ORIGIN\_COUNT, ORIGIN\_DATATYPE, TARGET\_RANK, TARGET\_COUNT, TARGET\_DATATYPE, WIN, IERROR}
@@ -664,9 +664,9 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef2}
 
-\cdeclindex{MPI\_Op}\cdeclindex{MPI::Op}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Op}%
+\cdeclindex{MPI\_Win}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Accumulate(\MPIupdate{3.0}{140}{const }void~*origin\_addr, int~origin\_count, MPI\_Datatype~origin\_datatype, int~target\_rank, MPI\_Aint~target\_disp, int~target\_count, MPI\_Datatype~target\_datatype,  MPI\_Op~op, MPI\_Win~win)}
 
 \mpifbind{MPI\_ACCUMULATE(ORIGIN\_ADDR, ORIGIN\_COUNT, ORIGIN\_DATATYPE, TARGET\_RANK, TARGET\_DISP, TARGET\_COUNT, TARGET\_DATATYPE,  OP, WIN, IERROR) \fargs <type> ORIGIN\_ADDR(*) \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) TARGET\_DISP \\ INTEGER ORIGIN\_COUNT, ORIGIN\_DATATYPE,TARGET\_RANK, TARGET\_COUNT, TARGET\_DATATYPE,  OP, WIN, IERROR}
@@ -970,7 +970,7 @@
 
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_fence(int~assert, MPI\_Win~win)}
 
 \mpifbind{MPI\_WIN\_FENCE(ASSERT, WIN, IERROR)\fargs INTEGER ASSERT, WIN, IERROR}
@@ -1030,8 +1030,8 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Group}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_start(MPI\_Group group, int assert, MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_START(GROUP, ASSERT, WIN, IERROR)\fargs INTEGER GROUP, ASSERT, WIN, IERROR}
@@ -1060,7 +1060,7 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_complete(MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_COMPLETE(WIN, IERROR)\fargs INTEGER WIN,  IERROR}
@@ -1123,8 +1123,8 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Group}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_post(MPI\_Group group, int assert, MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_POST(GROUP, ASSERT, WIN, IERROR)\fargs INTEGER GROUP, ASSERT, WIN, IERROR}
@@ -1144,7 +1144,7 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_wait(MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_WAIT(WIN, IERROR)\fargs INTEGER WIN,  IERROR}
@@ -1189,7 +1189,7 @@
 \funcarg{\OUT}{flag}{success flag (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_test(MPI\_Win win, int *flag)}
 
 \mpifbind{MPI\_WIN\_TEST(WIN, FLAG, IERROR)\fargs INTEGER WIN, IERROR\\LOGICAL FLAG}
@@ -1290,7 +1290,7 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_lock(int lock\_type, int rank, int assert, MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_LOCK(LOCK\_TYPE, RANK, ASSERT, WIN, IERROR)\fargs INTEGER LOCK\_TYPE, RANK, ASSERT, WIN, IERROR}
@@ -1305,7 +1305,7 @@
 \funcarg{\IN}{win}{window object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_unlock(int rank, MPI\_Win win)}
 
 \mpifbind{MPI\_WIN\_UNLOCK(RANK, WIN, IERROR)\fargs INTEGER RANK, WIN, IERROR}
Index: chap-frontm/abstract-cpy.tex
===================================================================
--- chap-frontm/abstract-cpy.tex	(revision 1036)
+++ chap-frontm/abstract-cpy.tex	(working copy)
@@ -17,7 +17,7 @@
    process creation and management, one-sided communications,
    extended collective operations, external interfaces, I/O,
    some miscellaneous topics, and a profiling interface. 
-   Language bindings for C, C++ and Fortran are defined.
+   Language bindings for C \MPIdelete{3.0}{281}{, C++} and Fortran are defined.
 
 %%% MPIupdate - need to update this for MPI 2.2 
 \MPIdelete{3.0}{0}{Technically, this version of the standard is based on
Index: chap-io/io-2.tex
===================================================================
--- chap-io/io-2.tex	(revision 1036)
+++ chap-io/io-2.tex	(working copy)
@@ -200,8 +200,8 @@
 \funcarg{\OUT}{fh}{new file handle (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
-\cdeclmainindex{MPI\_File}\cdeclmainindex{MPI::File}%
+\cdeclindex{MPI\_Info}%
+\cdeclmainindex{MPI\_File}%
 \mpibind{MPI\_File\_open(MPI\_Comm~comm, char~*filename, int~amode, MPI\_Info~info, MPI\_File~*fh)}
 \mpifbind{MPI\_FILE\_OPEN(COMM, FILENAME, AMODE, INFO, FH, IERROR)\fargs CHARACTER*(*) FILENAME \\ INTEGER COMM, AMODE, INFO, FH, IERROR}
 \mpicppemptybind{MPI::File::Open(const~MPI::Intracomm\&~comm, const~char*~filename, int~amode, const~MPI::Info\&~info)}{static MPI::File}
@@ -386,7 +386,7 @@
 \funcarg{\INOUT}{fh}{file handle (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_close(MPI\_File~*fh)}
 \mpifbind{MPI\_FILE\_CLOSE(FH, IERROR)\fargs INTEGER FH, IERROR}
 \mpicppemptybind{MPI::File::Close()}{void}
@@ -425,7 +425,7 @@
 \funcarg{\IN}{info}{info object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_File\_delete(char~*filename, MPI\_Info~info)}
 \mpifbind{MPI\_FILE\_DELETE(FILENAME, INFO, IERROR)\fargs CHARACTER*(*) FILENAME \\ INTEGER INFO, IERROR}
 \mpicppemptybind{MPI::File::Delete(const~char*~filename, const~MPI::Info\&~info)}{static void}
@@ -464,8 +464,8 @@
 \funcarg{\IN}{size}{size to truncate or expand file (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_set\_size(MPI\_File~fh, MPI\_Offset~size)}
 \mpifbind{MPI\_FILE\_SET\_SIZE(FH, SIZE, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) SIZE}
 \mpicppemptybind{MPI::File::Set\_size(MPI::Offset~size)}{void}
@@ -525,8 +525,8 @@
 \funcarg{\IN}{size}{size to preallocate file (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_preallocate(MPI\_File~fh, MPI\_Offset~size)}
 \mpifbind{MPI\_FILE\_PREALLOCATE(FH, SIZE, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) SIZE}
 \mpicppemptybind{MPI::File::Preallocate(MPI::Offset~size)}{void}
@@ -571,8 +571,8 @@
 \funcarg{\OUT}{size}{size of the file in bytes (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_get\_size(MPI\_File~fh, MPI\_Offset~*size)}
 \mpifbind{MPI\_FILE\_GET\_SIZE(FH, SIZE, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) SIZE}
 \mpicppemptybind{MPI::File::Get\_size() const}{MPI::Offset}
@@ -593,8 +593,8 @@
 \funcarg{\OUT}{group}{group which opened the file (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Group}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_get\_group(MPI\_File~fh, MPI\_Group~*group)}
 \mpifbind{MPI\_FILE\_GET\_GROUP(FH, GROUP, IERROR)\fargs INTEGER FH, GROUP, IERROR}
 \mpicppemptybind{MPI::File::Get\_group() const}{MPI::Group}
@@ -614,7 +614,7 @@
 \funcarg{\OUT}{amode}{file access mode used to open the file (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_get\_amode(MPI\_File~fh, int~*amode)}
 \mpifbind{MPI\_FILE\_GET\_AMODE(FH, AMODE, IERROR)\fargs INTEGER FH, AMODE, IERROR}
 \mpicppemptybind{MPI::File::Get\_amode() const}{int}
@@ -723,8 +723,8 @@
 \funcarg{\IN}{info}{info object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Info}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_set\_info(MPI\_File~fh, MPI\_Info~info)}
 \mpifbind{MPI\_FILE\_SET\_INFO(FH, INFO, IERROR)\fargs INTEGER FH, INFO, IERROR}
 \mpicppemptybind{MPI::File::Set\_info(const~MPI::Info\&~info)}{void}
@@ -755,8 +755,8 @@
 \funcarg{\OUT}{info\_used}{new info object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Info}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_get\_info(MPI\_File~fh, MPI\_Info~*info\_used)}
 \mpifbind{MPI\_FILE\_GET\_INFO(FH, INFO\_USED, IERROR)\fargs INTEGER FH, INFO\_USED, IERROR}
 \mpicppemptybind{MPI::File::Get\_info() const}{MPI::Info}
@@ -1001,9 +1001,9 @@
 \funcarg{\IN}{info}{info object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_Info}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_set\_view(MPI\_File~fh, MPI\_Offset~disp, MPI\_Datatype~etype, MPI\_Datatype~filetype, char~*datarep, MPI\_Info~info)}
 \mpifbind{MPI\_FILE\_SET\_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, INFO, IERROR)\fargs INTEGER FH, ETYPE, FILETYPE, INFO, IERROR \\ CHARACTER*(*) DATAREP \\ INTEGER(KIND=MPI\_OFFSET\_KIND) DISP}
 \mpicppemptybind{MPI::File::Set\_view(MPI::Offset~disp, const~MPI::Datatype\&~etype, const~MPI::Datatype\&~filetype, const~char*~datarep, const~MPI::Info\&~info)}{void}
@@ -1153,8 +1153,8 @@
 \funcarg{\OUT}{datarep}{data representation (string)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_get\_view(MPI\_File~fh, MPI\_Offset~*disp, MPI\_Datatype~*etype, MPI\_Datatype~*filetype, char~*datarep)}
 % \mpifbind{MPI\_FILE\_GET\_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, IERROR)\fargs INTEGER FH, ETYPE, FILETYPE, IERROR \\ CHARACTER*(*) DATAREP, INTEGER(KIND=MPI\_OFFSET\_KIND) DISP}
 \mpifbind{MPI\_FILE\_GET\_VIEW(FH, DISP, ETYPE, FILETYPE, DATAREP, IERROR)\fargs INTEGER FH, ETYPE, FILETYPE, IERROR \\ CHARACTER*(*) DATAREP \\ INTEGER(KIND=MPI\_OFFSET\_KIND) DISP}
@@ -1494,9 +1494,9 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_read\_at(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Read\_at(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1516,9 +1516,9 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_read\_at\_all(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}           
 \mpifbind{MPI\_FILE\_READ\_AT\_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Read\_at\_all(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1537,9 +1537,9 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_write\_at(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_AT(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Write\_at(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1559,9 +1559,9 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_write\_at\_all(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}          
 \mpifbind{MPI\_FILE\_WRITE\_AT\_ALL(FH, OFFSET, BUF, COUNT, DATATYPE, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}    
 \mpicppemptybind{MPI::File::Write\_at\_all(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1581,9 +1581,9 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_iread\_at(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IREAD\_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Iread\_at(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -1602,9 +1602,9 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_iwrite\_at(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IWRITE\_AT(FH, OFFSET, BUF, COUNT, DATATYPE, REQUEST, IERROR)\fargs <type>  BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Iwrite\_at(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -1661,8 +1661,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\& status)}{void}
@@ -1724,8 +1724,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_all(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_ALL(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read\_all(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1743,8 +1743,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1761,8 +1761,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_all(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_ALL(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_all(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1780,8 +1780,8 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
  
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_iread(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IREAD(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR}
 \mpicppemptybind{MPI::File::Iread(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -1839,8 +1839,8 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
  
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_iwrite(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IWRITE(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR}
 \mpicppemptybind{MPI::File::Iwrite(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -1854,8 +1854,8 @@
 \funcarg{\IN}{whence}{update mode (state)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_seek(MPI\_File~fh, MPI\_Offset~offset, int~whence)}
 \mpifbind{MPI\_FILE\_SEEK(FH, OFFSET, WHENCE, IERROR)\fargs INTEGER FH, WHENCE, IERROR\\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Seek(MPI::Offset~offset, int~whence)}{void}
@@ -1886,8 +1886,8 @@
 \funcarg{\OUT}{offset}{offset of individual pointer (integer)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_get\_position(MPI\_File~fh, MPI\_Offset~*offset)}
 \mpifbind{MPI\_FILE\_GET\_POSITION(FH, OFFSET, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Get\_position() const}{MPI::Offset}
@@ -1913,8 +1913,8 @@
 \funcarg{\OUT}{disp}{absolute byte position of offset (integer)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_get\_byte\_offset(MPI\_File~fh, MPI\_Offset~offset, MPI\_Offset~*disp)}
 \mpifbind{MPI\_FILE\_GET\_BYTE\_OFFSET(FH, OFFSET, DISP, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET, DISP}
 \mpicppemptybind{MPI::File::Get\_byte\_offset(const~MPI::Offset~disp) const}{MPI::Offset}
@@ -1978,8 +1978,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_shared(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_SHARED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR }
 \mpicppemptybind{MPI::File::Read\_shared(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -1997,8 +1997,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_shared(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_SHARED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_shared(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -2016,8 +2016,8 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_iread\_shared(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IREAD\_SHARED(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR}
 \mpicppemptybind{MPI::File::Iread\_shared(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -2034,8 +2034,8 @@
 \funcarg{\OUT}{request}{request object (handle)}
 \end{funcdef}
  
-\cdeclindex{MPI\_Request}\cdeclindex{MPI::Request}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Request}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_iwrite\_shared(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Request~*request)}
 \mpifbind{MPI\_FILE\_IWRITE\_SHARED(FH, BUF, COUNT, DATATYPE, REQUEST, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, REQUEST, IERROR}
 \mpicppemptybind{MPI::File::Iwrite\_shared(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{MPI::Request}
@@ -2097,8 +2097,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_ordered(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_ORDERED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read\_ordered(void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -2116,8 +2116,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_ordered(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_ORDERED(FH, BUF, COUNT, DATATYPE, STATUS, IERROR) \fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_ordered(const~void*~buf, int~count, const~MPI::Datatype\&~datatype, MPI::Status\&~status)}{void}
@@ -2143,8 +2143,8 @@
 \funcarg{\IN}{whence}{update mode (state)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_seek\_shared(MPI\_File~fh, MPI\_Offset~offset, int~whence)}
 \mpifbind{MPI\_FILE\_SEEK\_SHARED(FH, OFFSET, WHENCE, IERROR)\fargs INTEGER FH, WHENCE, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Seek\_shared(MPI::Offset~offset, int~whence)}{void}
@@ -2185,8 +2185,8 @@
 \funcarg{\OUT}{offset}{offset of shared pointer (integer)}
 \end{funcdef}
  
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_get\_position\_shared(MPI\_File~fh, MPI\_Offset~*offset)}
 \mpifbind{MPI\_FILE\_GET\_POSITION\_SHARED(FH, OFFSET, IERROR)\fargs INTEGER FH, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Get\_position\_shared() const}{MPI::Offset}
@@ -2328,8 +2328,8 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_read\_at\_all\_begin(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_READ\_AT\_ALL\_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Read\_at\_all\_begin(MPI::Offset~offset, void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2340,8 +2340,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_at\_all\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_AT\_ALL\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read\_at\_all\_end(void*~buf, MPI::Status\&~status)}{void}
@@ -2355,8 +2355,8 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Offset}%
 \mpibind{MPI\_File\_write\_at\_all\_begin(MPI\_File~fh, MPI\_Offset~offset, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_WRITE\_AT\_ALL\_BEGIN(FH, OFFSET, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) OFFSET}
 \mpicppemptybind{MPI::File::Write\_at\_all\_begin(MPI::Offset~offset, const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2367,8 +2367,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_at\_all\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_AT\_ALL\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_at\_all\_end(const~void*~buf, MPI::Status\&~status)}{void}
@@ -2383,7 +2383,7 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_read\_all\_begin(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_READ\_ALL\_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR}
 \mpicppemptybind{MPI::File::Read\_all\_begin(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2394,8 +2394,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_all\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_ALL\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read\_all\_end(void*~buf, MPI::Status\&~status)}{void}
@@ -2408,7 +2408,7 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_write\_all\_begin(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_WRITE\_ALL\_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR}
 \mpicppemptybind{MPI::File::Write\_all\_begin(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2419,8 +2419,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_all\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_ALL\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_all\_end(const~void*~buf, MPI::Status\&~status)}{void}
@@ -2435,7 +2435,7 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_read\_ordered\_begin(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_READ\_ORDERED\_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR}
 \mpicppemptybind{MPI::File::Read\_ordered\_begin(void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2446,8 +2446,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_read\_ordered\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_READ\_ORDERED\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Read\_ordered\_end(void*~buf, MPI::Status\&~status)}{void}
@@ -2460,7 +2460,7 @@
 \funcarg{\IN}{datatype}{datatype of each buffer element (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_write\_ordered\_begin(MPI\_File~fh, void~*buf, int~count, MPI\_Datatype~datatype)}
 \mpifbind{MPI\_FILE\_WRITE\_ORDERED\_BEGIN(FH, BUF, COUNT, DATATYPE, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, COUNT, DATATYPE, IERROR}
 \mpicppemptybind{MPI::File::Write\_ordered\_begin(const~void*~buf, int~count, const~MPI::Datatype\&~datatype)}{void}
@@ -2471,8 +2471,8 @@
 \funcarg{\OUT}{status}{status object (Status)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_File\_write\_ordered\_end(MPI\_File~fh, void~*buf, MPI\_Status~*status)}
 \mpifbind{MPI\_FILE\_WRITE\_ORDERED\_END(FH, BUF, STATUS, IERROR)\fargs <type> BUF(*) \\ INTEGER FH, STATUS(MPI\_STATUS\_SIZE), IERROR}
 \mpicppemptybind{MPI::File::Write\_ordered\_end(const~void*~buf, MPI::Status\&~status)}{void}
@@ -2766,8 +2766,8 @@
 \funcarg{\OUT}{extent}{datatype extent (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_File}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_File\_get\_type\_extent(MPI\_File~fh, MPI\_Datatype~datatype, MPI\_Aint~*extent)}
 \mpifbind{MPI\_FILE\_GET\_TYPE\_EXTENT(FH, DATATYPE, EXTENT, IERROR)\fargs INTEGER FH, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) EXTENT}
 \mpicppemptybind{MPI::File::Get\_type\_extent(const~MPI::Datatype\&~datatype) const}{MPI::Aint}
@@ -2995,7 +2995,7 @@
 
 \subsubsection{Extent Callback}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpitypedefbind{MPI\_Datarep\_extent\_function(MPI\_Datatype~datatype, MPI\_Aint~*file\_extent, void~*extra\_state)}
 \mpifsubbind{DATAREP\_EXTENT\_FUNCTION(DATATYPE, EXTENT, EXTRA\_STATE, IERROR)\fargs INTEGER DATATYPE, IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) EXTENT, EXTRA\_STATE}
 % \mpicpptypedefbind{MPI::Datarep\_extent\_function(const~MPI::Datatype\&~datatype, MPI::Aint\&~file\_extent, void*~extra\_state)}
@@ -3013,7 +3013,7 @@
 %-- new subsection name - ies
 \subsubsection{Datarep Conversion Functions}
 
-\cdeclindex{MPI\_Offset}\cdeclindex{MPI::Offset}%
+\cdeclindex{MPI\_Offset}%
 \mpitypedefbind{MPI\_Datarep\_conversion\_function(void~*userbuf, MPI\_Datatype~datatype, int~count, void~*filebuf, MPI\_Offset~position, void~*extra\_state)}
 \mpifsubbind{DATAREP\_CONVERSION\_FUNCTION(USERBUF, DATATYPE, COUNT, FILEBUF, POSITION, EXTRA\_STATE, IERROR)\fargs <TYPE> USERBUF(*), FILEBUF(*) \\ INTEGER COUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_OFFSET\_KIND) POSITION \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) EXTRA\_STATE}
 % \mpicpptypedefbind{MPI::Datarep\_conversion\_function(void*~userbuf, MPI::Datatype\&~datatype, int~count, void*~filebuf, MPI::Offset~position, void*~extra\_state)}
@@ -3415,7 +3415,7 @@
 \funcarg{\IN}{flag}{\constskip{true} to set atomic mode, \constskip{false} to set nonatomic mode (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_set\_atomicity(MPI\_File~fh, int~flag)}
 \mpifbind{MPI\_FILE\_SET\_ATOMICITY(FH, FLAG, IERROR)\fargs INTEGER FH, IERROR\\LOGICAL FLAG}
 \mpicppemptybind{MPI::File::Set\_atomicity(bool~flag)}{void}
@@ -3454,7 +3454,7 @@
 \funcarg{\OUT}{flag}{\constskip{true} if atomic mode, \constskip{false} if nonatomic mode (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_get\_atomicity(MPI\_File~fh, int~*flag)}
 \mpifbind{MPI\_FILE\_GET\_ATOMICITY(FH, FLAG, IERROR)\fargs INTEGER FH, IERROR\\LOGICAL FLAG}
 \mpicppemptybind{MPI::File::Get\_atomicity() const}{bool}
@@ -3470,7 +3470,7 @@
 \funcarg{\INOUT}{fh}{file handle (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_sync(MPI\_File~fh)}
 \mpifbind{MPI\_FILE\_SYNC(FH, IERROR)\fargs INTEGER FH, IERROR}
 % JMS-apr
@@ -3637,7 +3637,7 @@
 \func{MPI\_FILE\_READ} or \func{MPI\_FILE\_WRITE}.
 
 \subsection{\texorpdfstring{\type{MPI\_Offset}}{MPI\_Offset} Type}
-\cdeclmainindex{MPI\_Offset}\cdeclmainindex{MPI::Offset}%
+\cdeclmainindex{MPI\_Offset}%
 %-----------------------------------
 \type{MPI\_Offset} is an integer type of size sufficient to represent
 the size (in bytes) of the largest file supported by \MPI/.
Index: chap-context/context.tex
===================================================================
--- chap-context/context.tex	(revision 1036)
+++ chap-context/context.tex	(working copy)
@@ -341,7 +341,7 @@
 \funcarg{\OUT}{size}{ number of processes in the group (integer) }
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Group}\cdeclmainindex{MPI::Group}%
+\cdeclmainindex{MPI\_Group}%
 \mpibind{MPI\_Group\_size(MPI\_Group~group, int~*size)}
 
 \mpifbind{MPI\_GROUP\_SIZE(GROUP, SIZE, IERROR)\fargs INTEGER GROUP, SIZE, IERROR}
@@ -354,7 +354,7 @@
 member (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_rank(MPI\_Group~group, int~*rank)}
 
 \mpifbind{MPI\_GROUP\_RANK(GROUP, RANK, IERROR)\fargs INTEGER GROUP, RANK, IERROR}
@@ -373,7 +373,7 @@
 \end{funcdef}
 
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_translate\_ranks (MPI\_Group~group1, int~n, \MPIupdate{3.0}{140}{const }int~*ranks1, MPI\_Group~group2, int~*ranks2)}
 
 \mpifbind{MPI\_GROUP\_TRANSLATE\_RANKS(GROUP1, N, RANKS1, GROUP2, RANKS2, IERROR)\fargs INTEGER GROUP1, N, RANKS1(*), GROUP2, RANKS2(*), IERROR}
@@ -396,7 +396,7 @@
 \funcarg{\OUT}{result}{ result (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_compare(MPI\_Group~group1,MPI\_Group~group2,~int~*result)}
 
 \mpifbind{MPI\_GROUP\_COMPARE(GROUP1, GROUP2, RESULT, IERROR)\fargs INTEGER GROUP1, GROUP2, RESULT, IERROR}
@@ -443,8 +443,8 @@
 \funcarg{\OUT}{group}{ group corresponding to \mpiarg{comm} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Comm}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Comm\_group(MPI\_Comm~comm, MPI\_Group~*group)}
 
 \mpifbind{MPI\_COMM\_GROUP(COMM, GROUP, IERROR)\fargs INTEGER COMM, GROUP, IERROR}
@@ -460,7 +460,7 @@
 \funcarg{\OUT}{newgroup}{ union group (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_union(MPI\_Group~group1, MPI\_Group~group2, MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_UNION(GROUP1, GROUP2, NEWGROUP, IERROR)\fargs INTEGER GROUP1, GROUP2, NEWGROUP, IERROR}
@@ -472,7 +472,7 @@
 \funcarg{\OUT}{newgroup}{ intersection group (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_intersection(MPI\_Group~group1, MPI\_Group~group2, MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_INTERSECTION(GROUP1, GROUP2, NEWGROUP, IERROR)\fargs INTEGER GROUP1, GROUP2, NEWGROUP, IERROR}
@@ -484,7 +484,7 @@
 \funcarg{\OUT}{newgroup}{ difference group (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_difference(MPI\_Group~group1, MPI\_Group~group2, MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_DIFFERENCE(GROUP1, GROUP2, NEWGROUP, IERROR)\fargs INTEGER GROUP1, GROUP2, NEWGROUP, IERROR}
@@ -514,7 +514,7 @@
 \funcarg{\OUT}{newgroup}{ new group derived from above, in the order defined by \mpiarg{ ranks} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_incl(MPI\_Group~group, int~n, \MPIupdate{3.0}{140}{const }int~*ranks, MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_INCL(GROUP, N, RANKS, NEWGROUP, IERROR)\fargs INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR}
@@ -539,7 +539,7 @@
 \funcarg{\OUT}{newgroup}{ new group derived from above, preserving the order defined by \mpiarg{ group} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_excl(MPI\_Group~group, int~n, \MPIupdate{3.0}{140}{const }int~*ranks, MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_EXCL(GROUP, N, RANKS, NEWGROUP, IERROR)\fargs INTEGER GROUP, N, RANKS(*), NEWGROUP, IERROR}
@@ -566,7 +566,7 @@
 order defined by \mpiarg{ranges} (handle) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_range\_incl(MPI\_Group~group, int~n, int~ranges[][3], MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_RANGE\_INCL(GROUP, N, RANGES, NEWGROUP, IERROR)\fargs INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR}
@@ -613,7 +613,7 @@
 order in \mpiarg{group} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_range\_excl(MPI\_Group~group, int~n, int~ranges[][3], MPI\_Group~*newgroup)}
 
 \mpifbind{MPI\_GROUP\_RANGE\_EXCL(GROUP, N, RANGES, NEWGROUP, IERROR)\fargs INTEGER GROUP, N, RANGES(3,*), NEWGROUP, IERROR}
@@ -651,7 +651,7 @@
 \funcarg{\INOUT}{group}{  group (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Group\_free(MPI\_Group~*group)}
 
 \mpifbind{MPI\_GROUP\_FREE(GROUP, IERROR)\fargs INTEGER GROUP, IERROR}
@@ -697,7 +697,7 @@
 comm} (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_size(MPI\_Comm~comm, int~*size)}
 
 \mpifbind{MPI\_COMM\_SIZE(COMM, SIZE, IERROR)\fargs INTEGER COMM, SIZE, IERROR}
@@ -729,7 +729,7 @@
 \mpiarg{ comm} (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_rank(MPI\_Comm~comm, int~*rank)}
 
 \mpifbind{MPI\_COMM\_RANK(COMM, RANK, IERROR)\fargs INTEGER COMM, RANK, IERROR}
@@ -763,7 +763,7 @@
 \funcarg{\OUT}{result}{ result (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_compare(MPI\_Comm~comm1,MPI\_Comm~comm2,~int~*result)}
 
 \mpifbind{MPI\_COMM\_COMPARE(COMM1, COMM2, RESULT, IERROR)\fargs INTEGER COMM1, COMM2, RESULT, IERROR}
@@ -817,7 +817,7 @@
 \funcarg{\OUT}{newcomm}{ copy of \mpiarg{comm} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_dup(MPI\_Comm~comm, MPI\_Comm~*newcomm)}
 
 \mpifbind{MPI\_COMM\_DUP(COMM, NEWCOMM, IERROR)\fargs INTEGER COMM, NEWCOMM, IERROR}
@@ -842,8 +842,10 @@
 % communicator with the same group, any copied cached information,
 communicator with the same group or groups, any copied cached information,
 but a new context (see Section~\ref{subsec:context-cachefunc}).
+\MPIdeleteBegin{3.0}{281}
 Please see Section~\ref{c++comm-class} on page~\pageref{c++comm-class} for further discussion 
 about the C++ bindings for \cfunc{Dup()} and \cfunc{Clone()}. 
+\MPIdeleteEnd{3.0}
 
 \begin{users}
 This operation is used to provide a parallel library call with a duplicate
@@ -872,8 +874,8 @@
 \funcarg{\OUT}{newcomm}{ new communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Comm}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Comm\_create(MPI\_Comm~comm, MPI\_Group~group, MPI\_Comm~*newcomm)}
 
 \mpifbind{MPI\_COMM\_CREATE(COMM, GROUP, NEWCOMM, IERROR)\fargs INTEGER COMM, GROUP, NEWCOMM, IERROR}
@@ -1023,7 +1025,7 @@
 \funcarg{\OUT}{newcomm}{ new communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_split(MPI\_Comm~comm, int~color, int~key, MPI\_Comm~*newcomm)}
 
 \mpifbind{MPI\_COMM\_SPLIT(COMM, COLOR, KEY, NEWCOMM, IERROR)\fargs INTEGER COMM, COLOR, KEY, NEWCOMM, IERROR}
@@ -1183,7 +1185,7 @@
 \funcarg{\INOUT}{comm}{ communicator to be destroyed (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_free(MPI\_Comm~*comm)}
 
 \mpifbind{MPI\_COMM\_FREE(COMM, IERROR)\fargs INTEGER COMM, IERROR}
@@ -1799,7 +1801,7 @@
 \funcarg{\OUT}{flag}{  (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_test\_inter(MPI\_Comm~comm, int~*flag)}
 
 \mpifbind{MPI\_COMM\_TEST\_INTER(COMM, FLAG, IERROR)\fargs INTEGER COMM, IERROR\\ LOGICAL FLAG}
@@ -1851,7 +1853,7 @@
 comm} (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_remote\_size(MPI\_Comm~comm, int~*size)}
 
 \mpifbind{MPI\_COMM\_REMOTE\_SIZE(COMM, SIZE, IERROR)\fargs INTEGER COMM, SIZE, IERROR}
@@ -1863,8 +1865,8 @@
 \funcarg{\OUT}{group}{ remote group corresponding to \mpiarg{comm} (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
-\cdeclindex{MPI\_Group}\cdeclindex{MPI::Group}%
+\cdeclindex{MPI\_Comm}%
+\cdeclindex{MPI\_Group}%
 \mpibind{MPI\_Comm\_remote\_group(MPI\_Comm~comm, MPI\_Group~*group)}
 
 \mpifbind{MPI\_COMM\_REMOTE\_GROUP(COMM, GROUP, IERROR)\fargs INTEGER COMM, GROUP, IERROR}
@@ -1945,7 +1947,7 @@
 \end{funcdef2}
 
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Intercomm\_create(MPI\_Comm~local\_comm, int~local\_leader, MPI\_Comm~peer\_comm, int~remote\_leader, int~tag, MPI\_Comm~*newintercomm)}
 
 \mpifbind{MPI\_INTERCOMM\_CREATE(LOCAL\_COMM, LOCAL\_LEADER, PEER\_COMM, REMOTE\_LEADER, TAG, NEWINTERCOMM, IERROR)\fargs INTEGER LOCAL\_COMM, LOCAL\_LEADER, PEER\_COMM, REMOTE\_LEADER, TAG, NEWINTERCOMM, IERROR}
@@ -1976,7 +1978,7 @@
 \funcarg{\OUT}{newintracomm}{  new intra-communicator (handle) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Intercomm\_merge(MPI\_Comm~intercomm, int~high, MPI\_Comm~*newintracomm)}
 
 \mpifbind{MPI\_INTERCOMM\_MERGE(INTERCOMM, HIGH, INTRACOMM, IERROR)\fargs INTEGER INTERCOMM, INTRACOMM, IERROR \\ LOGICAL HIGH}
@@ -2377,7 +2379,7 @@
 
 The C callback functions are:
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpitypedefbind{MPI\_Comm\_copy\_attr\_function(MPI\_Comm~oldcomm, int~comm\_keyval, void~*extra\_state, void~*attribute\_val\_in, void~*attribute\_val\_out, int~*flag)}
 
 and
@@ -2397,6 +2399,7 @@
 \mpifsubbind{COMM\_DELETE\_ATTR\_FN(COMM, COMM\_KEYVAL, ATTRIBUTE\_VAL, EXTRA\_STATE, IERROR)\fargs INTEGER COMM, COMM\_KEYVAL, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ATTRIBUTE\_VAL, EXTRA\_STATE}
 
 
+\MPIdeleteBegin{3.0}{281}
 The C++ callbacks are:
 
 \mpicpptypedefemptybind{MPI::Comm::Copy\_attr\_function(const~MPI::Comm\&~oldcomm, int~comm\_keyval, void*~extra\_state, void*~attribute\_val\_in, void*~attribute\_val\_out, bool\&~flag)}{int}
@@ -2404,6 +2407,7 @@
 and
 
 \mpicpptypedefemptybind{MPI::Comm::Delete\_attr\_function(MPI::Comm\&~comm, int~comm\_keyval, void*~attribute\_val, void*~extra\_state)}{int}
+\MPIdeleteEnd{3.0}
 
 The \func{comm\_copy\_attr\_fn} function is invoked when a communicator is
 duplicated by \mpifunc{MPI\_COMM\_DUP}.  \func{comm\_copy\_attr\_fn} should be
@@ -2526,12 +2530,13 @@
 by \mpifunc{MPI\_KEYVAL\_CREATE}.  Therefore, it can be used for
 static initialization of key values.
 
+\MPIdeleteBegin{3.0}{281}
 \begin{implementors}
 To be able to use the predefined C functions 
 \mpifunc{MPI\_COMM\_NULL\_COPY\_FN} or \mpifunc{MPI\_COMM\_DUP\_FN} as 
 \mpiarg{comm\_copy\_attr\_fn} argument and/or 
 \mpifunc{MPI\_COMM\_NULL\_DELETE\_FN} as the \mpiarg{comm\_delete\_attr\_fn} argument in a call to the 
-C++ routine \mpifuncindex{MPI\_COMM\_CREATE\_KEYVAL}\cfunc{MPI::Comm::Create\_keyval}, 
+C++ routine \mpifuncindex{MPI\_COMM\_CREATE\_KEYVAL}\mpicppfunc{MPI::Comm::Create\_keyval}, 
 this routine may be overloaded with 3~additional 
 routines that accept the C functions as the first, the second, or 
 both input arguments (instead of an argument that matches the C++ prototype).
@@ -2539,13 +2544,14 @@
 
 \begin{users}
 If a user wants to write a ``wrapper'' routine that 
-internally calls \mpifuncindex{MPI\_COMM\_CREATE\_KEYVAL}\cfunc{MPI::Comm::Create\_keyval} 
+internally calls \mpifuncindex{MPI\_COMM\_CREATE\_KEYVAL}\mpicppfunc{MPI::Comm::Create\_keyval} 
 and \mpiarg{comm\_copy\_attr\_fn} and/or \mpiarg{comm\_delete\_attr\_fn} 
 are arguments of this wrapper routine, and if this wrapper routine should be 
 callable with both user-defined C++ copy and delete functions and with the 
 predefined C functions, then the same overloading as described above in the 
 advice to implementors may be necessary. 
 \end{users}
+\MPIdeleteEnd{3.0}
 
 \begin{funcdef}{MPI\_COMM\_FREE\_KEYVAL(comm\_keyval)}
 \funcarg{\INOUT}{comm\_keyval}{key value (integer)}
@@ -2590,7 +2596,7 @@
 \funcarg{\IN}{attribute\_val}{attribute value}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_set\_attr(MPI\_Comm comm, int comm\_keyval, void *attribute\_val)}
  
 \mpifbind{MPI\_COMM\_SET\_ATTR(COMM, COMM\_KEYVAL, ATTRIBUTE\_VAL, IERROR)\fargs INTEGER COMM, COMM\_KEYVAL, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ATTRIBUTE\_VAL} 
@@ -2624,7 +2630,7 @@
 the key (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_get\_attr(MPI\_Comm comm, int comm\_keyval, void *attribute\_val, int *flag)}
 
 \mpifbind{MPI\_COMM\_GET\_ATTR(COMM, COMM\_KEYVAL, ATTRIBUTE\_VAL, FLAG, IERROR)\fargs INTEGER COMM, COMM\_KEYVAL, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ATTRIBUTE\_VAL\\LOGICAL FLAG}  
@@ -2675,7 +2681,7 @@
 \funcarg{\IN}{comm\_keyval}{key value (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Comm}\cdeclindex{MPI::Comm}%
+\cdeclindex{MPI\_Comm}%
 \mpibind{MPI\_Comm\_delete\_attr(MPI\_Comm comm, int comm\_keyval)}
 
 \mpifbind{MPI\_COMM\_DELETE\_ATTR(COMM, COMM\_KEYVAL, IERROR)\fargs INTEGER COMM, COMM\_KEYVAL, IERROR}  
@@ -2777,12 +2783,12 @@
 
 The C callback functions are:
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpitypedefbind{MPI\_Win\_copy\_attr\_function(MPI\_Win~oldwin, int~win\_keyval, void~*extra\_state, void~*attribute\_val\_in, void~*attribute\_val\_out, int~*flag)}
 
 and
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpitypedefbind{MPI\_Win\_delete\_attr\_function(MPI\_Win~win, int~win\_keyval, void~*attribute\_val, void~*extra\_state)}
 
 The Fortran callback functions are:
@@ -2821,7 +2827,7 @@
 \funcarg{\IN}{attribute\_val}{attribute value}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_set\_attr(MPI\_Win win, int win\_keyval, void *attribute\_val)}
  
 \mpifbind{MPI\_WIN\_SET\_ATTR(WIN, WIN\_KEYVAL, ATTRIBUTE\_VAL, IERROR)\fargs INTEGER WIN, WIN\_KEYVAL, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ATTRIBUTE\_VAL} 
@@ -2837,7 +2843,7 @@
 the key (logical)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_get\_attr(MPI\_Win~win, int~win\_keyval, void~*attribute\_val, int~*flag)}
 
 \mpifbind{MPI\_WIN\_GET\_ATTR(WIN, WIN\_KEYVAL, ATTRIBUTE\_VAL, FLAG, IERROR)\fargs INTEGER WIN, WIN\_KEYVAL, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ATTRIBUTE\_VAL\\LOGICAL FLAG}  
@@ -2850,7 +2856,7 @@
 \funcarg{\IN}{win\_keyval}{key value (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_delete\_attr(MPI\_Win win, int win\_keyval)}
 
 \mpifbind{MPI\_WIN\_DELETE\_ATTR(WIN, WIN\_KEYVAL, IERROR)\fargs INTEGER WIN, WIN\_KEYVAL, IERROR}  
@@ -3344,7 +3350,7 @@
 \funcarg{\IN}{win\_name}{the character string which is remembered as the name (string)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_set\_name(MPI\_Win win, \MPIupdate{3.0}{140}{const }char *win\_name)}
 
 \mpifbind{MPI\_WIN\_SET\_NAME(WIN, WIN\_NAME, IERROR) \fargs INTEGER WIN, IERROR\\ CHARACTER*(*) WIN\_NAME}
@@ -3358,7 +3364,7 @@
 \funcarg{\OUT}{resultlen}{length of returned name (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_get\_name(MPI\_Win win, char *win\_name, int *resultlen)}
 
 \mpifbind{MPI\_WIN\_GET\_NAME(WIN, WIN\_NAME, RESULTLEN, IERROR) \fargs INTEGER WIN, RESULTLEN, IERROR\\ CHARACTER*(*) WIN\_NAME}
Index: chap-terms/terms-2.tex
===================================================================
--- chap-terms/terms-2.tex	(revision 1036)
+++ chap-terms/terms-2.tex	(working copy)
@@ -322,9 +322,11 @@
 participate in assignments and comparisons.
 
 In Fortran, all handles have type \ftype{INTEGER}.  In C a
-different handle type is defined for each category of objects.  In
-addition, handles themselves are distinct objects in C++.  The C
-types must support the use of the assignment and equality
+different handle type is defined for each category of objects.
+\MPIdeleteBegin{3.0}{281}
+In addition, handles themselves are distinct objects in C++.
+\MPIdeleteEnd{3.0}
+The C types must support the use of the assignment and equality
 operators.
 
 \begin{implementors}
@@ -567,7 +569,7 @@
 \cdeclmainindex{MPI\_Aint}%
 is \type{MPI\_Aint} in C
 \MPIdeleteBegin{3.0}{281}
-, \type{MPI::Aint} in C++
+, \mpicpptype{MPI::Aint} in C++
 \MPIdeleteEnd{3.0}
 and \ftype{INTEGER
 (KIND=\const{MPI\_ADDRESS\_KIND})}\cdeclmainindex{MPI\_ADDRESS\_KIND} in Fortran.
@@ -587,11 +589,13 @@
 quantities are declared to be
 \ftype{INTEGER~(KIND=MPI\_OFFSET\_KIND)}\cdeclmainindex{MPI\_OFFSET\_KIND} in 
 Fortran.
+In C one uses \type{MPI\_Offset}
 \MPIdeleteBegin{3.0}{281}
 \cdeclmainindex{MPI\_Offset}%
-In C one uses \type{MPI\_Offset} whereas in C++ one uses
-\type{MPI::Offset}. 
+whereas in C++ one uses
+\mpicpptype{MPI::Offset}.
 \MPIdeleteEnd{3.0}
+.
 These types must have the same width and encode
 address values in the same manner such that offset values in one
 language may be passed directly to another language without
@@ -848,8 +852,8 @@
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 \MPIdeleteBegin{3.0}{281}
-\subsection{C++ Binding Issues}
-\label{terms-cpp}
+%subsection{C++ Binding Issues}
+%label{terms-cpp}
 
 The C++ language bindings have been deprecated.
 There are places in the standard that give rules for C and not
@@ -899,16 +903,16 @@
 bindings where one has the optional argument and one does not.
 
 C++ functions do not return error codes.  If the default error handler
-has been set to \const{MPI::ERRORS\_THROW\_EXCEPTIONS}, the C++
+has been set to \mpicppconst{MPI::ERRORS\_THROW\_EXCEPTIONS}, the C++
 exception mechanism is used to signal an error by
 throwing an 
-\const{MPI::Exception}
+\mpicppconst{MPI::Exception}
 object.
 
 It should be noted that the default error handler
-(i.e., \const{MPI::ERRORS\_ARE\_FATAL}) on a given type has not
+(i.e., \mpicppconst{MPI::ERRORS\_ARE\_FATAL}) on a given type has not
 changed.  User error handlers are also permitted.
-\const{MPI::ERRORS\_RETURN} simply returns control to the calling
+\mpicppconst{MPI::ERRORS\_RETURN} simply returns control to the calling
 function; there is no provision for the user to retrieve the error
 code.
 
@@ -918,8 +922,8 @@
 
 \begin{users}
 C++ programmers that want to handle \mpi/ errors on their own should
-use the \const{MPI::ERRORS\_THROW\_EXCEPTIONS} error handler, rather
-than \const{MPI::ERRORS\_RETURN}, that is used for that purpose in
+use the \mpicppconst{MPI::ERRORS\_THROW\_EXCEPTIONS} error handler, rather
+than \mpicppconst{MPI::ERRORS\_RETURN}, that is used for that purpose in
 C.  Care should be taken using exceptions in mixed language
 situations.
 \end{users}
@@ -934,16 +938,16 @@
 
 Choice arguments are pointers of type {\tt void *}.
 
-Address arguments are of \MPI/-defined integer type \type{MPI::Aint},
+Address arguments are of \MPI/-defined integer type \mpicpptype{MPI::Aint},
 defined to be an integer of the size needed to hold any valid address
 on the target architecture.
-Analogously, \type{MPI::Offset} is an integer to hold file offsets.
+Analogously, \mpicpptype{MPI::Offset} is an integer to hold file offsets.
 
 Most \MPI/ functions are methods of \MPI/ C++ classes.  \MPI/ class
 names are generated from the language neutral \MPI/ types by dropping
 the {\tt MPI\_} prefix and scoping the type within the
 \code{MPI} namespace.  For example, \type{MPI\_DATATYPE} becomes 
-\ctype{MPI::Datatype}.
+\mpicpptype{MPI::Datatype}.
 
 The names of 
 % \mpiii/ 
@@ -1197,9 +1201,9 @@
 The return values of
 C++ functions are not error codes.  
 If the default error handler has been set to
-\const{MPI::ERRORS\_THROW\_EXCEPTIONS}, the C++ exception mechanism is
+\mpicppconst{MPI::ERRORS\_THROW\_EXCEPTIONS}, the C++ exception mechanism is
 used to signal an error by throwing an
-\const{MPI::Exception}
+\mpicppconst{MPI::Exception}
 object.
 See also Section~\ref{sec:bindings-c++exceptions} on page~\pageref{sec:bindings-c++exceptions}. 
 \MPIdeleteEnd{3.0}
Index: chap-intro/intro.tex
===================================================================
--- chap-intro/intro.tex	(revision 1036)
+++ chap-intro/intro.tex	(working copy)
@@ -40,7 +40,7 @@
 implementations of MPI.  This specification is for a \emph{library
   interface}; MPI is not a language, and all MPI operations are
 expressed as functions, subroutines, or methods, according to the
-appropriate language bindings, which for C, C++, Fortran-77, and
+appropriate language bindings, which for C, Fortran-77, and
 Fortran-95, are part of the MPI standard.  The standard has been
 defined through an open process by a community of parallel computing
 vendors, computer scientists, and application developers.  The next
@@ -84,7 +84,7 @@
 
 \item
 Allow convenient 
-C, C++, Fortran-77, and Fortran-95 
+C, Fortran-77, and Fortran-95 
 bindings for the interface.
 
 \item
@@ -204,10 +204,9 @@
 \item Completely new types of functionality (dynamic processes, one-sided
   communication, parallel I/O, etc.) that are what everyone thinks of as
   ``\MPIII/ functionality.''
-\item Bindings for Fortran 90 and C++.  
+\item Bindings for Fortran 90.
 MPI-2 specifies 
-  C++ bindings
-  for both \mpii/ and \mpiii/ functions, and extensions to the Fortran 77
+extensions to the Fortran 77
   binding of \mpii/ and \mpiii/ to handle Fortran 90 issues.
 \item Discussions of areas in which the \MPI/ process and framework seem likely
   to be useful, but where more discussion and experience are needed before
@@ -348,7 +347,7 @@
 This standard is intended for use by all those who want to write portable
 message-passing programs in 
 % Fortran 77 and C.
-Fortran, C and C++.
+Fortran and C.
 This includes individual application programmers,
 developers of software designed to run on parallel machines, and creators of
 environments and tools.  In order to be
@@ -415,8 +414,8 @@
     \item One-sided communication\MPIupdate{3.0}{0}{,}
     \item External interfaces\MPIupdate{3.0}{0}{,}
     \item Parallel file I/O\MPIupdate{3.0}{0}{,}
-%     \item  Bindings for Fortran, C and C++ 
-    \item  Language \MPIreplace{3.0}{0}{B}{b}indings for Fortran, C and C++\MPIupdate{3.0}{0}{,}
+%     \item  Bindings for Fortran, C
+    \item  Language \MPIreplace{3.0}{0}{B}{b}indings for Fortran and C\MPIupdate{3.0}{0}{,}
     \item  Profiling interface\MPIupdate{3.0}{0}{.}
 
 \end{itemize}
@@ -544,12 +543,10 @@
 \item
 % In the discussion, it was proposed to keep Language Bindings at the end 
 Chapter~\ref{sec:binding-2}, 
-{\sf Language Bindings}, describes 
-% the C++ binding and discusses Fortran-90 issues.
-the C++ binding, discusses Fortran issues, 
+{\sf Language Bindings},
+discusses Fortran issues, 
 and describes language interoperability aspects between 
-% C, Fortran, and C++.
-C, C++, and Fortran.
+C and Fortran.
 \end{itemize}
 
 The Appendices are:
@@ -562,8 +559,7 @@
 % {\sf Language Bindings},
 {\sf Language Bindings Summary},
 gives specific syntax in 
-% Fortran, C, and C++, 
-C, C++, and Fortran,
+C and Fortran,
 for all \MPI/ functions, 
 constants, and types.
 \item
Index: chap-topol/topol.tex
===================================================================
--- chap-topol/topol.tex	(revision 1036)
+++ chap-topol/topol.tex	(working copy)
@@ -217,7 +217,7 @@
 \mpibind{MPI\_Cart\_create(MPI\_Comm~comm\_old, int~ndims, int~*dims, int~*periods, int~reorder, MPI\_Comm~*comm\_cart)}
 
 \mpifbind{MPI\_CART\_CREATE(COMM\_OLD, NDIMS, DIMS, PERIODS, REORDER, COMM\_CART, IERROR)\fargs INTEGER COMM\_OLD, NDIMS, DIMS(*), COMM\_CART, IERROR \\ LOGICAL PERIODS(*), REORDER}
-\cdeclindex{MPI::Cartcomm}%
+%
 \mpicppemptybind{MPI::Intracomm::Create\_cart(int~ndims, const~int~dims[], const~bool~periods[], bool~reorder) const}{MPI::Cartcomm}
 
 \mpifunc{MPI\_CART\_CREATE} returns a handle to a new communicator to which the
@@ -312,7 +312,7 @@
 \mpibind{MPI\_Graph\_create(MPI\_Comm~comm\_old, int~nnodes, int~*index, int~*edges, int~reorder, MPI\_Comm~*comm\_graph)}
 
 \mpifbind{MPI\_GRAPH\_CREATE(COMM\_OLD, NNODES, INDEX, EDGES, REORDER, COMM\_GRAPH, IERROR)\fargs INTEGER COMM\_OLD, NNODES, INDEX(*), EDGES(*), COMM\_GRAPH, IERROR \\ LOGICAL REORDER}
-\cdeclindex{MPI::Graphcomm}%
+%
 \mpicppemptybind{MPI::Intracomm::Create\_graph(int~nnodes, const~int~index[], const~int~edges[], bool~reorder) const}{MPI::Graphcomm}
 
 \func{MPI\_GRAPH\_CREATE} returns a handle to a new communicator to which the
Index: mpi-macs-html.tex
===================================================================
--- mpi-macs-html.tex	(revision 1036)
+++ mpi-macs-html.tex	(working copy)
@@ -77,6 +77,7 @@
 \newcommand{\mpifunc}[1]{\gb\textsf{#1}\mpifuncindex{#1}}  % for MPI functions - language independent
 % for ones that don't go in index:
 \newcommand{\mpiskipfunc}[1]{\gb\textsf{#1}}               % ... same, but not in the Function Index
+
 \newcommand{\cfunc}[1]{\gb\textsf{#1}}
 \newcommand{\ffunc}[1]{\gb\textsf{#1}}
 \newcommand{\const}[1]{\protect\gb\protect{\textsf{\small #1}}\index{CONST:#1}}
@@ -187,16 +188,21 @@
 \newcommand{\mpibindnotint}[1]{{\raggedright \hangindent 7em\hangafter=1\tt
 #1 \par \vspace{0.1in}}} 
 
-\newcommand{\mpicppbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\tt #1 \par \vspace{0.1in}}} 
-\newcommand{\mpicppemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\MPIupdate{2.2}{150}{\{} #2 #1 \rm\MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}}\par \vspace{0.1in}}}
+% ticket 281: remove all C++ bindings
+%\newcommand{\mpicppbind}[1]{{\raggedright \hangindent
+%7em\hangafter=1\tt #1 \par \vspace{0.1in}}} 
+%\newcommand{\mpicppemptybind}[2]{{\raggedright \hangindent
+%7em\hangafter=1\MPIupdate{2.2}{150}{\{} #2 #1 \rm\MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}}\par \vspace{0.1in}}}
 
-%special macro for no including C binding in index
-\newcommand{\mpiskipbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\tt int #1 \par \vspace{0.1in}}} 
-\newcommand{\mpicppskipemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
+%%special macro for no including C binding in index
+%\newcommand{\mpiskipbind}[1]{{\raggedright \hangindent
+%7em\hangafter=1\tt int #1 \par \vspace{0.1in}}} 
+%\newcommand{\mpicppskipemptybind}[2]{{\raggedright \hangindent
+%7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
+\newcommand{\mpicppbind}[1]{{}}
+\newcommand{\mpicppemptybind}[2]{{}}
+\newcommand{\mpiskipbind}[1]{{}}
+\newcommand{\mpicppskipemptybind}[2]{{}}
 
 % special macro that avoids the int in front
 % should be used for C functions only that want to be in index
@@ -235,18 +241,28 @@
 \newcommand{\mpitypedefemptyskipbind}[2]{{\raggedright \hangindent
 7em\hangafter=1\tt typedef #2 #1;\par \vspace{0.1in}}}
 
-\newcommand{\mpicpptypedefbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
+% Ticket 281 remove all C++ bindings
+%\newcommand{\mpicpptypedefbind}[1]{{\raggedright \hangindent
+%7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
+%%\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
+%%7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
 %\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
-%7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
-\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\MPIupdate{2.2}{150}{\{}\tt typedef #1; \MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}}\par \vspace{0.1in}}}
-
+%7em\hangafter=1\MPIupdate{2.2}{150}{\{}\tt typedef #1; \MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}}\par \vspace{0.1in}}}
+%
+%%\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
+%%7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
 %\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
-%7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
-\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\MPIupdate{2.2}{150}{\{}\tt typedef #2 #1; \MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}}\par \vspace{0.1in}}}
+%7em\hangafter=1\MPIupdate{2.2}{150}{\{}\tt typedef #2 #1; \MPIupdate{2.2}{150}{{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}}\par \vspace{0.1in}}}
+\newcommand{\mpicpptypedefbind}[1]{{}}
+\newcommand{\mpicppskiptypedefbind}[1]{{}}
+\newcommand{\mpicpptypedefemptybind}[2]{{}}
 
+\newcommand{\mpicppconst}[1]{}
+\newcommand{\mpicppconstskip}[1]{}
+\newcommand{\mpicppconsti}[1]{}
+\newcommand{\mpicpptype}[1]{}
+\newcommand{\mpicppfunc}[1]{}
+
 \newcommand{\mpifsubbind}[1]{{\raggedright \hangindent
 7em\hangafter=1\tt SUBROUTINE #1 \par \vspace{0.1in}}}
 
Index: chap-inquiry/inquiry.tex
===================================================================
--- chap-inquiry/inquiry.tex	(revision 1036)
+++ chap-inquiry/inquiry.tex	(working copy)
@@ -253,7 +253,7 @@
 \funcarg{\OUT}{baseptr}{pointer to beginning of memory segment allocated}
 \end{funcdef}
 
-\cdeclindex{MPI\_Info}\cdeclindex{MPI::Info}%
+\cdeclindex{MPI\_Info}%
 \mpibind{MPI\_Alloc\_mem(MPI\_Aint~size, MPI\_Info~info, void~*baseptr)}
 
 \mpifbind{MPI\_ALLOC\_MEM(SIZE, INFO, BASEPTR, IERROR) \fargs INTEGER INFO, IERROR \\INTEGER(KIND=MPI\_ADDRESS\_KIND) SIZE, BASEPTR}
@@ -478,9 +478,12 @@
 matching \consti{XXX}.
 The predefined error handlers \consti{MPI\_ERRORS\_RETURN} and
 \consti{MPI\_ERRORS\_ARE\_FATAL} can be attached to
-communicators, windows, and files.  In C++, the predefined error
-handler \consti{MPI::ERRORS\_THROW\_EXCEPTIONS} can also be attached
+communicators, windows, and files.
+\MPIdeleteBegin{3.0}{281}
+In C++, the predefined error
+handler \mpicppconsti{MPI::ERRORS\_THROW\_EXCEPTIONS} can also be attached
 to communicators, windows, and files.
+\MPIdeleteEnd{3.0}
 
 The error handler currently associated with a communicator, window, or
 file can be retrieved by a call to \mpiskipfunc{MPI\_XXX\_GET\_ERRHANDLER}.
@@ -530,7 +533,7 @@
 \funcarg{\OUT}{errhandler}{\MPI/  error handler (handle)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Errhandler}\cdeclmainindex{MPI::Errhandler}%
+\cdeclmainindex{MPI\_Errhandler}%
 \mpibind{MPI\_Comm\_create\_errhandler(MPI\_Comm\_errhandler\_function *function, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_COMM\_CREATE\_ERRHANDLER(FUNCTION, ERRHANDLER, IERROR)\fargs  EXTERNAL FUNCTION \\ INTEGER ERRHANDLER, IERROR}
@@ -598,7 +601,7 @@
 \funcarg{\IN}{errhandler}{new error handler for communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
+\cdeclindex{MPI\_Errhandler}%
 \mpibind{MPI\_Comm\_set\_errhandler(MPI\_Comm comm, MPI\_Errhandler errhandler)}
 
 \mpifbind{MPI\_COMM\_SET\_ERRHANDLER(COMM, ERRHANDLER, IERROR) \fargs INTEGER  COMM, ERRHANDLER, IERROR}
@@ -619,7 +622,7 @@
 communicator (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
+\cdeclindex{MPI\_Errhandler}%
 \mpibind{MPI\_Comm\_get\_errhandler(MPI\_Comm comm, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_COMM\_GET\_ERRHANDLER(COMM, ERRHANDLER, IERROR) \fargs INTEGER  COMM, ERRHANDLER, IERROR}
@@ -644,7 +647,7 @@
 \funcarg{\OUT}{errhandler}{\MPI/  error handler (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
+\cdeclindex{MPI\_Errhandler}%
 \mpibind{MPI\_Win\_create\_errhandler(MPI\_Win\_errhandler\_function *function, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_WIN\_CREATE\_ERRHANDLER(FUNCTION, ERRHANDLER, IERROR) \fargs EXTERNAL FUNCTION \\ INTEGER ERRHANDLER, IERROR}
@@ -657,7 +660,7 @@
 \constskip{MPI\_Win\_errhandler\_function}
 which is defined as
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpitypedefemptybind{MPI\_Win\_errhandler\_function(MPI\_Win *, int *, \ldots)}{void}
 
 The first argument is the window in use, the second
@@ -676,8 +679,8 @@
 \funcarg{\IN}{errhandler}{new error handler for window  (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Errhandler}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_set\_errhandler(MPI\_Win win, MPI\_Errhandler errhandler)}
 
 \mpifbind{MPI\_WIN\_SET\_ERRHANDLER(WIN, ERRHANDLER, IERROR) \fargs INTEGER WIN, ERRHANDLER, IERROR}
@@ -695,8 +698,8 @@
 (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Errhandler}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_get\_errhandler(MPI\_Win win, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_WIN\_GET\_ERRHANDLER(WIN, ERRHANDLER, IERROR) \fargs INTEGER WIN, ERRHANDLER, IERROR}
@@ -712,7 +715,7 @@
 \funcarg{\OUT}{errhandler}{\MPI/  error handler (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
+\cdeclindex{MPI\_Errhandler}%
 \mpibind{MPI\_File\_create\_errhandler(MPI\_File\_errhandler\_function *function, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_FILE\_CREATE\_ERRHANDLER(FUNCTION, ERRHANDLER, IERROR)\fargs  EXTERNAL FUNCTION \\ INTEGER ERRHANDLER, IERROR}
@@ -724,7 +727,7 @@
 function of type
 \constskip{MPI\_File\_errhandler\_function}, which is defined as
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpitypedefemptybind{MPI\_File\_errhandler\_function(MPI\_File *, int *, \ldots)}{void}
 
 The first argument is the file in use, the second
@@ -743,8 +746,8 @@
 \funcarg{\IN}{errhandler}{new error handler for file  (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Errhandler}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_set\_errhandler(MPI\_File file, MPI\_Errhandler errhandler)}
 
 \mpifbind{MPI\_FILE\_SET\_ERRHANDLER(FILE, ERRHANDLER, IERROR) \fargs INTEGER  FILE, ERRHANDLER, IERROR}
@@ -762,8 +765,8 @@
  (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_Errhandler}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_get\_errhandler(MPI\_File file, MPI\_Errhandler *errhandler)}
 
 \mpifbind{MPI\_FILE\_GET\_ERRHANDLER(FILE, ERRHANDLER, IERROR) \fargs INTEGER  FILE, ERRHANDLER, IERROR}
@@ -779,7 +782,7 @@
 \funcarg{\INOUT}{errhandler}{MPI error handler (handle)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Errhandler}\cdeclindex{MPI::Errhandler}%
+\cdeclindex{MPI\_Errhandler}%
 \mpibind{MPI\_Errhandler\_free(MPI\_Errhandler~*errhandler)}
 
 \mpifbind{MPI\_ERRHANDLER\_FREE(ERRHANDLER, IERROR)\fargs INTEGER ERRHANDLER, IERROR}
@@ -1196,7 +1199,7 @@
 \funcarg{\IN}{errorcode}{error code (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Win}\cdeclindex{MPI::Win}%
+\cdeclindex{MPI\_Win}%
 \mpibind{MPI\_Win\_call\_errhandler(MPI\_Win win, int errorcode)}
 
 \mpifbind{MPI\_WIN\_CALL\_ERRHANDLER(WIN, ERRORCODE, IERROR)\fargs INTEGER WIN, ERRORCODE, IERROR}
@@ -1219,7 +1222,7 @@
 \funcarg{\IN}{errorcode}{error code (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_File}\cdeclindex{MPI::File}%
+\cdeclindex{MPI\_File}%
 \mpibind{MPI\_File\_call\_errhandler(MPI\_File fh, int errorcode)}
 
 \mpifbind{MPI\_FILE\_CALL\_ERRHANDLER(FH, ERRORCODE, IERROR)\fargs INTEGER FH, ERRORCODE, IERROR}
@@ -1373,9 +1376,12 @@
 
 Conforming implementations of \MPI/ are required to allow
 applications to pass \mpiarg{NULL} for both the \mpiarg{argc} and
-%\mpiarg{argv} arguments of \cfunc{main}.  In C++, there is an alternative
+%\mpiarg{argv} arguments of \cfunc{main}.
+\MPIdeleteBegin{3.0}{281}
+In C++, there is an alternative
 \mpiarg{argv} arguments of \cfunc{main} in C and C++.  In C++, there is an alternative
-binding for \cfunc{MPI::Init} that does not have these arguments at all.
+binding for \mpicppfunc{MPI::Init} that does not have these arguments at all.
+\MPIdeleteEnd{3.0}
 
 \begin{rationale}
 In some applications, libraries may be making the call to \cfunc{MPI\_Init},
Index: mpi-user-macs.tex
===================================================================
--- mpi-user-macs.tex	(revision 1036)
+++ mpi-user-macs.tex	(working copy)
@@ -328,20 +328,25 @@
 \newcommand{\mpibindnotint}[1]{{\raggedright \hangindent 7em\hangafter=1\tt
 #1 \par \vspace{0.1in}}} 
 
-\newcommand{\mpicppbind}[2]{{\raggedright \hangindent
-7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
-%% This change to the mpicppbind macro is from MPI 2.2, ticket #150
+% ticket 281 remove all C++ bindings
+%\newcommand{\mpicppbind}[2]{{\raggedright \hangindent
+%7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
+%%% This change to the mpicppbind macro is from MPI 2.2, ticket #150
+%%\newcommand{\mpicppemptybind}[2]{{\raggedright \hangindent
+%%7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
 %\newcommand{\mpicppemptybind}[2]{{\raggedright \hangindent
+%7em\hangafter=1\{\texttt{#2 #1}{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}\par \vspace{0.1in}}}
+
+%%special macro for not including C binding in index
+%\newcommand{\mpiskipbind}[1]{{\raggedright \hangindent
+%7em\hangafter=1\tt int #1 \par \vspace{0.1in}}} 
+%\newcommand{\mpicppskipemptybind}[2]{{\raggedright \hangindent
 %7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
-\newcommand{\mpicppemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\{\texttt{#2 #1}{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})} \}\par \vspace{0.1in}}}
+\newcommand{\mpicppbind}[1]{{}}
+\newcommand{\mpicppemptybind}[2]{{}}
+\newcommand{\mpicppskipemptybind}[2]{{}}
+\newcommand{\mpiskipbind}[1]{{}}
 
-%special macro for not including C binding in index
-\newcommand{\mpiskipbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\tt int #1 \par \vspace{0.1in}}} 
-\newcommand{\mpicppskipemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\tt #2 #1 \par \vspace{0.1in}}}
-
 % special macro that avoids the int in front
 % should be used for C functions only that want to be in index
 \newcommand{\mpiemptybind}[2]{{\raggedright \hangindent
@@ -379,18 +384,28 @@
 \newcommand{\mpitypedefemptyskipbind}[2]{{\raggedright \hangindent
 7em\hangafter=1\tt typedef #2 #1;\par \vspace{0.1in}}}
 
-\newcommand{\mpicpptypedefbind}[2]{{\raggedright \hangindent
-7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
+% ticket 281 remove all C++ bindings
+%\newcommand{\mpicpptypedefbind}[2]{{\raggedright \hangindent
+%7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
+%%\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
+%%7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
 %\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
-%7em\hangafter=1\tt typedef #1; \par \vspace{0.1in}}}
-\newcommand{\mpicppskiptypedefbind}[1]{{\raggedright \hangindent
-7em\hangafter=1\{\texttt{typedef #1; }{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}\par \vspace{0.1in}}}
-
+%7em\hangafter=1\{\texttt{typedef #1; }{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}\par \vspace{0.1in}}}
+%
+%%\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
+%%7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
 %\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
-%7em\hangafter=1\tt typedef #2 #1; \par \vspace{0.1in}}}
-\newcommand{\mpicpptypedefemptybind}[2]{{\raggedright \hangindent
-7em\hangafter=1\{\texttt{typedef #2 #1; }{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}\par \vspace{0.1in}}}
+%7em\hangafter=1\{\texttt{typedef #2 #1; }{\it (binding deprecated, see Section~\ref{sec:deprecated-cxx-bindings})}\}\par \vspace{0.1in}}}
+\newcommand{\mpicpptypedefbind}[2]{{}}
+\newcommand{\mpicppskiptypedefbind}[1]{{}}
+\newcommand{\mpicpptypedefemptybind}[2]{{}}
 
+\newcommand{\mpicppconst}[1]{}
+\newcommand{\mpicppconstskip}[1]{}
+\newcommand{\mpicppconsti}[1]{}
+\newcommand{\mpicpptype}[1]{}
+\newcommand{\mpicppfunc}[1]{}
+
 \newcommand{\mpifsubbind}[1]{{\raggedright \hangindent
 7em\hangafter=1\tt SUBROUTINE #1 \par \vspace{0.1in}}}
 
Index: chap-binding/binding-2.tex
===================================================================
--- chap-binding/binding-2.tex	(revision 1036)
+++ chap-binding/binding-2.tex	(working copy)
@@ -2,26 +2,6 @@
 \label{sec:binding-2}
 \label{chap:binding-2}
 
-
-\section{C++}
-\label{sec:cpp}
-\subsection{Overview}
-\label{sec:c++-intro}
-
-\status{Two votes}
-% Second vote: 14-0-0, 10/10/96
-% For both ``C++ Introduction'' and ``Design''
- 
-\MPIreplaceBeginOld{3.0}{281}
-[moved entire section on design of C++ bindings to REMOVED section(s)]
-\MPIreplaceBeginNew{3.0}{281}
-The C++ language bindings have been removed.
-See section
-Chapter~\ref{chap:removed},
-{\sf Removed Interfaces}
-for more information.
-\MPIreplaceEnd{3.0}
-
 \section{Fortran Support} 
 
 \subsection{Overview}
@@ -1100,7 +1080,7 @@
 \constskip{MPI\_$<$TYPE$>$n} in C and Fortran
 \MPIdeleteBegin{3.0}{281}
 and of the form
-\constskip{MPI::$<$TYPE$>$n} in C++
+\mpicppconstskip{MPI::$<$TYPE$>$n} in C++
 \MPIdeleteEnd{3.0}
 where \constskip{$<$TYPE$>$} is one of
 \constskip{REAL}, \constskip{INTEGER} and \constskip{COMPLEX}, and {\bf n} is the length in bytes of the
@@ -1672,7 +1652,7 @@
 \end{rationale}
 
 \MPIdeleteBegin{3.0}{281}
-[moved entire section on C and C++ interoperability into REMOVED section(s)]
+[removed entire section on C and C++ interoperability]
 \MPIdeleteEnd{3.0}
 
 \subsection{Status}
@@ -1992,7 +1972,7 @@
 \cdeclmainindex{MPI\_Aint} 
 \type{MPI\_Aint}
 \MPIdeleteBegin{3.0}{281}
-(in C) or \type{MPI::Aint} in C++,
+(in C) or \mpicpptype{MPI::Aint} in C++,
 \MPIdeleteEnd{3.0}
 to hold addresses.  The corresponding arguments, in Fortran, have type
 \constskip{INTEGER}.  This causes Fortran and C
@@ -2056,8 +2036,8 @@
 \cdeclindex{MPI\_Aint}
 \consti{MPI\_Aint} 
 \MPIreplaceBeginOld{3.0}{281}
-\cdeclindex{MPI::Aint}
-and \consti{MPI::Aint} are
+
+and \mpicppconsti{MPI::Aint} are
 \MPIreplaceBeginNew{3.0}{281}
 is
 \MPIreplaceEnd{3.0}
Index: chap-appLang/appLang-Const.tex
===================================================================
--- chap-appLang/appLang-Const.tex	(revision 1036)
+++ chap-appLang/appLang-Const.tex	(working copy)
@@ -23,12 +23,6 @@
 \label{subsec:annexa-const}
 
 The C and Fortran name is listed in the left column.
-\MPIupdateBegin{3.0}{281}
-Note, C++ bindings are removed. See section
-Section~\ref{subsec:rm-cpp-const},
-{\sf Removed C++ Constants}
-for more information.
-\MPIupdateEnd{3.0}
 Constants with the type \ctype{const int} may 
 also be implemented as literal integer constants substituted by the preprocessor.
 
Index: mpi-report.tex
===================================================================
--- mpi-report.tex	(revision 1036)
+++ mpi-report.tex	(working copy)
@@ -292,7 +292,6 @@
 \include{chap-appLang/appLang-Const}
 \include{appLang-C}
 \include{appLang-Fortran}
-\include{appLang-C++}
  
 \cleardoublepage 
 \include{chap-changes/changes}
Index: chap-datatypes/datatypes.tex
===================================================================
--- chap-datatypes/datatypes.tex	(revision 1036)
+++ chap-datatypes/datatypes.tex	(working copy)
@@ -189,9 +189,9 @@
 \mpifunc{MPI\_TYPE\_CREATE\_STRUCT}, and \mpifunc{MPI\_GET\_ADDRESS}
 accept arguments of type
 \ftype{INTEGER(KIND=MPI\_ADDRESS\_KIND)}, wherever arguments of type
-\cdeclmainindex{MPI\_Aint}\cdeclmainindex{MPI::Aint}%
-\consti{MPI\_Aint} and \consti{MPI::Aint} 
-are used in C and C++.
+\cdeclmainindex{MPI\_Aint}%
+\consti{MPI\_Aint} \MPIdelete{3.0}{281}{and \mpicppconsti{MPI::Aint}}
+are used in C.
 On Fortran~77 systems that do not support the Fortran~90
 \constskip{KIND} notation, and where addresses are 64~bits whereas
 default \constskip{INTEGER}s are 32~bits, these arguments will be of
@@ -212,7 +212,7 @@
 \funcarg{\OUT}{newtype}{new datatype (handle)}
 \end{funcdef}
 
-\cdeclmainindex{MPI\_Datatype}\cdeclmainindex{MPI::Datatype}%
+\cdeclmainindex{MPI\_Datatype}%
 \mpibind{MPI\_Type\_contiguous(int~count, MPI\_Datatype~oldtype, MPI\_Datatype~*newtype)}
 
 \mpifbind{MPI\_TYPE\_CONTIGUOUS(COUNT, OLDTYPE, NEWTYPE, IERROR)\fargs INTEGER  COUNT, OLDTYPE, NEWTYPE, IERROR}
@@ -407,7 +407,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_create\_hvector(int~count, int~blocklength, MPI\_Aint~stride, MPI\_Datatype~oldtype, MPI\_Datatype~*newtype)}
 
 % \mpifbind{MPI\_TYPE\_CREATE\_HVECTOR(COUNT, BLOCKLENGTH, STIDE, OLDTYPE, NEWTYPE, IERROR)\fargs INTEGER COUNT, BLOCKLENGTH, OLDTYPE, NEWTYPE, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) STRIDE}
@@ -597,7 +597,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_create\_hindexed(int~count, int~array\_of\_blocklengths[], MPI\_Aint~array\_of\_displacements[], MPI\_Datatype~oldtype, MPI\_Datatype~*newtype)}
 
 \mpifbind{MPI\_TYPE\_CREATE\_HINDEXED(COUNT, ARRAY\_OF\_BLOCKLENGTHS, ARRAY\_OF\_DISPLACEMENTS, OLDTYPE, NEWTYPE, IERROR)\fargs INTEGER COUNT, ARRAY\_OF\_BLOCKLENGTHS(*), OLDTYPE, NEWTYPE, IERROR\\INTEGER(KIND=MPI\_ADDRESS\_KIND) ARRAY\_OF\_DISPLACEMENTS(*)}
@@ -715,7 +715,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_create\_struct(int~count, int~array\_of\_blocklengths[], MPI\_Aint~array\_of\_displacements[], MPI\_Datatype~array\_of\_types[], MPI\_Datatype~*newtype)}
 
 \mpifbind{MPI\_TYPE\_CREATE\_STRUCT(COUNT, ARRAY\_OF\_BLOCKLENGTHS, ARRAY\_OF\_DISPLACEMENTS, ARRAY\_OF\_TYPES, NEWTYPE, IERROR)\fargs INTEGER COUNT, ARRAY\_OF\_BLOCKLENGTHS(*), ARRAY\_OF\_TYPES(*), NEWTYPE, IERROR\\ INTEGER(KIND=MPI\_ADDRESS\_KIND) ARRAY\_OF\_DISPLACEMENTS(*)}
@@ -1355,7 +1355,7 @@
 \funcarg{\OUT}{address}{address of location (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Get\_address(void~*location, MPI\_Aint~*address)}
 
 %shl
@@ -1374,7 +1374,7 @@
 system. However, they may fail if addresses larger than $2^{32} -1$
 are used in the program.  New codes should be written so that they use
 the new functions. This provides compatibility
-with C/C++ and avoids errors on 64 bit architectures.  However, such
+with C and avoids errors on 64 bit architectures.  However, such
 newly written codes may need to be (slightly) rewritten to port to old
 Fortran 77 environments that do not support \constskip{KIND}
 declarations.
@@ -1585,7 +1585,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_get\_extent(MPI\_Datatype datatype, MPI\_Aint~*lb, MPI\_Aint~*extent)}
 
 \mpifbind{MPI\_TYPE\_GET\_EXTENT(DATATYPE, LB, EXTENT, IERROR)\fargs INTEGER  DATATYPE,  IERROR\\INTEGER(KIND = MPI\_ADDRESS\_KIND) LB, EXTENT}
@@ -1623,7 +1623,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_create\_resized(MPI\_Datatype oldtype, MPI\_Aint lb, MPI\_Aint extent, MPI\_Datatype *newtype)}
 
 \mpifbind{MPI\_TYPE\_CREATE\_RESIZED(OLDTYPE, LB, EXTENT, NEWTYPE, IERROR)\fargs INTEGER OLDTYPE,  NEWTYPE, IERROR\\ INTEGER(KIND=MPI\_ADDRESS\_KIND) LB, EXTENT}
@@ -1674,7 +1674,7 @@
 \end{funcdef}
 
 %shl
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_get\_true\_extent(MPI\_Datatype datatype, MPI\_Aint *true\_lb, MPI\_Aint *true\_extent)}
 
 \mpifbind{MPI\_TYPE\_GET\_TRUE\_EXTENT(DATATYPE, TRUE\_LB, TRUE\_EXTENT, IERROR)\fargs INTEGER DATATYPE,  IERROR\\ INTEGER(KIND = MPI\_ADDRESS\_KIND) TRUE\_LB, TRUE\_EXTENT}
@@ -1977,7 +1977,7 @@
 \funcarg{\OUT}{count}{number of received basic elements (integer)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Status}\cdeclindex{MPI::Status}%
+\cdeclindex{MPI\_Status}%
 \mpibind{MPI\_Get\_elements(MPI\_Status~*status, MPI\_Datatype~datatype, int~*count)}
 
 \mpifbind{MPI\_GET\_ELEMENTS(STATUS, DATATYPE, COUNT, IERROR)\fargs INTEGER  STATUS(MPI\_STATUS\_SIZE), DATATYPE, COUNT, IERROR}
@@ -2246,17 +2246,17 @@
 \constitem{MPI\_COMBINER\_CONTIGUOUS}{\mpifunc{MPI\_TYPE\_CONTIGUOUS}}
 \constitem{MPI\_COMBINER\_VECTOR}{\mpifunc{MPI\_TYPE\_VECTOR}}
 \constitem{MPI\_COMBINER\_HVECTOR\_INTEGER}{\mpifunc{MPI\_TYPE\_HVECTOR} from Fortran}
-\constitem{MPI\_COMBINER\_HVECTOR}{\mpifunc{MPI\_TYPE\_HVECTOR} from C or C++}
+\constitem{MPI\_COMBINER\_HVECTOR}{\mpifunc{MPI\_TYPE\_HVECTOR} from C}
 \constskipitem{}{\ \ and in some case Fortran}
 \constskipitem{}{\ \  or \mpifunc{MPI\_TYPE\_CREATE\_HVECTOR}}
 \constitem{MPI\_COMBINER\_INDEXED}{\mpifunc{MPI\_TYPE\_INDEXED}}
 \constitem{MPI\_COMBINER\_HINDEXED\_INTEGER}{\mpifunc{MPI\_TYPE\_HINDEXED} from Fortran}
-\constitem{MPI\_COMBINER\_HINDEXED}{\mpifunc{MPI\_TYPE\_HINDEXED} from C or C++}
+\constitem{MPI\_COMBINER\_HINDEXED}{\mpifunc{MPI\_TYPE\_HINDEXED} from C}
 \constskipitem{}{\ \ and in some case Fortran}
 \constskipitem{}{\ \  or \mpifunc{MPI\_TYPE\_CREATE\_HINDEXED}}
 \constitem{MPI\_COMBINER\_INDEXED\_BLOCK}{\mpifunc{MPI\_TYPE\_CREATE\_INDEXED\_BLOCK}}
 \constitem{MPI\_COMBINER\_STRUCT\_INTEGER}{\mpifunc{MPI\_TYPE\_STRUCT} from Fortran}
-\constitem{MPI\_COMBINER\_STRUCT}{\mpifunc{MPI\_TYPE\_STRUCT} from C or C++}
+\constitem{MPI\_COMBINER\_STRUCT}{\mpifunc{MPI\_TYPE\_STRUCT} from C}
 \constskipitem{}{\ \ and in some case Fortran}
 \constskipitem{}{\ \  or \mpifunc{MPI\_TYPE\_CREATE\_STRUCT}}
 \constitem{MPI\_COMBINER\_SUBARRAY}{\mpifunc{MPI\_TYPE\_CREATE\_SUBARRAY}}
@@ -2283,7 +2283,7 @@
 combiners for hvector: \const{MPI\_COMBINER\_HVECTOR\_INTEGER} and
 \const{MPI\_COMBINER\_HVECTOR}.  The former is used if 
 it was the \mpii/ call from Fortran, and the latter is used if it was the
-\mpii/ call from C or C++.  
+\mpii/ call from C.
 However, on systems where \const{MPI\_ADDRESS\_KIND}~=~\const{MPI\_INTEGER\_KIND} (i.e., where integer arguments and address size
 arguments are the same), the combiner \const{MPI\_COMBINER\_HVECTOR}
 may be returned for a datatype constructed by a call to
@@ -2329,7 +2329,7 @@
 \funcarg{\OUT}{array\_of\_datatypes}{contains datatype arguments used in constructing \mpiarg{datatype} (array of handles)}
 \end{funcdef}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Type\_get\_contents(MPI\_Datatype~datatype, int~max\_integers, int~max\_addresses, int~max\_datatypes, int~array\_of\_integers[], MPI\_Aint~array\_of\_addresses[], MPI\_Datatype~array\_of\_datatypes[])}
 
 \mpifbind{MPI\_TYPE\_GET\_CONTENTS(DATATYPE, MAX\_INTEGERS, MAX\_ADDRESSES, MAX\_DATATYPES, ARRAY\_OF\_INTEGERS, ARRAY\_OF\_ADDRESSES, ARRAY\_OF\_DATATYPES, IERROR)\fargs INTEGER DATATYPE, MAX\_INTEGERS, MAX\_ADDRESSES, MAX\_DATATYPES, ARRAY\_OF\_INTEGERS(*), ARRAY\_OF\_DATATYPES(*), IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) ARRAY\_OF\_ADDRESSES(*)}
@@ -2478,8 +2478,6 @@
 MPI_Type_get_contents(type, ni, na, nd, i, a, d);
 \end{verbatim}
 
-The C++ code is in analogy to the C code above with the same values returned.
-
 In the descriptions that follow, the lower case name 
 of arguments
 is used.
@@ -2493,7 +2491,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &  C \& C++ location &    Fortran location                \\
+Constructor argument &  C location &    Fortran location                \\
 \hline
 oldtype &               d[0] &          D(1)                            \\
 \hline
@@ -2509,7 +2507,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &  C \& C++ location &    Fortran location                \\
+Constructor argument &  C location &    Fortran location                \\
 \hline
 count &                 i[0] &          I(1)                            \\
 oldtype &               d[0] &          D(1)                            \\
@@ -2526,7 +2524,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &  C \& C++ location &    Fortran location                \\
+Constructor argument &  C location &    Fortran location                \\
 \hline
 count &                 i[0] &          I(1)                            \\
 blocklength &           i[1] &          I(2)                            \\
@@ -2545,7 +2543,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &  C \& C++ location &    Fortran location                \\
+Constructor argument &  C location &    Fortran location                \\
 \hline
 count &                 i[0] &          I(1)                            \\
 blocklength &           i[1] &          I(2)                            \\
@@ -2564,7 +2562,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 count                   &       i[0] &                          I(1)                            \\
 array\_of\_blocklengths &       i[1] to i[i[0]] &               I(2) to I(I(1)+1)               \\
@@ -2583,7 +2581,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 count                   &       i[0] &                          I(1)                            \\
 array\_of\_blocklengths &       i[1] to i[i[0]] &               I(2) to I(I(1)+1)               \\
@@ -2602,7 +2600,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 count                   &       i[0] &                          I(1)                            \\
 blocklength             &       i[1] &                          I(2)                            \\
@@ -2621,7 +2619,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 count &                         i[0] &                          I(1)                            \\
 array\_of\_blocklengths &       i[1] to i[i[0]] &               I(2) to I(I(1)+1)               \\
@@ -2640,7 +2638,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 ndims &                         i[0] &                          I(1)                            \\
 array\_of\_sizes &              i[1] to i[i[0]] &               I(2) to I(I(1)+1)               \\
@@ -2661,7 +2659,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 size &                          i[0] &                          I(1)                            \\
 rank &                          i[1] &                          I(2)                            \\
@@ -2685,7 +2683,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 p &                             i[0] &                          I(1)                            \\
 r &                             i[1] &                          I(2)                            \\
@@ -2702,7 +2700,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 p &                             i[0] &                          I(1)                            \\
 r &                             i[1] &                          I(2)                            \\
@@ -2719,7 +2717,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 r &                             i[0] &                          I(1)                            \\
 \hline
@@ -2735,7 +2733,7 @@
 \begin{centering}
 \begin{tabular}{l c c}
 \hline
-Constructor argument &          C \& C++ location &                    Fortran location                \\
+Constructor argument &          C location &                    Fortran location                \\
 \hline
 lb &                            a[0] &                          A(1)                            \\
 extent &                        a[1] &                          A(2)                            \\
@@ -3770,7 +3768,7 @@
 \funcarg{\INOUT}{position}{current position in buffer, in bytes (integer) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Pack\_external(char~*datarep, void *inbuf, int incount, MPI\_Datatype~datatype, void~*outbuf, MPI\_Aint~outsize, MPI\_Aint~*position)} 
 
 \mpifbind{MPI\_PACK\_EXTERNAL(DATAREP, INBUF, INCOUNT, DATATYPE, OUTBUF, OUTSIZE, POSITION, IERROR)\fargs INTEGER INCOUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) OUTSIZE, POSITION \\CHARACTER*(*) DATAREP \\ <type> INBUF(*), OUTBUF(*)}
@@ -3788,7 +3786,7 @@
 \funcarg{\IN}{datatype}{datatype of output data item (handle) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Unpack\_external(char~*datarep, void *inbuf, MPI\_Aint~insize, MPI\_Aint~*position, void~*outbuf, int~outcount, MPI\_Datatype~datatype)} 
 
 \mpifbind{MPI\_UNPACK\_EXTERNAL(DATAREP, INBUF, INSIZE, POSITION, OUTBUF, OUTCOUNT, DATATYPE, IERROR)\fargs INTEGER OUTCOUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) INSIZE, POSITION \\ CHARACTER*(*) DATAREP \\ <type> INBUF(*), OUTBUF(*)}
@@ -3802,7 +3800,7 @@
 \funcarg{\OUT}{size}{output buffer size, in bytes (integer) }
 \end{funcdef}
 
-\cdeclindex{MPI\_Aint}\cdeclindex{MPI::Aint}%
+\cdeclindex{MPI\_Aint}%
 \mpibind{MPI\_Pack\_external\_size(char~*datarep, int~incount, MPI\_Datatype~datatype, MPI\_Aint~*size)} 
 
 \mpifbind{MPI\_PACK\_EXTERNAL\_SIZE(DATAREP, INCOUNT, DATATYPE, SIZE, IERROR)\fargs INTEGER INCOUNT, DATATYPE, IERROR \\ INTEGER(KIND=MPI\_ADDRESS\_KIND) SIZE \\ CHARACTER*(*) DATAREP }
Index: chap-deprecated/deprecated.tex
===================================================================
--- chap-deprecated/deprecated.tex	(revision 1036)
+++ chap-deprecated/deprecated.tex	(working copy)
@@ -467,20 +467,20 @@
 \hline 
 \typedefindex{MPI\_Comm\_errhandler\_fn}\typedefindex{MPI\_Comm\_errhandler\_function}% 
 \ctype{MPI\_Comm\_errhandler\_fn} & \ctype{MPI\_Comm\_errhandler\_function} \\ 
-\ctype{MPI::Comm::Errhandler\_fn} & \ctype{MPI::Comm::Errhandler\_function} \\ 
+\mpicpptype{MPI::Comm::Errhandler\_fn} & \mpicpptype{MPI::Comm::Errhandler\_function} \\ 
 \typedefindex{MPI\_File\_errhandler\_fn}\typedefindex{MPI\_File\_errhandler\_function}% 
 \ctype{MPI\_File\_errhandler\_fn} & \ctype{MPI\_File\_errhandler\_function} \\ 
-\ctype{MPI::File::Errhandler\_fn} & \ctype{MPI::File::Errhandler\_function} \\ 
+\mpicpptype{MPI::File::Errhandler\_fn} & \mpicpptype{MPI::File::Errhandler\_function} \\ 
 \typedefindex{MPI\_Win\_errhandler\_fn}\typedefindex{MPI\_Win\_errhandler\_function}% 
 \ctype{MPI\_Win\_errhandler\_fn} & \ctype{MPI\_Win\_errhandler\_function} \\ 
-\ctype{MPI::Win::Errhandler\_fn} & \ctype{MPI::Win:::Errhandler\_function} \\ 
+\mpicpptype{MPI::Win::Errhandler\_fn} & \mpicpptype{MPI::Win:::Errhandler\_function} \\ 
 \hline 
 \end{tabular} 
 \end{center}  
  
 \MPIreplaceBeginNew{3.0}{281}
 The entire set of C++ language bindings have been removed.
-See Chatper~\ref{chap:removed},
+See Chapter~\ref{chap:removed},
 {\sf Removed Interfaces}
 for more information.
  
